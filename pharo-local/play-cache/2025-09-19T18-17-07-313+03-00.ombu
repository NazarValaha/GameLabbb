OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T18:17:40.366+03:00' ],
		#self : OmReference [ '1' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 .\r    #(1 2 3 4) = #(1 2 3 4).\r    #(1 2 3 4) == #(1 2 3 4).\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2).\r    \'hello\' <= \'goodbye\'.\r    5 = (2 + 3). \r    20 factorial between:1e16 and:1e20 .\r    (2@12)<(100@120).\r    $a isUppercase. \r    (\'hello\' at: 1) isVowel.\r    7 odd.\r\r    56 = 7 * 8\r    \'Bye!\' at:2 isVowel.\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\r\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class.\r    Boolean superclass.\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T18:18:45.163+03:00' ],
		#self : OmReference [ '2' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4).\r    #(1 2 3 4) == #(1 2 3 4).\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2).\r    \'hello\' <= \'goodbye\'.\r    5 = (2 + 3). \r    20 factorial between:1e16 and:1e20 .\r    (2@12)<(100@120).\r    $a isUppercase. \r    (\'hello\' at: 1) isVowel.\r    7 odd.\r\r    56 = 7 * 8\r    \'Bye!\' at:2 isVowel.\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\r\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class.\r    Boolean superclass.\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T18:18:57.181+03:00' ],
		#self : OmReference [ '3' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2).\r    \'hello\' <= \'goodbye\'.\r    5 = (2 + 3). \r    20 factorial between:1e16 and:1e20 .\r    (2@12)<(100@120).\r    $a isUppercase. \r    (\'hello\' at: 1) isVowel.\r    7 odd.\r\r    56 = 7 * 8\r    \'Bye!\' at:2 isVowel.\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\r\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class.\r    Boolean superclass.\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T18:19:12.739+03:00' ],
		#self : OmReference [ '4' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). \r    20 factorial between:1e16 and:1e20 .\r    (2@12)<(100@120).\r    $a isUppercase. \r    (\'hello\' at: 1) isVowel.\r    7 odd.\r\r    56 = 7 * 8\r    \'Bye!\' at:2 isVowel.\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\r\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class.\r    Boolean superclass.\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T18:19:51.324+03:00' ],
		#self : OmReference [ '5' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 .\r    (2@12)<(100@120).\r    $a isUppercase. \r    (\'hello\' at: 1) isVowel.\r    7 odd.\r\r    56 = 7 * 8\r    \'Bye!\' at:2 isVowel.\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\r\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class.\r    Boolean superclass.\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T18:20:00.522+03:00' ],
		#self : OmReference [ '6' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120).\r    $a isUppercase. \r    (\'hello\' at: 1) isVowel.\r    7 odd.\r\r    56 = 7 * 8\r    \'Bye!\' at:2 isVowel.\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\r\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class.\r    Boolean superclass.\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T18:20:13.646+03:00' ],
		#self : OmReference [ '7' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel.\r    7 odd.\r\r    56 = 7 * 8\r    \'Bye!\' at:2 isVowel.\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\r\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class.\r    Boolean superclass.\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T18:20:23.913+03:00' ],
		#self : OmReference [ '8' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd.\r\r    56 = 7 * 8\r    \'Bye!\' at:2 isVowel.\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\r\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class.\r    Boolean superclass.\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T18:20:30.125+03:00' ],
		#self : OmReference [ '9' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = 7 * 8\r    \'Bye!\' at:2 isVowel.\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\r\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class.\r    Boolean superclass.\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T18:20:42.331+03:00' ],
		#self : OmReference [ '10' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8)\r    \'Bye!\' at:2 isVowel.\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\r\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class.\r    Boolean superclass.\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T18:20:49.624+03:00' ],
		#self : OmReference [ '11' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    \'Bye!\' at:2 isVowel.\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\r\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class.\r    Boolean superclass.\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T18:21:19.344+03:00' ],
		#self : OmReference [ '12' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel.\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\r\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class.\r    Boolean superclass.\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T18:21:34.291+03:00' ],
		#self : OmReference [ '13' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\r\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class.\r    Boolean superclass.\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T18:25:06.702+03:00' ],
		#self : OmReference [ '14' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class.\r    Boolean superclass.\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T18:28:41.641+03:00' ],
		#self : OmReference [ '15' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction), \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class.\r    Boolean superclass.\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T18:40:16.092+03:00' ],
		#self : OmReference [ '16' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character,  \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class.\r    Boolean superclass.\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T18:46:18.37+03:00' ],
		#self : OmReference [ '17' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class.\r    Boolean superclass.\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T18:47:48.773+03:00' ],
		#self : OmReference [ '18' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, isUpperCase, isVowel, \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class.\r    Boolean superclass.\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T18:48:09.561+03:00' ],
		#self : OmReference [ '19' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash. \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class.\r    Boolean superclass.\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T18:49:58.814+03:00' ],
		#self : OmReference [ '20' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання:  \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class.\r    Boolean superclass.\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:05:07.062+03:00' ],
		#self : OmReference [ '21' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class.\r    Boolean superclass.\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:06:17.505+03:00' ],
		#self : OmReference [ '22' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class.\r    Boolean superclass.\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:08:08.684+03:00' ],
		#self : OmReference [ '23' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class.\r    Boolean superclass.\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:08:20.266+03:00' ],
		#self : OmReference [ '24' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmallTalkImage"\r    Boolean superclass.\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:08:31.532+03:00' ],
		#self : OmReference [ '25' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass.\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:08:39.448+03:00' ],
		#self : OmReference [ '26' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number.\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:08:47.403+03:00' ],
		#self : OmReference [ '27' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger.\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:09:02.132+03:00' ],
		#self : OmReference [ '28' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger.\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:18:34.211+03:00' ],
		#self : OmReference [ '29' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude.\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:18:42.416+03:00' ],
		#self : OmReference [ '30' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new.\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:18:50.899+03:00' ],
		#self : OmReference [ '31' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:.\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:18:57.262+03:00' ],
		#self : OmReference [ '32' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+.\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:19:04.99+03:00' ],
		#self : OmReference [ '33' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:.\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:19:29.04+03:00' ],
		#self : OmReference [ '34' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:22:41.598+03:00' ],
		#self : OmReference [ '35' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd.\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:22:50.025+03:00' ],
		#self : OmReference [ '36' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1).\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5).\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:23:01.849+03:00' ],
		#self : OmReference [ '37' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). ""\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:23:16.256+03:00' ],
		#self : OmReference [ '38' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ].\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:23:53.855+03:00' ],
		#self : OmReference [ '39' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ].\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:24:06.786+03:00' ],
		#self : OmReference [ '40' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:24:37.514+03:00' ],
		#self : OmReference [ '41' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]].\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:26:03.801+03:00' ],
		#self : OmReference [ '42' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 400, на 4, але не на 100. false, якщо число ділиться на 100, але не на 4 і не на 400"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:30:57.21+03:00' ],
		#self : OmReference [ '43' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\'].\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:31:15.155+03:00' ],
		#self : OmReference [ '44' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.                                 \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:31:50.95+03:00' ],
		#self : OmReference [ '45' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer.\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:32:53.484+03:00' ],
		#self : OmReference [ '46' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:36:59.087+03:00' ],
		#self : OmReference [ '47' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:38:10.799+03:00' ],
		#self : OmReference [ '48' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f .\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:38:50.301+03:00' ],
		#self : OmReference [ '49' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f.\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:39:02.753+03:00' ],
		#self : OmReference [ '50' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f. "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i.\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:39:39.529+03:00' ],
		#self : OmReference [ '51' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f. "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i. "Результат: ввів число 2, отримав число 4"\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum.\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:39:51.807+03:00' ],
		#self : OmReference [ '52' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f. "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i. "Результат: ввів число 2, отримав число 4"\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum. "(15/4)"\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  \r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:40:21.004+03:00' ],
		#self : OmReference [ '53' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f. "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i. "Результат: ввів число 2, отримав число 4"\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum. "(15/4)"\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  "Результат: 0.479425533234127"\r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.             \r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:40:39.641+03:00' ],
		#self : OmReference [ '54' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f. "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i. "Результат: ввів число 2, отримав число 4"\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum. "(15/4)"\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  "Результат: 0.479425533234127"\r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.            "Результат: 1234"\r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string.\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:41:11.759+03:00' ],
		#self : OmReference [ '55' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f. "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i. "Результат: ввів число 2, отримав число 4"\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum. "(15/4)"\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  "Результат: 0.479425533234127"\r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.            "Результат: 1234"\r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string. "Результат: \'nOw Is thE tImE\'"\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:50:57.311+03:00' ],
		#self : OmReference [ '56' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f. "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i. "Результат: ввів число 2, отримав число 4"\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum. "(15/4)"\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  "Результат: 0.479425533234127"\r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.            "Результат: 1234"\r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string. "Результат: \'nOw Is thE tImE\'"\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\'Відповідь: \'\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:53:03.76+03:00' ],
		#self : OmReference [ '57' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f. "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i. "Результат: ввів число 2, отримав число 4"\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum. "(15/4)"\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  "Результат: 0.479425533234127"\r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.            "Результат: 1234"\r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string. "Результат: \'nOw Is thE tImE\'"\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\'Відповідь: input - екземпляр класу FileStream(для читання), а output - екземпляр класу FileStream(для запису)\'\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr.\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:55:24.166+03:00' ],
		#self : OmReference [ '58' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f. "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i. "Результат: ввів число 2, отримав число 4"\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum. "(15/4)"\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  "Результат: 0.479425533234127"\r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.            "Результат: 1234"\r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string. "Результат: \'nOw Is thE tImE\'"\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\'Відповідь: input - екземпляр класу FileStream(для читання), а output - екземпляр класу FileStream(для запису)\'\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr. "Print it -> Transcript, у Transcript виводить: 2\t4\t8\t16\t32\t"\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m.\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:55:38.97+03:00' ],
		#self : OmReference [ '59' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f. "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i. "Результат: ввів число 2, отримав число 4"\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum. "(15/4)"\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  "Результат: 0.479425533234127"\r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.            "Результат: 1234"\r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string. "Результат: \'nOw Is thE tImE\'"\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\'Відповідь: input - екземпляр класу FileStream(для читання), а output - екземпляр класу FileStream(для запису)\'\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr. "Print it -> Transcript, у Transcript виводить: 2\t4\t8\t16\t32\t"\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m. "Результат: 7"\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:55:49.08+03:00' ],
		#self : OmReference [ '60' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f. "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i. "Результат: ввів число 2, отримав число 4"\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum. "(15/4)"\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  "Результат: 0.479425533234127"\r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.            "Результат: 1234"\r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string. "Результат: \'nOw Is thE tImE\'"\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\'Відповідь: input - екземпляр класу FileStream(для читання), а output - екземпляр класу FileStream(для запису)\'\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr. "Print it -> Transcript, у Transcript виводить: 2\t4\t8\t16\t32\t"\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m. "Результат: 7"\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ] "Результат: #(0 4 16 36)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ]\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:56:29.301+03:00' ],
		#self : OmReference [ '61' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f. "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i. "Результат: ввів число 2, отримав число 4"\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum. "(15/4)"\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  "Результат: 0.479425533234127"\r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.            "Результат: 1234"\r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string. "Результат: \'nOw Is thE tImE\'"\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\'Відповідь: input - екземпляр класу FileStream(для читання), а output - екземпляр класу FileStream(для запису)\'\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr. "Print it -> Transcript, у Transcript виводить: 2\t4\t8\t16\t32\t"\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m. "Результат: 7"\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ] "Результат: #(0 4 16 36)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ] "Результат: #(2 4 6 8)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ]\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:56:50.411+03:00' ],
		#self : OmReference [ '62' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f. "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i. "Результат: ввів число 2, отримав число 4"\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum. "(15/4)"\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  "Результат: 0.479425533234127"\r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.            "Результат: 1234"\r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string. "Результат: \'nOw Is thE tImE\'"\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\'Відповідь: input - екземпляр класу FileStream(для читання), а output - екземпляр класу FileStream(для запису)\'\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr. "Print it -> Transcript, у Transcript виводить: 2\t4\t8\t16\t32\t"\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m. "Результат: 7"\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ] "Результат: #(0 4 16 36)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ] "Результат: #(2 4 6 8)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ] "Результат: #(1 3 5 7 9)"\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ]\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:57:03.134+03:00' ],
		#self : OmReference [ '63' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f. "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i. "Результат: ввів число 2, отримав число 4"\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum. "(15/4)"\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  "Результат: 0.479425533234127"\r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.            "Результат: 1234"\r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string. "Результат: \'nOw Is thE tImE\'"\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\'Відповідь: input - екземпляр класу FileStream(для читання), а output - екземпляр класу FileStream(для запису)\'\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr. "Print it -> Transcript, у Transcript виводить: 2\t4\t8\t16\t32\t"\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m. "Результат: 7"\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ] "Результат: #(0 4 16 36)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ] "Результат: #(2 4 6 8)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ] "Результат: #(1 3 5 7 9)"\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ] "Результат: 16"\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:57:23.062+03:00' ],
		#self : OmReference [ '64' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f. "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i. "Результат: ввів число 2, отримав число 4"\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum. "(15/4)"\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  "Результат: 0.479425533234127"\r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.            "Результат: 1234"\r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string. "Результат: \'nOw Is thE tImE\'"\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\'Відповідь: input - екземпляр класу FileStream(для читання), а output - екземпляр класу FileStream(для запису)\'\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr. "Print it -> Transcript, у Transcript виводить: 2\t4\t8\t16\t32\t"\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m. "Результат: 7"\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ] "Результат: #(0 4 16 36)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ] "Результат: #(2 4 6 8)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ] "Результат: #(1 3 5 7 9)"\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ] "Результат: 16"\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared "Результат: false"\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ]\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:57:30.095+03:00' ],
		#self : OmReference [ '65' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f. "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i. "Результат: ввів число 2, отримав число 4"\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum. "(15/4)"\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  "Результат: 0.479425533234127"\r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.            "Результат: 1234"\r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string. "Результат: \'nOw Is thE tImE\'"\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\'Відповідь: input - екземпляр класу FileStream(для читання), а output - екземпляр класу FileStream(для запису)\'\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr. "Print it -> Transcript, у Transcript виводить: 2\t4\t8\t16\t32\t"\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m. "Результат: 7"\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ] "Результат: #(0 4 16 36)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ] "Результат: #(2 4 6 8)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ] "Результат: #(1 3 5 7 9)"\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ] "Результат: 16"\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared "Результат: false"\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ] "15"\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:57:37.072+03:00' ],
		#self : OmReference [ '66' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f. "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i. "Результат: ввів число 2, отримав число 4"\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum. "(15/4)"\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  "Результат: 0.479425533234127"\r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.            "Результат: 1234"\r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string. "Результат: \'nOw Is thE tImE\'"\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\'Відповідь: input - екземпляр класу FileStream(для читання), а output - екземпляр класу FileStream(для запису)\'\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr. "Print it -> Transcript, у Transcript виводить: 2\t4\t8\t16\t32\t"\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m. "Результат: 7"\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ] "Результат: #(0 4 16 36)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ] "Результат: #(2 4 6 8)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ] "Результат: #(1 3 5 7 9)"\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ] "Результат: 16"\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared "Результат: false"\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ] "15"\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ] "120"\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ]\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:57:43.292+03:00' ],
		#self : OmReference [ '67' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f. "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i. "Результат: ввів число 2, отримав число 4"\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum. "(15/4)"\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  "Результат: 0.479425533234127"\r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.            "Результат: 1234"\r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string. "Результат: \'nOw Is thE tImE\'"\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\'Відповідь: input - екземпляр класу FileStream(для читання), а output - екземпляр класу FileStream(для запису)\'\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr. "Print it -> Transcript, у Transcript виводить: 2\t4\t8\t16\t32\t"\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m. "Результат: 7"\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ] "Результат: #(0 4 16 36)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ] "Результат: #(2 4 6 8)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ] "Результат: #(1 3 5 7 9)"\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ] "Результат: 16"\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared "Результат: false"\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ] "15"\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ] "120"\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ] "5"\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ]\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T19:58:01.971+03:00' ],
		#self : OmReference [ '68' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f. "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i. "Результат: ввів число 2, отримав число 4"\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum. "(15/4)"\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  "Результат: 0.479425533234127"\r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.            "Результат: 1234"\r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string. "Результат: \'nOw Is thE tImE\'"\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\'Відповідь: input - екземпляр класу FileStream(для читання), а output - екземпляр класу FileStream(для запису)\'\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr. "Print it -> Transcript, у Transcript виводить: 2\t4\t8\t16\t32\t"\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m. "Результат: 7"\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ] "Результат: #(0 4 16 36)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ] "Результат: #(2 4 6 8)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ] "Результат: #(1 3 5 7 9)"\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ] "Результат: 16"\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared "Результат: false"\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ] "15"\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ] "120"\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ] "5"\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ] "0"\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T20:00:23.952+03:00' ],
		#self : OmReference [ '69' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f. "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i. "Результат: ввів число 2, отримав число 4"\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum. "(15/4)"\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  "Результат: 0.479425533234127"\r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.            "Результат: 1234"\r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string. "Результат: \'nOw Is thE tImE\'"\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\'Відповідь: input - екземпляр класу FileStream(для читання), а output - екземпляр класу FileStream(для запису)\'\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr. "Print it -> Transcript, у Transcript виводить: 2\t4\t8\t16\t32\t"\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m. "Результат: 7"\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ] "Результат: #(0 4 16 36)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ] "Результат: #(2 4 6 8)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ] "Результат: #(1 3 5 7 9)"\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ] "Результат: 16"\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared "Результат: false"\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ] "15"\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ] "120"\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ] "5"\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ] "0"\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r"Відповідь: "\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T20:02:13.429+03:00' ],
		#self : OmReference [ '70' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f. "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i. "Результат: ввів число 2, отримав число 4"\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum. "(15/4)"\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  "Результат: 0.479425533234127"\r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.            "Результат: 1234"\r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string. "Результат: \'nOw Is thE tImE\'"\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\'Відповідь: input - екземпляр класу FileStream(для читання), а output - екземпляр класу FileStream(для запису)\'\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr. "Print it -> Transcript, у Transcript виводить: 2\t4\t8\t16\t32\t"\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m. "Результат: 7"\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ] "Результат: #(0 4 16 36)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ] "Результат: #(2 4 6 8)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ] "Результат: #(1 3 5 7 9)"\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ] "Результат: 16"\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared "Результат: false"\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ] "15"\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ] "120"\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ] "5"\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ] "0"\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r"Відповідь: \rdo: Виконує блок для кожного елемента колекції.\rcollect: Створює нову колекцію, де кожен елемент є результатом блоку.\r"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T20:03:44.271+03:00' ],
		#self : OmReference [ '71' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f. "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i. "Результат: ввів число 2, отримав число 4"\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum. "(15/4)"\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  "Результат: 0.479425533234127"\r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.            "Результат: 1234"\r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string. "Результат: \'nOw Is thE tImE\'"\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\'Відповідь: input - екземпляр класу FileStream(для читання), а output - екземпляр класу FileStream(для запису)\'\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr. "Print it -> Transcript, у Transcript виводить: 2\t4\t8\t16\t32\t"\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m. "Результат: 7"\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ] "Результат: #(0 4 16 36)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ] "Результат: #(2 4 6 8)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ] "Результат: #(1 3 5 7 9)"\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ] "Результат: 16"\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared "Результат: false"\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ] "15"\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ] "120"\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ] "5"\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ] "0"\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r"Відповідь: \rdo: Виконує блок для кожного елемента колекції.\rcollect: Створює нову колекцію, де кожен елемент є результатом блоку.\rselect: Вибирає елементи, що задовольняють умову блоку.\rreject: Вибирає елементи, що не задовольняють умову блоку.\rdetect: Повертає перший елемент, що задовольняє умову блоку.\rincludes: Перевіряє, чи колекція містить певний елемент.\rinject:into: Виконує агрегацію (акумуляцію) елементів колекції через блок.\r\r"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T20:05:33.872+03:00' ],
		#self : OmReference [ '72' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f. "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i. "Результат: ввів число 2, отримав число 4"\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum. "(15/4)"\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  "Результат: 0.479425533234127"\r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.            "Результат: 1234"\r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string. "Результат: \'nOw Is thE tImE\'"\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\'Відповідь: input - екземпляр класу FileStream(для читання), а output - екземпляр класу FileStream(для запису)\'\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr. "Print it -> Transcript, у Transcript виводить: 2\t4\t8\t16\t32\t"\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m. "Результат: 7"\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ] "Результат: #(0 4 16 36)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ] "Результат: #(2 4 6 8)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ] "Результат: #(1 3 5 7 9)"\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ] "Результат: 16"\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared "Результат: false"\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ] "15"\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ] "120"\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ] "5"\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ] "0"\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r"Відповідь: \rdo: Виконує блок для кожного елемента колекції.\rcollect: Створює нову колекцію, де кожен елемент є результатом блоку.\rselect: Вибирає елементи, що задовольняють умову блоку.\rreject: Вибирає елементи, що не задовольняють умову блоку.\rdetect: Повертає перший елемент, що задовольняє умову блоку.\rincludes: Перевіряє, чи колекція містить певний елемент.\rinject:into: Виконує агрегацію (акумуляцію) елементів колекції через блок.\r\rЯкі ще є ітератори в протоколі класу Collection?:\ranySatisfy: Повертає true, якщо хоча б один елемент задовольняє умову.\rallSatisfy: Повертає true, якщо всі елементи задовольняють умову.\rdetect:ifNone: Як detect:, але повертає значення за замовчуванням, якщо нічого не знайдено.\rdo:separatedBy: Виконує блок для кожного елемента з розділювачем між елементами.\rreject:collect: Комбінований варіант, можна спочатку відфільтрувати, потім обчислити.\r"\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T20:09:33.278+03:00' ],
		#self : OmReference [ '73' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f. "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i. "Результат: ввів число 2, отримав число 4"\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum. "(15/4)"\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  "Результат: 0.479425533234127"\r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.            "Результат: 1234"\r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string. "Результат: \'nOw Is thE tImE\'"\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\'Відповідь: input - екземпляр класу FileStream(для читання), а output - екземпляр класу FileStream(для запису)\'\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr. "Print it -> Transcript, у Transcript виводить: 2\t4\t8\t16\t32\t"\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m. "Результат: 7"\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ] "Результат: #(0 4 16 36)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ] "Результат: #(2 4 6 8)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ] "Результат: #(1 3 5 7 9)"\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ] "Результат: 16"\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared "Результат: false"\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ] "15"\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ] "120"\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ] "5"\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ] "0"\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r"Відповідь: \rdo: Виконує блок для кожного елемента колекції.\rcollect: Створює нову колекцію, де кожен елемент є результатом блоку.\rselect: Вибирає елементи, що задовольняють умову блоку.\rreject: Вибирає елементи, що не задовольняють умову блоку.\rdetect: Повертає перший елемент, що задовольняє умову блоку.\rincludes: Перевіряє, чи колекція містить певний елемент.\rinject:into: Виконує агрегацію (акумуляцію) елементів колекції через блок.\r\rЯкі ще є ітератори в протоколі класу Collection?:\ranySatisfy: Повертає true, якщо хоча б один елемент задовольняє умову.\rallSatisfy: Повертає true, якщо всі елементи задовольняють умову.\rdetect:ifNone: Як detect:, але повертає значення за замовчуванням, якщо нічого не знайдено.\rdo:separatedBy: Виконує блок для кожного елемента з розділювачем між елементами.\rreject:collect: Комбінований варіант, можна спочатку відфільтрувати, потім обчислити.\rdetect:ifNone: Повертає перший елемент, що задовольняє блок, або значення за замовчуванням."\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-09-19T20:10:11.795+03:00' ],
		#self : OmReference [ '74' ]
	},
	#content : '"*\r*                      ЛАБОРАТОРНА РОБОТА 2\r*\r*                   Тема: СТРУКТУРИ КЕРУВАННЯ\r*\r*  Завдання до лабораторної роботи:\r*     1. Випробуйте наведені нижче приклади, збережіть отримані результати.\r*     2. Виконайте запропоновані завдання, прокоментуйте їхнє виконання.\r*     3. Сформулюйте висновки щодо структур керування Smalltalk.\r*\r=============================================================================="\r\r\r" ------ ПОРІВНЯННЯ ОБ\'ЄКТІВ"\r\r"{ Виокремте кожен з наведених нижче рядів коду і виконайте <Print it> }"\r\r    3 < 4 . "true"\r    #(1 2 3 4) = #(1 2 3 4). "true"\r    #(1 2 3 4) == #(1 2 3 4). "true"\r    (#(1 2 3 4)at:2) == (#(1 2 3 4)at:2). "true"\r    \'hello\' <= \'goodbye\'. "false"\r    5 = (2 + 3). "true"\r    20 factorial between:1e16 and:1e20 . "true"\r    (2@12)<(100@120). "true"\r    $a isUppercase. "false"\r    (\'hello\' at: 1) isVowel. "false"\r    7 odd. "true"\r\r    56 = (7 * 8) "true"\r    (\'Bye!\' at:2) isVowel. "false"\r\r"{ Які ще об\'єкти можна порівнювати? Яким чином? Знайдіть відповідні методи }\r{ за допомогою SystemBrowser\'а. Наведіть приклади використання.             }\r\'Відповідь: Можна порівнювати числові об\'єкти(Integer,Float, LargePositiveInteger, Fraction),Symbols, String, Character, Date, Time, Duration, Колекції, Boolean. \rПорівнювати можна завдяки таким методам: =, ==, <, >, ~=, <=, >=, compare, between: and:, hash.\rПриклади використання: \r#(1 2 3) = #(1 2 3). ""true""\r#(1 2 3) == #(1 2 3). ""false""\r\'apple\' ~= \'orange\'. ""true""\r10 between: 5 and: 15. ""true""\r5 compare: 5.   ""повертає 0, бо 5 = 5""\r3 hash. Поверне ціле число, 3 \'\r ------ ТЕСТУВАННЯ ОБ\'ЄКТІВ\r\r{ Отримайте результати для наведених рядків коду. Запропонуйте власні приклади. }"\r\r    Smalltalk class. "SmalltalkImage"\r    Boolean superclass. "Object"\r    20 isKindOf: Number. "true"\r    20 isMemberOf: SmallInteger. "true"\r    20 factorial isMemberOf: SmallInteger. "false"\r    Number inheritsFrom: Magnitude. "true"\r    Number respondsTo: #new. "true"\r    20 respondsTo: #max:. "true"\r    3/5 respondsTo: #+. "true"\r    $A respondsTo: #between:and:. "true"\r"Приклади:\rInteger respondsTo: #+. ""true""\r3@4 respondsTo: #x. ""true""\r#(1 2 3) respondsTo: #at:. ""true""\r$z respondsTo: #isLowercase. ""true""\r15 isKindOf: Number. ""true""\rtrue superclass. ""Boolean""\r\'hello\' class. ""String""\r"\r\r "------ ЛОГІЧНІ ВИРАЗИ\r{ Виконайте наступні приклади за допомогою <Print it> }"\r\r    5 factorial > 100 & 7 odd. "true"\r\r    (250 sqrt between: 16 and: 15) | (5 sin > 1). "false"\r\r    (195 \\\\ 3 = 0 | (195 \\\\ 7 = 0)) & (1/3 between:0 and:0.5). "true"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ aChar <= $9 ]. "false"\r" * * * "\r"{ Відкрийте попередньо вікно Transcript. Виконайте як нероздільний блок }"   \r    aChar := 65 asCharacter.\r    aChar >= $0 and: [ Transcript show: aChar printString; cr. aChar <= $9 ]. "false, $A у Transcript виводить"\r" * * * "\r"{ Виконайте як нероздільний блок }"   \r    anInteger := (UIManager default request: \'Input number of a year\' initialAnswer: \'2000\' title: \'Is it leap year?\') asInteger.\r    ^anInteger\\\\4 = 0\r        and:[anInteger\\\\100 > 0 or:[anInteger \\\\ 400 = 0]]. "true, якщо число ділиться на 4. false, якщо число ділиться на 100"\r\r\r" ------ ГАЛУЖЕННЯ\r{ Виконайте наступні приклади як нероздільний блок за допомогою <Print it> }"\r" * * * "\r    3 < 4\r        ifTrue:  [\'The true block executed\']\r        ifFalse: [\'The false block executed\']. "The true block executed"\r" * * * "\r    a := 5 squared.  Transcript show:\'  a=\',a printString; cr.\r    b := 4 factorial.Transcript show:\'  b=\',b printString; cr.\r    a < b\r        ifTrue:  [max := b]\r        ifFalse: [max := a]. \r    Transcript show:\'max=\',max printString; cr.\r     ^max.         "25, у Transcript виводить a=25, b=24, max=25"                        \r" * * * "\r    answer := (UIManager default confirm: \'Continue ?\')\r                     ifTrue: [ \'Yes\' ]  ifFalse: [ \'No\' ].\r    ^answer. "Як результат виводить або Yes, або No. Все залежить на яку кнопку саме натиснути"\r" * * * "\r    a:=UIManager default request: \'Input first number:\'.\r    a notNil ifTrue: [ a := a asNumber ]\r             ifFalse: [ UIManager default inform: \'Process stoped\'. ^nil ].\r    b:=(UIManager default request: \'Input second number, please:\') asNumber.\r    c:=UIManager default\rchooseFrom: #(\'circle\' \'oval\' \'square\' \'rectangle\' \'triangle\') values: #(5 10 15 20 25)\rlines: #() message: \'And now third one! Choose a shape\'.\r    max:= a>b ifTrue: [ a>c ifTrue:[a] ifFalse:[c]]\r              ifFalse:[ b>c ifTrue:[b] ifFalse:[c]].\r    ^\'max(\',a printString,\',\',b printString,\',\',c printString,\')=\',max printString.\r"Виводить max(перше число, яке вказали; друге число, яке вказали; і число, яке відповідає певній фігурі)"\r\r"\r ------ ПОВТОРЕННЯ (ЦИКЛИ)\r\r{ Виконайте приклади за допомогою <Print it> } "\r\r " Обчислення n! різними способами (не вбудованим методом) "\r\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    n timesRepeat: [ f := f*n. n := n - 1 ].\r    ^f . "Результат: ввів число 4, отримав 24"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    n < 0 ifTrue: [n := n negated ].\r    f := 1.\r    1 to: n do: [ :i | f := f * i ].\r    ^f . "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r" * * * "\r"| n f |"\r    n:=(UIManager default request:\'Input a nonegative integer\') asInteger.\r    f := 1.\r    [ n > 1 ] whileTrue: [ f := f*n. n := n - 1 ].\r    ^f. "Результат: ввів число 4, отримав 24. Такий самий результат, як у попередньому прикладі"\r\r" * * * Сума гармонійного ряду "\r\r"| n s i |"\r    n:=(UIManager default request:\'Input a number (<=10)\' initialAnswer: \'2\') asNumber.\r    s:=0. i:=0.\r    [ s > n ] whileFalse: [ i:=i+1. s:=1.0/i+s ].\r    ^i. "Результат: ввів число 2, отримав число 4"\r\r" * * *  Ще одна цікава сума "\r"| sum |"\r     sum := 0.\r     1/2 to: 1 by: 1/8 do: [ :i |\r          sum := sum + i ].\r     ^sum. "(15/4)"\r          \r" * * *  Ряд Маклорена для f(x) = sin x "\r  " 0.5 sin = 4.79425539e-1 "\r\r"| x s k y d |"\r    x:=0.5. y:=x*x negated. k:=2.\r    d:=x. s:=x.\r    [ d abs > 1e-5 ] whileTrue:\r    [ d:=d*y/k/(k+1). s:=s+d. k:=k+2 ].\r    ^s.  "Результат: 0.479425533234127"\r\r" * * *  Обчислення значення числа, з якого починається рядок "\r\r"| string index answer c |"\r      string := \'1234 is the number\'.\r      answer := 0.\r      index := 1.\r      string size timesRepeat: [\r           c := string at: index.\r           (c < $0 or: [ c > $9 ] )\r               ifTrue: [^answer].\r           answer := answer * 10\r               + c asciiValue - $0 asciiValue.\r           index := index + 1].\r     ^answer.            "Результат: 1234"\r                  \r" * * *  Перетворення рядка літер "\r\r "| string index c |"\r    string := String withAll: \'Now is THE time\'.\r    index := 1.\r    string size timesRepeat: [\r         c := string at: index.\r         string\r             at: index\r             put:\r                 (c isVowel\r                     ifTrue: [ c asUppercase ]\r                     ifFalse: [ c asLowercase ] ).\r         index := index + 1 ].\r    ^string. "Результат: \'nOw Is thE tImE\'"\r\r"{ Виконайте наступні приклади за допомогою <Do it> }"\r\r" * * *  Копіювання файла "\r" Вважається, що папка з лабораторними називається Labs і вкладена в папку Pharo "\r"| path input output |"\r     path := FileSystem workingDirectory asPath parent parent pathString, \'/Labs/\'.\r     path := path collect: [ :aChar | aChar == $/ ifTrue: [ $\\ ] ifFalse: [ aChar ] ] from: 2 to: path size.\r     input := File openForReadFileNamed: path, \'Pharo-9_Lab2.txt\'.\r     output := File openForWriteFileNamed: path, \'CopyPharoLab2.txt\'.\r     [input atEnd]\r          whileFalse: [output nextPut: input next].\r     input close.\r     output close.\r\r"{ Екземплярами яких класів є створені в цьому прикладі об\'єкти input, output ? }\r\r\'Відповідь: input - екземпляр класу FileStream(для читання), а output - екземпляр класу FileStream(для запису)\'\r\r ------ ІТЕРАТОРИ\r\r{ Ітератор - метод перебору та опрацювання елементів колекції.     }\r{ Дію ітераторів продемонструємо на прикладі масиву. Use <Print it> }"\r" * * * "\r    Transcript cr.\r    #(2 4 8 16 32) do: [:x | x printOn: Transcript. Transcript tab].\r    Transcript show:\' \'; cr. "Print it -> Transcript, у Transcript виводить: 2\t4\t8\t16\t32\t"\r" * * * "\r"| m a |"\r    a := #(3 7 5 0 2).\r    m:=a at: 1.\r    a do: [ :x | m := m max: x ].\r    ^m. "Результат: 7"\r" * * * "\r    #(0 2 4 6) collect: [ :x | x*x ] "Результат: #(0 4 16 36)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) select: [ :x | x even ] "Результат: #(2 4 6 8)"\r" * * * "\r    #(1 2 3 4 5 6 7 8 9) reject: [ :x | x even ] "Результат: #(1 3 5 7 9)"\r" * * * "\r    #(1 2 4 8 16 32 64) detect: [ :x | x > 10 ] "Результат: 16"\r" * * * "\r    #(1 2 4 8 16 32 64) includes: 6 squared "Результат: false"\r" * * * "\r    #(1 2 3 4 5) inject:0 into: [ :s :x | s+x ] "15"\r    #(1 2 3 4 5) inject:1 into: [ :f :x | f*x ] "120"\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m max:x ] "5"\r    #(1 2 3 4 5) inject:0 into: [ :m :x | m min:x ] "0"\r\r"{   Що робить кожен з ітераторів?   Які ще є ітератори в протоколі  }\r { класу Collection? Наведіть власні приклади використання ітераторів }"\r"Відповідь: \rdo: Виконує блок для кожного елемента колекції.\rcollect: Створює нову колекцію, де кожен елемент є результатом блоку.\rselect: Вибирає елементи, що задовольняють умову блоку.\rreject: Вибирає елементи, що не задовольняють умову блоку.\rdetect: Повертає перший елемент, що задовольняє умову блоку.\rincludes: Перевіряє, чи колекція містить певний елемент.\rinject:into: Виконує агрегацію (акумуляцію) елементів колекції через блок.\r\rЯкі ще є ітератори в протоколі класу Collection?:\ranySatisfy: Повертає true, якщо хоча б один елемент задовольняє умову.\rallSatisfy: Повертає true, якщо всі елементи задовольняють умову.\rdetect:ifNone: Як detect:, але повертає значення за замовчуванням, якщо нічого не знайдено.\rdo:separatedBy: Виконує блок для кожного елемента з розділювачем між елементами.\rreject:collect: Комбінований варіант, можна спочатку відфільтрувати, потім обчислити.\rdetect:ifNone: Повертає перший елемент, що задовольняє блок, або значення за замовчуванням.\r\r""Приклад 1: піднесення до квадрату всіх непарних чисел""\r#(1 2 3 4 5 6) select: [:x | x odd] collect: [:x | x*x].\r""Результат: #(1 9 25)""\r\r""Приклад 2: перевірка, чи всі числа більше нуля""\r#(2 4 6 8) allSatisfy: [:x | x > 0]. ""true""\r\r""Приклад 3: знайти перше число більше 10 або повернути -1""\r#(1 3 7 12 5) detect: [:x | x > 10] ifNone: [-1]. ""12""\r\r""Приклад 4: обчислити добуток всіх елементів""\r#(1 2 3 4 5) inject:1 into: [:prod :x | prod * x]. ""120""\r\r"\r\r\r'
}