OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-10-05T21:49:58.007+03:00' ],
		#self : OmReference [ '1' ]
	},
	#content : '"--------------------------------------------------------------------------------------\r*                      ЛАБОРОТОРНА РОБОТА 3\r*                 Тема: КЛАСИ ТА МЕТОДИ. КОЛЕКЦІЇ\r*\r*  Завдання до лабораторної роботи:\r*     1. Виконайте наведені нижче приклади, збережіть і поясніть отримані результати.\r*     2. Випробуйте різноманітні способи додавання нових класів до системи.\r*     3. Навчіться доповнювати функціональність класів.\r*     4. Випробуйте методи опрацювання колекцій.\r*\r\r    Виконайте за допомогою <Print it> \r\r ------ ПРИНАЛЕЖНІСТЬ КЛАСОВІ, ІЄРАРХІЯ КЛАСІВ\r"\r    #(Francesca Jackie Marisa Bree) class. "Array"\r    (#(Francesca Jackie Marisa Bree) at:2) class. "ByteSymbol"\r    \'Rakesh Vijay Charles Daniel Tyler\' class. "ByteString"\r    (\'Rakesh Vijay Charles Daniel Tyler\' at:2) class. "Character (a)"\r    World class . "WorldMorph"\r    Magnitude class. "Magnitude class"\r    Magnitude class class. "Metaclass"\r    nil class. "UndefinedObject"\r    5 species. "SmallInteger"\r    123456789000 species. "SmallInteger"\r    #aName species. "ByteString"\r " Яка різниця між повідомленнями class i species ? \r\r    Випробуйте різні способи відкривання браузера класів: за допомогою меню чи програмно \r     Виконайте за допомогою <Do it>\r"\r    ClyFullBrowserMorph open. \r    ClyFullBrowserMorph openOnClass: Date. \r    ClyFullBrowserMorph openOnClass: VolumeShape  selector:  #volume. \r\r" ------ МЕТОДИ КЛАСУ, КОНСТРУКТОРИ\r  Виконайте за допомогою <Print It>. Запропонуйте власні приклади. "\r\r    Array new: 10. "#(nil nil nil nil nil nil nil nil nil nil)"        \r    OrderedCollection  new. "an OrderedCollection()"\r    Date today. "29 September 2025"\r    Time now. "10:28:52.422 am"\r    UIManager default  request:\'How are you?\' initialAnswer:\'I\'\'m fine!\'. "\'I\'\'m fine!\'"\r    Integer readFrom: \'2013  1925\'. "2013"\r    Integer primesUpTo: 100. "#(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97)"\r    Rectangle origin:0@0 corner:200@100. "(0@0) corner: (200@100)"\r    Date nameOfMonth:12. "#December"\r    Date dayOfWeek: #Friday. "6"\r    Date orthodoxEasterDateFor: 2022. "24 April 2022"\r\r\r   \r"Інсталюйте вказані нижче МЕТОДИ КЛАСУ Date:\r  перенесіть копію тексту визначення методу з робочого вікна в браузер класів.\r\r""!Date class methodsFor: \'specific inquiries\' stamp: \'CamilloBruni 8/22/2013 19:47\'!""\r\rorthodoxEasterDateFor: year\r ""  compute the easter date according to the rules of the orthodox calendar.\r    source:       http://www.smart.net/~mmontes/ortheast.html   ""\r     | r1 r2 r3 r4 ra rb r5 rc date |\r\r    r1 := year \\\\ 19.\r    r2 := year \\\\ 4.\r    r3 := year \\\\ 7.\r    ra := 19*r1 + 16.\r    r4 := ra \\\\ 30.\r    rb := r2 + r2 + (4*r3) + (6*r4).\r    r5 := rb \\\\ 7.\r    rc := r4 + r5.\r    date := self year: year month: 4 day: 3.\r    ^date addDays: rc.\r""--------------------------------------------------------------------------------------""\r""!Date class methodsFor: \'specific inquiries\' stamp: \'CamilloBruni 8/22/2013 19:48\'!""\r\reasterDateFor: year\r ""  compute the easter date.\r    source: Physikalisch-Technische Bundesanstalt Braunschweig.\r    Lichtenberg, H.: Zur Interpretation der Gaussschen Osterformel und ihrer Ausnahmeregeln, Historia Mathematica 24 (1997), pp. 441-444\r      http://www.ptb.de/de/org/4/44/441/oste.htm  ""\r\r  | k m s a d r og sz oe day |\r\r  k := year // 100.\r  m := 15 + (3*k + 3//4) - (8*k + 13//25).\r   s := 2 - (3*k + 3// 4).\r  a := year \\\\ 19.\r  d := 19*a + m \\\\ 30.\r  r := d//29 + ((d//28) - (d//29)* (a// 11)).\r\r  og := 21 + d - r.\r  sz := 7 - (year//4 + year + s\\\\7).\r  oe := 7 - (og - sz\\\\7).\r  day := og + oe.\r  ^day <= 31\r    ifTrue: [ Date year: year month: 3 day: day ]\r    ifFalse: [ Date year: year month: 4 day: day - 31 ].\r"\r\r"Знайдіть роки, коли святкування припадають на один день."\r\ryearsWithMatchingEasterFrom: startYear to: endYear\r\r    | matchingYears orthodoxDate catholicDate |\r    matchingYears := OrderedCollection new.\r    (startYear to: endYear) do: [:year |\r        orthodoxDate := self orthodoxEasterDateFor: year.\r        catholicDate := self easterDateFor: year.\r        (orthodoxDate = catholicDate) ifTrue: [\r            matchingYears add: year\r        ].\r    ].\r    ^matchingYears asArray\r\rDate yearsWithMatchingEasterFrom: 2000 to: 2050. "#(2001 2004 2007 2010 2011 2014 2017 2025 2028 2031 2034 2037 2038 2041 2045 2048)"\r\r" ------ РЕКУРСІЯ\r  Додайте до класу Integer і випробуйте різні методи обчислення чисел  Фібоначчі.\r  Запропонуйте власні. Порівняйте їхню ефективність.      \r  Перед випробуванням fibonacci ЗБЕРЕЖІТЬ ІМІДЖ СИСТЕМИ! Він може зайняти Ваш комп на тиждень.  "\r\r" * ------- "\rfibonacci\r        "Answer the nth fibonacci number, where n is the receiver."\r    ^self < 2\r        ifTrue: [1]\r        ifFalse:[(self - 1) fibonacci + (self - 2) fibonacci]\r" * ------- "\rfibo\r        "Frontend function to call fibStart: with: .\r         Answer the nth fibonacci number, where n is the receiver."\r    ^self fibStart:1 with:1\r" * ------- "\rfibStart: n1 with: n2\r        "Private - Calculate the n-th Fibonacci number, where\r         n is the receiver, n1 is previous Fibonacci number\r         and n2 - the preprevious one."\r ^ (self < 2)\r        ifTrue: [ n1 ]\r        ifFalse:[ (self - 1) fibStart: n1+n2 with:n1 ]\r\r3 fibStart: 1 with: 10  "12"\r4 fibo "5"\r12 fibonacci "233"\r\r\r"\r\r\r<fibStart:with:>\rЦе рекурсивний метод, який обчислює n-те число послідовності Фібоначчі, використовуючи два допоміжні параметри — n1 (попереднє значення) і n2 (передпопереднє значення). На кожному кроці рекурсії відбувається виклик:\r(self - 1) fibStart: n1 + n2 with: n1 — таким чином, наступний етап отримує нові значення, де поточне число стає сумою двох попередніх.\rТакий підхід дозволяє виконувати обчислення без повторних підрахунків уже відомих значень, тому алгоритм має лінійну складність O(n). Він працює швидко навіть для великих n і потребує мінімум пам’яті — лише для рекурсивних викликів (глибина дорівнює n).\r\r<fibo>\rЦе допоміжний метод, який просто викликає fibStart:with: із початковими значеннями. Його мета — спростити виклик функції, щоб не потрібно було вручну задавати перші два числа послідовності. Фактично, він працює так само, як і fibStart:with:, але зручніший у використанні, коли потрібно просто отримати n-те число Фібоначчі.\r\r<fibonacci>\rЦей варіант використовує класичне рекурсивне визначення:\rF(n) = F(n - 1) + F(n - 2)\rМетод простий у розумінні, але дуже неефективний для великих n, оскільки він не запам’ятовує вже обчислені значення і багаторазово виконує ті самі обчислення. Через це його складність є експоненційною — приблизно O(2ⁿ). При великих значеннях n така реалізація значно навантажує процесор і стек викликів, тому практично використовується лише для навчальних цілей або демонстрацій.\r"\r\r"------------------------------------------------------------------------------------\r ------ СТВОРЕННЯ, ОПРАЦЮВАННЯ КОЛЕКЦІЙ\r  У текстовому файлі записано інформацію про матрицю цілих чисел: розміри\r  матриці в першому рядку файла, у всіх наступних рядках - рядки матриці.}\r  Прочитати матрицю, знайти максимальні елементи кожного рядка і зберегти\r  їх у файлі. Надрукувати максимальний елемент цілої матриці."\r\r"Наведений нижче код можна виконати безпосередньо в робочому вікні,\r проте,  доцільно зробити його методом власного навчального класу."\r\r| matr fStream fName n m mMatr mLines |\r        "Вибір файла за допомогою діалогу"\r    (fName:=UIManager default\r\t\t\tchooseFullFileNameMatching: nil \r\t\t\tlabel: \'Виберіть файл з числовими даними\' ) isNil\r        ifTrue: [ ^\'Ви не вибрали файла\' ]. \r        fStream := fName asFileReference readStream.\r\t        "Введення даних"\r \t    n := Integer readFrom: fStream.  \r\t    matr := Array new: n.\r\t    m := Integer readFrom: fStream.\r\t    matr := matr collect: [ :x | Array new: m ]. \r\t    1 to: n do: [ :i |  fStream nextLine.\r \t\t     matr at: i put: (\r\t\t\t\t (matr at: i) collect: [ :x |  \r\t\t\t\t\t\tInteger readFrom: fStream. ]\r\t\t\t\t\t )\t ].\r    fStream close. matr inspect.\r        "Обчислення максимальних елементів"\r    mLines:=matr collect: [ :r | r inject: (r at: 1) into: [ :x :y | x max: y] ].\r    mMatr:=mLines at: 1.\r    mLines do: [ :x | x > mMatr ifTrue: [ mMatr := x ] ].\r        "Побудова імені файла результатів, збереження"\r    fName at: fName size - 4 put: $_ .\r    fStream := fName asFileReference writeStream.\r    mLines do: [ :x | x printOn: fStream. fStream cr ].\r    fStream close.\r    ^mMatr .  \r\r" Поясніть код, наведений вище (кожне повідомлення!):\r\r\tУ цьому коді ми працюємо з матрицею чисел, зчитаною з файлу. Спершу оголошуємо локальні змінні для зберігання самої матриці, потоку файлу, імені файлу, кількості рядків і стовпців, а також для проміжних результатів. Далі відкривається діалог для вибору файлу користувачем. Якщо файл не обрано, метод одразу повертає повідомлення про це і подальше виконання коду зупиняється.\r\rПісля цього створюється потік для читання файлу. Перше число з файлу визначає кількість рядків матриці, а друге число — кількість стовпців. У початковій версії матриця реалізується як масив масивів: спершу створюємо масив для рядків, а потім кожен рядок заповнюємо окремим масивом стовпців. Потік закривається після зчитування даних, і відкривається інспектор для перегляду структури матриці.\r\rЩоб знайти максимуми рядків, кожен рядок обробляється за допомогою методу inject, який проходить усі елементи рядка і визначає найбільше значення. Потім, перебираючи всі максимуми рядків, знаходиться загальний максимум усієї матриці. Після обробки результатів ім’я файлу змінюється для збереження результатів у новий файл, відкривається потік на запис, і кожен максимум рядка записується в файл на окремий рядок. Потім потік закривається. Нарешті, метод повертає максимальний елемент усієї матриці.\r\r   Як можна замінити масив масивів на екземпляр класу Matrix?:\r\tЯкщо використовувати клас Matrix, код можна зробити більш компактним і зручним. Клас Matrix зберігає матрицю як єдину структуру n × m, і доступ до елементів відбувається через at: i at: j, що виключає необхідність створювати масив масивів. Спочатку відкриваємо потік для читання файлу і зчитуємо розміри матриці. Потім створюємо об’єкт Matrix відповідного розміру і заповнюємо його числами з файлу. Далі, перебираючи рядки та стовпці, за допомогою вкладених inject визначаємо максимальні значення для кожного рядка та загальний максимум матриці. Результат повертається як вихідний максимум. Такий підхід дозволяє робити код більш структурованим і компактним, позбавляє зайвих проміжних масивів і робить роботу з матрицею наочнішою.\r======================================================"\r\r"------ АДРЕСНА КНИГА\r Приклад створення і використання адресної книги, описаний у одній з лекцій. \r Пригадуєте, спочатку оголошуємо глобальну змінну, що міститиме впорядковану \r колекцію масивів з трьох рядків. Спосіб порівняння описує бінарний блок."\r\r    Smalltalk globals at: #AddressBook\r              put:(SortedCollection sortBlock:[:a :b | (a at:1)<=(b at:1)]).\r\r" * --- Тепер до книги можна додавати записи. "\r\r    AddressBook\r            add: #(\'Ruth\' \'Babe\' \'456 Mudville Flats\');\r            add: #(\'Smith\' \'John\' \'12/5 Park Ave\');\r            add: #(\'Jexon\' \'John\' \'5 Baverli Hills\');\r            add: #(\'Adams\' \'John\' \'1 Hell str\');\r            add: #(\'Taylor\' \'Babe\' \'2a/35 Deribas str\');\r            add: #(\'Greg\' \'Voss\' \'12345 the USA\').\r\r" * --- Додайте власні записи. Видрукуйте вміст книги (код запропоновано нижче).  "\r\r   | s w |  s := WriteStream on: String new.\r    AddressBook do:[:x | x do:\r        [ :y | s nextPutAll: y; tab; tab.].\r        s cr. ].\r  w := Workspace openLabel: \'My Address Book\'.\r  w contents: s contents.\r\r" * ----  Наступне завдання - надрукувати список прізвищ людей з однаковими іменами. \r              Приклад демонструє різні способи перебору та перетворення колекцій."\r\r | firstNames duplicates |\r    firstNames:=Bag new.        "утворимо торбу імен"\r    AddressBook do: [ :entry | firstNames add: (entry at: 2) ].\r        "виберемо ті імена, які зустрічаються більше одного разу"\r    duplicates:=firstNames select:\r        [ :name | (firstNames occurrencesOf: name)>1 ].\r            "і впорядкуємо їх"\r    duplicates:=duplicates asSet asSortedCollection.\r        "друкуємо імена та відповідні їм прізвища"\r    duplicates do: [ :first | first printOn: Transcript. Transcript show:\'==>\'.\r        AddressBook do: [ :entry | (entry at: 2)=first\r            ifTrue: [ Transcript show:\' \'. (entry at: 1) printOn: Transcript ] ].\r        Transcript cr ]. Transcript show:\' \'.\r\r"Поясніть перетворення, що відбуваються в цьому фрагменті. \r   Запропонуйте власні варіанти використання та перетворення колекцій. \r   Оформіть запропоновані вище фрагменти як методи навчального класу."\r\r\r"------ ДОДАВАННЯ АДРЕС\r  Можливо, додавання записів до AddressBook за допомогою явного програмування \r  виглядає не надто привабливо. Використайте з цією метою діалоги "\r\r| a b c | \ra := UIManager default request: \'Input first name\'.\rb := UIManager default request: \'Input second name\'.\rc := UIManager default request: \'Input address\'.\ra isNil | b isNil | c isNil ifFalse: [ AddressBook add: (Array with:a with:b with:c)].\r\r"Додайте до книги декілька нових записів, знову видрукуйте її. "\r                                    \r" Поміркуйте, як зробити зручнішим звертання до діалогу додавання адрес та друку адресної книги. "\r\r\r"Що станеться, якщо виконати наступний код? Випробуйте. "\r    Smalltalk globals removeKey:#AddressBook.\r\r"Видалиться ключ #AddressBook."\r\r "------ ПЕРЕТВОРЕННЯ (ПЕРЕВТІЛЕННЯ) ОБ\'ЄКТІВ\r   Виконайте за допомогою Do It. "\r\r | a b c|\r    a := OrderedCollection new.\r    b := Cylinder  new.\r    c := Array with: a with: b with: b.\r    Transcript show: \'Old Array is = \'.\r    c do: [ :x | Transcript show: \'     \'. x printOn: Transcript ].\r    Transcript cr.\r    a become: b.\r    Transcript show: \'New Array is = \'.\r    c do: [ :x | Transcript show: \'     \'. x printOn: Transcript ].\r    Transcript cr; show:\' \'. "Unknown variable"\r" Поясніть дію методу become:. Чи можна замість нього користуватися звичайним присвоєнням? Наведіть власні приклади. "\r\r" Він міняє всі посилання на два об’єкти місцями у всій системі.  \r  Не можна замість become використовувати звичайне присвоєння, адже такого ефекту не можливо буде досягнути."\r\r\r\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-10-05T22:06:09.411+03:00' ],
		#self : OmReference [ '2' ]
	},
	#content : '"--------------------------------------------------------------------------------------\r*                      ЛАБОРОТОРНА РОБОТА 3\r*                 Тема: КЛАСИ ТА МЕТОДИ. КОЛЕКЦІЇ\r*\r*  Завдання до лабораторної роботи:\r*     1. Виконайте наведені нижче приклади, збережіть і поясніть отримані результати.\r*     2. Випробуйте різноманітні способи додавання нових класів до системи.\r*     3. Навчіться доповнювати функціональність класів.\r*     4. Випробуйте методи опрацювання колекцій.\r*\r\r    Виконайте за допомогою <Print it> \r\r ------ ПРИНАЛЕЖНІСТЬ КЛАСОВІ, ІЄРАРХІЯ КЛАСІВ\r"\r    #(Francesca Jackie Marisa Bree) class. "Array"\r    (#(Francesca Jackie Marisa Bree) at:2) class. "ByteSymbol"\r    \'Rakesh Vijay Charles Daniel Tyler\' class. "ByteString"\r    (\'Rakesh Vijay Charles Daniel Tyler\' at:2) class. "Character (a)"\r    World class . "WorldMorph"\r    Magnitude class. "Magnitude class"\r    Magnitude class class. "Metaclass"\r    nil class. "UndefinedObject"\r    5 species. "SmallInteger"\r    123456789000 species. "SmallInteger"\r    #aName species. "ByteString"\r " Яка різниця між повідомленнями class i species ? \r\r    Випробуйте різні способи відкривання браузера класів: за допомогою меню чи програмно \r     Виконайте за допомогою <Do it>\r"\r    ClyFullBrowserMorph open. \r    ClyFullBrowserMorph openOnClass: Date. \r    ClyFullBrowserMorph openOnClass: VolumeShape  selector:  #volume. \r\r" ------ МЕТОДИ КЛАСУ, КОНСТРУКТОРИ\r  Виконайте за допомогою <Print It>. Запропонуйте власні приклади. "\r\r    Array new: 10. "#(nil nil nil nil nil nil nil nil nil nil)"        \r    OrderedCollection  new. "an OrderedCollection()"\r    Date today. "29 September 2025"\r    Time now. "10:28:52.422 am"\r    UIManager default  request:\'How are you?\' initialAnswer:\'I\'\'m fine!\'. "\'I\'\'m fine!\'"\r    Integer readFrom: \'2013  1925\'. "2013"\r    Integer primesUpTo: 100. "#(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97)"\r    Rectangle origin:0@0 corner:200@100. "(0@0) corner: (200@100)"\r    Date nameOfMonth:12. "#December"\r    Date dayOfWeek: #Friday. "6"\r    Date orthodoxEasterDateFor: 2022. "24 April 2022"\r\r\r   \r"Інсталюйте вказані нижче МЕТОДИ КЛАСУ Date:\r  перенесіть копію тексту визначення методу з робочого вікна в браузер класів.\r\r""!Date class methodsFor: \'specific inquiries\' stamp: \'CamilloBruni 8/22/2013 19:47\'!""\r\rorthodoxEasterDateFor: year\r ""  compute the easter date according to the rules of the orthodox calendar.\r    source:       http://www.smart.net/~mmontes/ortheast.html   ""\r     | r1 r2 r3 r4 ra rb r5 rc date |\r\r    r1 := year \\\\ 19.\r    r2 := year \\\\ 4.\r    r3 := year \\\\ 7.\r    ra := 19*r1 + 16.\r    r4 := ra \\\\ 30.\r    rb := r2 + r2 + (4*r3) + (6*r4).\r    r5 := rb \\\\ 7.\r    rc := r4 + r5.\r    date := self year: year month: 4 day: 3.\r    ^date addDays: rc.\r""--------------------------------------------------------------------------------------""\r""!Date class methodsFor: \'specific inquiries\' stamp: \'CamilloBruni 8/22/2013 19:48\'!""\r\reasterDateFor: year\r ""  compute the easter date.\r    source: Physikalisch-Technische Bundesanstalt Braunschweig.\r    Lichtenberg, H.: Zur Interpretation der Gaussschen Osterformel und ihrer Ausnahmeregeln, Historia Mathematica 24 (1997), pp. 441-444\r      http://www.ptb.de/de/org/4/44/441/oste.htm  ""\r\r  | k m s a d r og sz oe day |\r\r  k := year // 100.\r  m := 15 + (3*k + 3//4) - (8*k + 13//25).\r   s := 2 - (3*k + 3// 4).\r  a := year \\\\ 19.\r  d := 19*a + m \\\\ 30.\r  r := d//29 + ((d//28) - (d//29)* (a// 11)).\r\r  og := 21 + d - r.\r  sz := 7 - (year//4 + year + s\\\\7).\r  oe := 7 - (og - sz\\\\7).\r  day := og + oe.\r  ^day <= 31\r    ifTrue: [ Date year: year month: 3 day: day ]\r    ifFalse: [ Date year: year month: 4 day: day - 31 ].\r"\r\r"Знайдіть роки, коли святкування припадають на один день."\r\ryearsWithMatchingEasterFrom: startYear to: endYear\r\r    | matchingYears orthodoxDate catholicDate |\r    matchingYears := OrderedCollection new.\r    (startYear to: endYear) do: [:year |\r        orthodoxDate := self orthodoxEasterDateFor: year.\r        catholicDate := self easterDateFor: year.\r        (orthodoxDate = catholicDate) ifTrue: [\r            matchingYears add: year\r        ].\r    ].\r    ^matchingYears asArray\r\rDate yearsWithMatchingEasterFrom: 2000 to: 2050. "#(2001 2004 2007 2010 2011 2014 2017 2025 2028 2031 2034 2037 2038 2041 2045 2048)"\r\r" ------ РЕКУРСІЯ\r  Додайте до класу Integer і випробуйте різні методи обчислення чисел  Фібоначчі.\r  Запропонуйте власні. Порівняйте їхню ефективність.      \r  Перед випробуванням fibonacci ЗБЕРЕЖІТЬ ІМІДЖ СИСТЕМИ! Він може зайняти Ваш комп на тиждень.  "\r\r" * ------- "\rfibonacci\r        "Answer the nth fibonacci number, where n is the receiver."\r    ^self < 2\r        ifTrue: [1]\r        ifFalse:[(self - 1) fibonacci + (self - 2) fibonacci]\r" * ------- "\rfibo\r        "Frontend function to call fibStart: with: .\r         Answer the nth fibonacci number, where n is the receiver."\r    ^self fibStart:1 with:1\r" * ------- "\rfibStart: n1 with: n2\r        "Private - Calculate the n-th Fibonacci number, where\r         n is the receiver, n1 is previous Fibonacci number\r         and n2 - the preprevious one."\r ^ (self < 2)\r        ifTrue: [ n1 ]\r        ifFalse:[ (self - 1) fibStart: n1+n2 with:n1 ]\r\r3 fibStart: 1 with: 10  "12"\r4 fibo "5"\r12 fibonacci "233"\r\r\r"\r\r\r<fibStart:with:>\rЦе рекурсивний метод, який обчислює n-те число послідовності Фібоначчі, використовуючи два допоміжні параметри — n1 (попереднє значення) і n2 (передпопереднє значення). На кожному кроці рекурсії відбувається виклик:\r(self - 1) fibStart: n1 + n2 with: n1 — таким чином, наступний етап отримує нові значення, де поточне число стає сумою двох попередніх.\rТакий підхід дозволяє виконувати обчислення без повторних підрахунків уже відомих значень, тому алгоритм має лінійну складність O(n). Він працює швидко навіть для великих n і потребує мінімум пам’яті — лише для рекурсивних викликів (глибина дорівнює n).\r\r<fibo>\rЦе допоміжний метод, який просто викликає fibStart:with: із початковими значеннями. Його мета — спростити виклик функції, щоб не потрібно було вручну задавати перші два числа послідовності. Фактично, він працює так само, як і fibStart:with:, але зручніший у використанні, коли потрібно просто отримати n-те число Фібоначчі.\r\r<fibonacci>\rЦей варіант використовує класичне рекурсивне визначення:\rF(n) = F(n - 1) + F(n - 2)\rМетод простий у розумінні, але дуже неефективний для великих n, оскільки він не запам’ятовує вже обчислені значення і багаторазово виконує ті самі обчислення. Через це його складність є експоненційною — приблизно O(2ⁿ). При великих значеннях n така реалізація значно навантажує процесор і стек викликів, тому практично використовується лише для навчальних цілей або демонстрацій.\r"\r\r"------------------------------------------------------------------------------------\r ------ СТВОРЕННЯ, ОПРАЦЮВАННЯ КОЛЕКЦІЙ\r  У текстовому файлі записано інформацію про матрицю цілих чисел: розміри\r  матриці в першому рядку файла, у всіх наступних рядках - рядки матриці.}\r  Прочитати матрицю, знайти максимальні елементи кожного рядка і зберегти\r  їх у файлі. Надрукувати максимальний елемент цілої матриці."\r\r"Наведений нижче код можна виконати безпосередньо в робочому вікні,\r проте,  доцільно зробити його методом власного навчального класу."\r\r| matr fStream fName n m mMatr mLines |\r        "Вибір файла за допомогою діалогу"\r    (fName:=UIManager default\r\t\t\tchooseFullFileNameMatching: nil \r\t\t\tlabel: \'Виберіть файл з числовими даними\' ) isNil\r        ifTrue: [ ^\'Ви не вибрали файла\' ]. \r        fStream := fName asFileReference readStream.\r\t        "Введення даних"\r \t    n := Integer readFrom: fStream.  \r\t    matr := Array new: n.\r\t    m := Integer readFrom: fStream.\r\t    matr := matr collect: [ :x | Array new: m ]. \r\t    1 to: n do: [ :i |  fStream nextLine.\r \t\t     matr at: i put: (\r\t\t\t\t (matr at: i) collect: [ :x |  \r\t\t\t\t\t\tInteger readFrom: fStream. ]\r\t\t\t\t\t )\t ].\r    fStream close. matr inspect.\r        "Обчислення максимальних елементів"\r    mLines:=matr collect: [ :r | r inject: (r at: 1) into: [ :x :y | x max: y] ].\r    mMatr:=mLines at: 1.\r    mLines do: [ :x | x > mMatr ifTrue: [ mMatr := x ] ].\r        "Побудова імені файла результатів, збереження"\r    fName at: fName size - 4 put: $_ .\r    fStream := fName asFileReference writeStream.\r    mLines do: [ :x | x printOn: fStream. fStream cr ].\r    fStream close.\r    ^mMatr .  \r\r" Поясніть код, наведений вище (кожне повідомлення!):\r\r\tУ цьому коді ми працюємо з матрицею чисел, зчитаною з файлу. Спершу оголошуємо локальні змінні для зберігання самої матриці, потоку файлу, імені файлу, кількості рядків і стовпців, а також для проміжних результатів. Далі відкривається діалог для вибору файлу користувачем. Якщо файл не обрано, метод одразу повертає повідомлення про це і подальше виконання коду зупиняється.\r\rПісля цього створюється потік для читання файлу. Перше число з файлу визначає кількість рядків матриці, а друге число — кількість стовпців. У початковій версії матриця реалізується як масив масивів: спершу створюємо масив для рядків, а потім кожен рядок заповнюємо окремим масивом стовпців. Потік закривається після зчитування даних, і відкривається інспектор для перегляду структури матриці.\r\rЩоб знайти максимуми рядків, кожен рядок обробляється за допомогою методу inject, який проходить усі елементи рядка і визначає найбільше значення. Потім, перебираючи всі максимуми рядків, знаходиться загальний максимум усієї матриці. Після обробки результатів ім’я файлу змінюється для збереження результатів у новий файл, відкривається потік на запис, і кожен максимум рядка записується в файл на окремий рядок. Потім потік закривається. Нарешті, метод повертає максимальний елемент усієї матриці.\r\r   Як можна замінити масив масивів на екземпляр класу Matrix?:\r\tЯкщо використовувати клас Matrix, код можна зробити більш компактним і зручним. Клас Matrix зберігає матрицю як єдину структуру n × m, і доступ до елементів відбувається через at: i at: j, що виключає необхідність створювати масив масивів. Спочатку відкриваємо потік для читання файлу і зчитуємо розміри матриці. Потім створюємо об’єкт Matrix відповідного розміру і заповнюємо його числами з файлу. Далі, перебираючи рядки та стовпці, за допомогою вкладених inject визначаємо максимальні значення для кожного рядка та загальний максимум матриці. Результат повертається як вихідний максимум. Такий підхід дозволяє робити код більш структурованим і компактним, позбавляє зайвих проміжних масивів і робить роботу з матрицею наочнішою.\r======================================================"\r\r"------ АДРЕСНА КНИГА\r Приклад створення і використання адресної книги, описаний у одній з лекцій. \r Пригадуєте, спочатку оголошуємо глобальну змінну, що міститиме впорядковану \r колекцію масивів з трьох рядків. Спосіб порівняння описує бінарний блок."\r\r    Smalltalk globals at: #AddressBook\r              put:(SortedCollection sortBlock:[:a :b | (a at:1)<=(b at:1)]).\r\r" * --- Тепер до книги можна додавати записи. "\r\r    AddressBook\r            add: #(\'Ruth\' \'Babe\' \'456 Mudville Flats\');\r            add: #(\'Smith\' \'John\' \'12/5 Park Ave\');\r            add: #(\'Jexon\' \'John\' \'5 Baverli Hills\');\r            add: #(\'Adams\' \'John\' \'1 Hell str\');\r            add: #(\'Taylor\' \'Babe\' \'2a/35 Deribas str\');\r            add: #(\'Greg\' \'Voss\' \'12345 the USA\').\r\r" * --- Додайте власні записи. Видрукуйте вміст книги (код запропоновано нижче).  "\rAddressBook\r    add: #(\'Ivanov\' \'Oleh\' \'Kyiv, Main Str 25\');\r    add: #(\'Koval\' \'Bohdan\' \'Lviv, Freedom Ave 12\');\r    add: #(\'Shevchenko\' \'Oleh\' \'Kharkiv, Central Park 3\');\r    add: #(\'Petrenko\' \'Oleh\' \'Odesa, Sea St 8\').\r\r\r   | s w |  s := WriteStream on: String new.\r    AddressBook do:[:x | x do:\r        [ :y | s nextPutAll: y; tab; tab.].\r        s cr. ].\r  w := Workspace openLabel: \'My Address Book\'.\r  w contents: s contents.\r\r" * ----  Наступне завдання - надрукувати список прізвищ людей з однаковими іменами. \r              Приклад демонструє різні способи перебору та перетворення колекцій."\r\r | firstNames duplicates |\r    firstNames:=Bag new.        "утворимо торбу імен"\r    AddressBook do: [ :entry | firstNames add: (entry at: 2) ].\r        "виберемо ті імена, які зустрічаються більше одного разу"\r    duplicates:=firstNames select:\r        [ :name | (firstNames occurrencesOf: name)>1 ].\r            "і впорядкуємо їх"\r    duplicates:=duplicates asSet asSortedCollection.\r        "друкуємо імена та відповідні їм прізвища"\r    duplicates do: [ :first | first printOn: Transcript. Transcript show:\'==>\'.\r        AddressBook do: [ :entry | (entry at: 2)=first\r            ifTrue: [ Transcript show:\' \'. (entry at: 1) printOn: Transcript ] ].\r        Transcript cr ]. Transcript show:\' \'.\r\r"Поясніть перетворення, що відбуваються в цьому фрагменті. \r   Запропонуйте власні варіанти використання та перетворення колекцій. \r   Оформіть запропоновані вище фрагменти як методи навчального класу."\r\r\r"------ ДОДАВАННЯ АДРЕС\r  Можливо, додавання записів до AddressBook за допомогою явного програмування \r  виглядає не надто привабливо. Використайте з цією метою діалоги "\r\r| a b c | \ra := UIManager default request: \'Input first name\'.\rb := UIManager default request: \'Input second name\'.\rc := UIManager default request: \'Input address\'.\ra isNil | b isNil | c isNil ifFalse: [ AddressBook add: (Array with:a with:b with:c)].\r\r"Додайте до книги декілька нових записів, знову видрукуйте її. "\r                                    \r" Поміркуйте, як зробити зручнішим звертання до діалогу додавання адрес та друку адресної книги. "\r\r\r"Що станеться, якщо виконати наступний код? Випробуйте. "\r    Smalltalk globals removeKey:#AddressBook.\r\r"Видалиться ключ #AddressBook."\r\r "------ ПЕРЕТВОРЕННЯ (ПЕРЕВТІЛЕННЯ) ОБ\'ЄКТІВ\r   Виконайте за допомогою Do It. "\r\r | a b c|\r    a := OrderedCollection new.\r    b := Cylinder  new.\r    c := Array with: a with: b with: b.\r    Transcript show: \'Old Array is = \'.\r    c do: [ :x | Transcript show: \'     \'. x printOn: Transcript ].\r    Transcript cr.\r    a become: b.\r    Transcript show: \'New Array is = \'.\r    c do: [ :x | Transcript show: \'     \'. x printOn: Transcript ].\r    Transcript cr; show:\' \'. "Unknown variable"\r" Поясніть дію методу become:. Чи можна замість нього користуватися звичайним присвоєнням? Наведіть власні приклади. "\r\r" Він міняє всі посилання на два об’єкти місцями у всій системі.  \r  Не можна замість become використовувати звичайне присвоєння, адже такого ефекту не можливо буде досягнути."\r\r\r\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-10-05T22:06:36.461+03:00' ],
		#self : OmReference [ '3' ]
	},
	#content : '"--------------------------------------------------------------------------------------\r*                      ЛАБОРОТОРНА РОБОТА 3\r*                 Тема: КЛАСИ ТА МЕТОДИ. КОЛЕКЦІЇ\r*\r*  Завдання до лабораторної роботи:\r*     1. Виконайте наведені нижче приклади, збережіть і поясніть отримані результати.\r*     2. Випробуйте різноманітні способи додавання нових класів до системи.\r*     3. Навчіться доповнювати функціональність класів.\r*     4. Випробуйте методи опрацювання колекцій.\r*\r\r    Виконайте за допомогою <Print it> \r\r ------ ПРИНАЛЕЖНІСТЬ КЛАСОВІ, ІЄРАРХІЯ КЛАСІВ\r"\r    #(Francesca Jackie Marisa Bree) class. "Array"\r    (#(Francesca Jackie Marisa Bree) at:2) class. "ByteSymbol"\r    \'Rakesh Vijay Charles Daniel Tyler\' class. "ByteString"\r    (\'Rakesh Vijay Charles Daniel Tyler\' at:2) class. "Character (a)"\r    World class . "WorldMorph"\r    Magnitude class. "Magnitude class"\r    Magnitude class class. "Metaclass"\r    nil class. "UndefinedObject"\r    5 species. "SmallInteger"\r    123456789000 species. "SmallInteger"\r    #aName species. "ByteString"\r " Яка різниця між повідомленнями class i species ? \r\r    Випробуйте різні способи відкривання браузера класів: за допомогою меню чи програмно \r     Виконайте за допомогою <Do it>\r"\r    ClyFullBrowserMorph open. \r    ClyFullBrowserMorph openOnClass: Date. \r    ClyFullBrowserMorph openOnClass: VolumeShape  selector:  #volume. \r\r" ------ МЕТОДИ КЛАСУ, КОНСТРУКТОРИ\r  Виконайте за допомогою <Print It>. Запропонуйте власні приклади. "\r\r    Array new: 10. "#(nil nil nil nil nil nil nil nil nil nil)"        \r    OrderedCollection  new. "an OrderedCollection()"\r    Date today. "29 September 2025"\r    Time now. "10:28:52.422 am"\r    UIManager default  request:\'How are you?\' initialAnswer:\'I\'\'m fine!\'. "\'I\'\'m fine!\'"\r    Integer readFrom: \'2013  1925\'. "2013"\r    Integer primesUpTo: 100. "#(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97)"\r    Rectangle origin:0@0 corner:200@100. "(0@0) corner: (200@100)"\r    Date nameOfMonth:12. "#December"\r    Date dayOfWeek: #Friday. "6"\r    Date orthodoxEasterDateFor: 2022. "24 April 2022"\r\r\r   \r"Інсталюйте вказані нижче МЕТОДИ КЛАСУ Date:\r  перенесіть копію тексту визначення методу з робочого вікна в браузер класів.\r\r""!Date class methodsFor: \'specific inquiries\' stamp: \'CamilloBruni 8/22/2013 19:47\'!""\r\rorthodoxEasterDateFor: year\r ""  compute the easter date according to the rules of the orthodox calendar.\r    source:       http://www.smart.net/~mmontes/ortheast.html   ""\r     | r1 r2 r3 r4 ra rb r5 rc date |\r\r    r1 := year \\\\ 19.\r    r2 := year \\\\ 4.\r    r3 := year \\\\ 7.\r    ra := 19*r1 + 16.\r    r4 := ra \\\\ 30.\r    rb := r2 + r2 + (4*r3) + (6*r4).\r    r5 := rb \\\\ 7.\r    rc := r4 + r5.\r    date := self year: year month: 4 day: 3.\r    ^date addDays: rc.\r""--------------------------------------------------------------------------------------""\r""!Date class methodsFor: \'specific inquiries\' stamp: \'CamilloBruni 8/22/2013 19:48\'!""\r\reasterDateFor: year\r ""  compute the easter date.\r    source: Physikalisch-Technische Bundesanstalt Braunschweig.\r    Lichtenberg, H.: Zur Interpretation der Gaussschen Osterformel und ihrer Ausnahmeregeln, Historia Mathematica 24 (1997), pp. 441-444\r      http://www.ptb.de/de/org/4/44/441/oste.htm  ""\r\r  | k m s a d r og sz oe day |\r\r  k := year // 100.\r  m := 15 + (3*k + 3//4) - (8*k + 13//25).\r   s := 2 - (3*k + 3// 4).\r  a := year \\\\ 19.\r  d := 19*a + m \\\\ 30.\r  r := d//29 + ((d//28) - (d//29)* (a// 11)).\r\r  og := 21 + d - r.\r  sz := 7 - (year//4 + year + s\\\\7).\r  oe := 7 - (og - sz\\\\7).\r  day := og + oe.\r  ^day <= 31\r    ifTrue: [ Date year: year month: 3 day: day ]\r    ifFalse: [ Date year: year month: 4 day: day - 31 ].\r"\r\r"Знайдіть роки, коли святкування припадають на один день."\r\ryearsWithMatchingEasterFrom: startYear to: endYear\r\r    | matchingYears orthodoxDate catholicDate |\r    matchingYears := OrderedCollection new.\r    (startYear to: endYear) do: [:year |\r        orthodoxDate := self orthodoxEasterDateFor: year.\r        catholicDate := self easterDateFor: year.\r        (orthodoxDate = catholicDate) ifTrue: [\r            matchingYears add: year\r        ].\r    ].\r    ^matchingYears asArray\r\rDate yearsWithMatchingEasterFrom: 2000 to: 2050. "#(2001 2004 2007 2010 2011 2014 2017 2025 2028 2031 2034 2037 2038 2041 2045 2048)"\r\r" ------ РЕКУРСІЯ\r  Додайте до класу Integer і випробуйте різні методи обчислення чисел  Фібоначчі.\r  Запропонуйте власні. Порівняйте їхню ефективність.      \r  Перед випробуванням fibonacci ЗБЕРЕЖІТЬ ІМІДЖ СИСТЕМИ! Він може зайняти Ваш комп на тиждень.  "\r\r" * ------- "\rfibonacci\r        "Answer the nth fibonacci number, where n is the receiver."\r    ^self < 2\r        ifTrue: [1]\r        ifFalse:[(self - 1) fibonacci + (self - 2) fibonacci]\r" * ------- "\rfibo\r        "Frontend function to call fibStart: with: .\r         Answer the nth fibonacci number, where n is the receiver."\r    ^self fibStart:1 with:1\r" * ------- "\rfibStart: n1 with: n2\r        "Private - Calculate the n-th Fibonacci number, where\r         n is the receiver, n1 is previous Fibonacci number\r         and n2 - the preprevious one."\r ^ (self < 2)\r        ifTrue: [ n1 ]\r        ifFalse:[ (self - 1) fibStart: n1+n2 with:n1 ]\r\r3 fibStart: 1 with: 10  "12"\r4 fibo "5"\r12 fibonacci "233"\r\r\r"\r\r\r<fibStart:with:>\rЦе рекурсивний метод, який обчислює n-те число послідовності Фібоначчі, використовуючи два допоміжні параметри — n1 (попереднє значення) і n2 (передпопереднє значення). На кожному кроці рекурсії відбувається виклик:\r(self - 1) fibStart: n1 + n2 with: n1 — таким чином, наступний етап отримує нові значення, де поточне число стає сумою двох попередніх.\rТакий підхід дозволяє виконувати обчислення без повторних підрахунків уже відомих значень, тому алгоритм має лінійну складність O(n). Він працює швидко навіть для великих n і потребує мінімум пам’яті — лише для рекурсивних викликів (глибина дорівнює n).\r\r<fibo>\rЦе допоміжний метод, який просто викликає fibStart:with: із початковими значеннями. Його мета — спростити виклик функції, щоб не потрібно було вручну задавати перші два числа послідовності. Фактично, він працює так само, як і fibStart:with:, але зручніший у використанні, коли потрібно просто отримати n-те число Фібоначчі.\r\r<fibonacci>\rЦей варіант використовує класичне рекурсивне визначення:\rF(n) = F(n - 1) + F(n - 2)\rМетод простий у розумінні, але дуже неефективний для великих n, оскільки він не запам’ятовує вже обчислені значення і багаторазово виконує ті самі обчислення. Через це його складність є експоненційною — приблизно O(2ⁿ). При великих значеннях n така реалізація значно навантажує процесор і стек викликів, тому практично використовується лише для навчальних цілей або демонстрацій.\r"\r\r"------------------------------------------------------------------------------------\r ------ СТВОРЕННЯ, ОПРАЦЮВАННЯ КОЛЕКЦІЙ\r  У текстовому файлі записано інформацію про матрицю цілих чисел: розміри\r  матриці в першому рядку файла, у всіх наступних рядках - рядки матриці.}\r  Прочитати матрицю, знайти максимальні елементи кожного рядка і зберегти\r  їх у файлі. Надрукувати максимальний елемент цілої матриці."\r\r"Наведений нижче код можна виконати безпосередньо в робочому вікні,\r проте,  доцільно зробити його методом власного навчального класу."\r\r| matr fStream fName n m mMatr mLines |\r        "Вибір файла за допомогою діалогу"\r    (fName:=UIManager default\r\t\t\tchooseFullFileNameMatching: nil \r\t\t\tlabel: \'Виберіть файл з числовими даними\' ) isNil\r        ifTrue: [ ^\'Ви не вибрали файла\' ]. \r        fStream := fName asFileReference readStream.\r\t        "Введення даних"\r \t    n := Integer readFrom: fStream.  \r\t    matr := Array new: n.\r\t    m := Integer readFrom: fStream.\r\t    matr := matr collect: [ :x | Array new: m ]. \r\t    1 to: n do: [ :i |  fStream nextLine.\r \t\t     matr at: i put: (\r\t\t\t\t (matr at: i) collect: [ :x |  \r\t\t\t\t\t\tInteger readFrom: fStream. ]\r\t\t\t\t\t )\t ].\r    fStream close. matr inspect.\r        "Обчислення максимальних елементів"\r    mLines:=matr collect: [ :r | r inject: (r at: 1) into: [ :x :y | x max: y] ].\r    mMatr:=mLines at: 1.\r    mLines do: [ :x | x > mMatr ifTrue: [ mMatr := x ] ].\r        "Побудова імені файла результатів, збереження"\r    fName at: fName size - 4 put: $_ .\r    fStream := fName asFileReference writeStream.\r    mLines do: [ :x | x printOn: fStream. fStream cr ].\r    fStream close.\r    ^mMatr .  \r\r" Поясніть код, наведений вище (кожне повідомлення!):\r\r\tУ цьому коді ми працюємо з матрицею чисел, зчитаною з файлу. Спершу оголошуємо локальні змінні для зберігання самої матриці, потоку файлу, імені файлу, кількості рядків і стовпців, а також для проміжних результатів. Далі відкривається діалог для вибору файлу користувачем. Якщо файл не обрано, метод одразу повертає повідомлення про це і подальше виконання коду зупиняється.\r\rПісля цього створюється потік для читання файлу. Перше число з файлу визначає кількість рядків матриці, а друге число — кількість стовпців. У початковій версії матриця реалізується як масив масивів: спершу створюємо масив для рядків, а потім кожен рядок заповнюємо окремим масивом стовпців. Потік закривається після зчитування даних, і відкривається інспектор для перегляду структури матриці.\r\rЩоб знайти максимуми рядків, кожен рядок обробляється за допомогою методу inject, який проходить усі елементи рядка і визначає найбільше значення. Потім, перебираючи всі максимуми рядків, знаходиться загальний максимум усієї матриці. Після обробки результатів ім’я файлу змінюється для збереження результатів у новий файл, відкривається потік на запис, і кожен максимум рядка записується в файл на окремий рядок. Потім потік закривається. Нарешті, метод повертає максимальний елемент усієї матриці.\r\r   Як можна замінити масив масивів на екземпляр класу Matrix?:\r\tЯкщо використовувати клас Matrix, код можна зробити більш компактним і зручним. Клас Matrix зберігає матрицю як єдину структуру n × m, і доступ до елементів відбувається через at: i at: j, що виключає необхідність створювати масив масивів. Спочатку відкриваємо потік для читання файлу і зчитуємо розміри матриці. Потім створюємо об’єкт Matrix відповідного розміру і заповнюємо його числами з файлу. Далі, перебираючи рядки та стовпці, за допомогою вкладених inject визначаємо максимальні значення для кожного рядка та загальний максимум матриці. Результат повертається як вихідний максимум. Такий підхід дозволяє робити код більш структурованим і компактним, позбавляє зайвих проміжних масивів і робить роботу з матрицею наочнішою.\r======================================================"\r\r"------ АДРЕСНА КНИГА\r Приклад створення і використання адресної книги, описаний у одній з лекцій. \r Пригадуєте, спочатку оголошуємо глобальну змінну, що міститиме впорядковану \r колекцію масивів з трьох рядків. Спосіб порівняння описує бінарний блок."\r\r    Smalltalk globals at: #AddressBook\r              put:(SortedCollection sortBlock:[:a :b | (a at:1)<=(b at:1)]).\r\r" * --- Тепер до книги можна додавати записи. "\r\r    AddressBook\r            add: #(\'Ruth\' \'Babe\' \'456 Mudville Flats\');\r            add: #(\'Smith\' \'John\' \'12/5 Park Ave\');\r            add: #(\'Jexon\' \'John\' \'5 Baverli Hills\');\r            add: #(\'Adams\' \'John\' \'1 Hell str\');\r            add: #(\'Taylor\' \'Babe\' \'2a/35 Deribas str\');\r            add: #(\'Greg\' \'Voss\' \'12345 the USA\').\r\r           add: #(\'Ivanov\' \'Oleh\' \'Kyiv, Main Str 25\');\r           add: #(\'Koval\' \'Bohdan\' \'Lviv, Freedom Ave 12\');\r           add: #(\'Shevchenko\' \'Oleh\' \'Kharkiv, Central Park 3\');\r           add: #(\'Petrenko\' \'Oleh\' \'Odesa, Sea St 8\').\r\r" * --- Додайте власні записи. Видрукуйте вміст книги (код запропоновано нижче).  "\r\r\r\r   | s w |  s := WriteStream on: String new.\r    AddressBook do:[:x | x do:\r        [ :y | s nextPutAll: y; tab; tab.].\r        s cr. ].\r  w := Workspace openLabel: \'My Address Book\'.\r  w contents: s contents.\r\r" * ----  Наступне завдання - надрукувати список прізвищ людей з однаковими іменами. \r              Приклад демонструє різні способи перебору та перетворення колекцій."\r\r | firstNames duplicates |\r    firstNames:=Bag new.        "утворимо торбу імен"\r    AddressBook do: [ :entry | firstNames add: (entry at: 2) ].\r        "виберемо ті імена, які зустрічаються більше одного разу"\r    duplicates:=firstNames select:\r        [ :name | (firstNames occurrencesOf: name)>1 ].\r            "і впорядкуємо їх"\r    duplicates:=duplicates asSet asSortedCollection.\r        "друкуємо імена та відповідні їм прізвища"\r    duplicates do: [ :first | first printOn: Transcript. Transcript show:\'==>\'.\r        AddressBook do: [ :entry | (entry at: 2)=first\r            ifTrue: [ Transcript show:\' \'. (entry at: 1) printOn: Transcript ] ].\r        Transcript cr ]. Transcript show:\' \'.\r\r"Поясніть перетворення, що відбуваються в цьому фрагменті. \r   Запропонуйте власні варіанти використання та перетворення колекцій. \r   Оформіть запропоновані вище фрагменти як методи навчального класу."\r\r\r"------ ДОДАВАННЯ АДРЕС\r  Можливо, додавання записів до AddressBook за допомогою явного програмування \r  виглядає не надто привабливо. Використайте з цією метою діалоги "\r\r| a b c | \ra := UIManager default request: \'Input first name\'.\rb := UIManager default request: \'Input second name\'.\rc := UIManager default request: \'Input address\'.\ra isNil | b isNil | c isNil ifFalse: [ AddressBook add: (Array with:a with:b with:c)].\r\r"Додайте до книги декілька нових записів, знову видрукуйте її. "\r                                    \r" Поміркуйте, як зробити зручнішим звертання до діалогу додавання адрес та друку адресної книги. "\r\r\r"Що станеться, якщо виконати наступний код? Випробуйте. "\r    Smalltalk globals removeKey:#AddressBook.\r\r"Видалиться ключ #AddressBook."\r\r "------ ПЕРЕТВОРЕННЯ (ПЕРЕВТІЛЕННЯ) ОБ\'ЄКТІВ\r   Виконайте за допомогою Do It. "\r\r | a b c|\r    a := OrderedCollection new.\r    b := Cylinder  new.\r    c := Array with: a with: b with: b.\r    Transcript show: \'Old Array is = \'.\r    c do: [ :x | Transcript show: \'     \'. x printOn: Transcript ].\r    Transcript cr.\r    a become: b.\r    Transcript show: \'New Array is = \'.\r    c do: [ :x | Transcript show: \'     \'. x printOn: Transcript ].\r    Transcript cr; show:\' \'. "Unknown variable"\r" Поясніть дію методу become:. Чи можна замість нього користуватися звичайним присвоєнням? Наведіть власні приклади. "\r\r" Він міняє всі посилання на два об’єкти місцями у всій системі.  \r  Не можна замість become використовувати звичайне присвоєння, адже такого ефекту не можливо буде досягнути."\r\r\r\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-10-05T22:06:53.479+03:00' ],
		#self : OmReference [ '4' ]
	},
	#content : '"--------------------------------------------------------------------------------------\r*                      ЛАБОРОТОРНА РОБОТА 3\r*                 Тема: КЛАСИ ТА МЕТОДИ. КОЛЕКЦІЇ\r*\r*  Завдання до лабораторної роботи:\r*     1. Виконайте наведені нижче приклади, збережіть і поясніть отримані результати.\r*     2. Випробуйте різноманітні способи додавання нових класів до системи.\r*     3. Навчіться доповнювати функціональність класів.\r*     4. Випробуйте методи опрацювання колекцій.\r*\r\r    Виконайте за допомогою <Print it> \r\r ------ ПРИНАЛЕЖНІСТЬ КЛАСОВІ, ІЄРАРХІЯ КЛАСІВ\r"\r    #(Francesca Jackie Marisa Bree) class. "Array"\r    (#(Francesca Jackie Marisa Bree) at:2) class. "ByteSymbol"\r    \'Rakesh Vijay Charles Daniel Tyler\' class. "ByteString"\r    (\'Rakesh Vijay Charles Daniel Tyler\' at:2) class. "Character (a)"\r    World class . "WorldMorph"\r    Magnitude class. "Magnitude class"\r    Magnitude class class. "Metaclass"\r    nil class. "UndefinedObject"\r    5 species. "SmallInteger"\r    123456789000 species. "SmallInteger"\r    #aName species. "ByteString"\r " Яка різниця між повідомленнями class i species ? \r\r    Випробуйте різні способи відкривання браузера класів: за допомогою меню чи програмно \r     Виконайте за допомогою <Do it>\r"\r    ClyFullBrowserMorph open. \r    ClyFullBrowserMorph openOnClass: Date. \r    ClyFullBrowserMorph openOnClass: VolumeShape  selector:  #volume. \r\r" ------ МЕТОДИ КЛАСУ, КОНСТРУКТОРИ\r  Виконайте за допомогою <Print It>. Запропонуйте власні приклади. "\r\r    Array new: 10. "#(nil nil nil nil nil nil nil nil nil nil)"        \r    OrderedCollection  new. "an OrderedCollection()"\r    Date today. "29 September 2025"\r    Time now. "10:28:52.422 am"\r    UIManager default  request:\'How are you?\' initialAnswer:\'I\'\'m fine!\'. "\'I\'\'m fine!\'"\r    Integer readFrom: \'2013  1925\'. "2013"\r    Integer primesUpTo: 100. "#(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97)"\r    Rectangle origin:0@0 corner:200@100. "(0@0) corner: (200@100)"\r    Date nameOfMonth:12. "#December"\r    Date dayOfWeek: #Friday. "6"\r    Date orthodoxEasterDateFor: 2022. "24 April 2022"\r\r\r   \r"Інсталюйте вказані нижче МЕТОДИ КЛАСУ Date:\r  перенесіть копію тексту визначення методу з робочого вікна в браузер класів.\r\r""!Date class methodsFor: \'specific inquiries\' stamp: \'CamilloBruni 8/22/2013 19:47\'!""\r\rorthodoxEasterDateFor: year\r ""  compute the easter date according to the rules of the orthodox calendar.\r    source:       http://www.smart.net/~mmontes/ortheast.html   ""\r     | r1 r2 r3 r4 ra rb r5 rc date |\r\r    r1 := year \\\\ 19.\r    r2 := year \\\\ 4.\r    r3 := year \\\\ 7.\r    ra := 19*r1 + 16.\r    r4 := ra \\\\ 30.\r    rb := r2 + r2 + (4*r3) + (6*r4).\r    r5 := rb \\\\ 7.\r    rc := r4 + r5.\r    date := self year: year month: 4 day: 3.\r    ^date addDays: rc.\r""--------------------------------------------------------------------------------------""\r""!Date class methodsFor: \'specific inquiries\' stamp: \'CamilloBruni 8/22/2013 19:48\'!""\r\reasterDateFor: year\r ""  compute the easter date.\r    source: Physikalisch-Technische Bundesanstalt Braunschweig.\r    Lichtenberg, H.: Zur Interpretation der Gaussschen Osterformel und ihrer Ausnahmeregeln, Historia Mathematica 24 (1997), pp. 441-444\r      http://www.ptb.de/de/org/4/44/441/oste.htm  ""\r\r  | k m s a d r og sz oe day |\r\r  k := year // 100.\r  m := 15 + (3*k + 3//4) - (8*k + 13//25).\r   s := 2 - (3*k + 3// 4).\r  a := year \\\\ 19.\r  d := 19*a + m \\\\ 30.\r  r := d//29 + ((d//28) - (d//29)* (a// 11)).\r\r  og := 21 + d - r.\r  sz := 7 - (year//4 + year + s\\\\7).\r  oe := 7 - (og - sz\\\\7).\r  day := og + oe.\r  ^day <= 31\r    ifTrue: [ Date year: year month: 3 day: day ]\r    ifFalse: [ Date year: year month: 4 day: day - 31 ].\r"\r\r"Знайдіть роки, коли святкування припадають на один день."\r\ryearsWithMatchingEasterFrom: startYear to: endYear\r\r    | matchingYears orthodoxDate catholicDate |\r    matchingYears := OrderedCollection new.\r    (startYear to: endYear) do: [:year |\r        orthodoxDate := self orthodoxEasterDateFor: year.\r        catholicDate := self easterDateFor: year.\r        (orthodoxDate = catholicDate) ifTrue: [\r            matchingYears add: year\r        ].\r    ].\r    ^matchingYears asArray\r\rDate yearsWithMatchingEasterFrom: 2000 to: 2050. "#(2001 2004 2007 2010 2011 2014 2017 2025 2028 2031 2034 2037 2038 2041 2045 2048)"\r\r" ------ РЕКУРСІЯ\r  Додайте до класу Integer і випробуйте різні методи обчислення чисел  Фібоначчі.\r  Запропонуйте власні. Порівняйте їхню ефективність.      \r  Перед випробуванням fibonacci ЗБЕРЕЖІТЬ ІМІДЖ СИСТЕМИ! Він може зайняти Ваш комп на тиждень.  "\r\r" * ------- "\rfibonacci\r        "Answer the nth fibonacci number, where n is the receiver."\r    ^self < 2\r        ifTrue: [1]\r        ifFalse:[(self - 1) fibonacci + (self - 2) fibonacci]\r" * ------- "\rfibo\r        "Frontend function to call fibStart: with: .\r         Answer the nth fibonacci number, where n is the receiver."\r    ^self fibStart:1 with:1\r" * ------- "\rfibStart: n1 with: n2\r        "Private - Calculate the n-th Fibonacci number, where\r         n is the receiver, n1 is previous Fibonacci number\r         and n2 - the preprevious one."\r ^ (self < 2)\r        ifTrue: [ n1 ]\r        ifFalse:[ (self - 1) fibStart: n1+n2 with:n1 ]\r\r3 fibStart: 1 with: 10  "12"\r4 fibo "5"\r12 fibonacci "233"\r\r\r"\r\r\r<fibStart:with:>\rЦе рекурсивний метод, який обчислює n-те число послідовності Фібоначчі, використовуючи два допоміжні параметри — n1 (попереднє значення) і n2 (передпопереднє значення). На кожному кроці рекурсії відбувається виклик:\r(self - 1) fibStart: n1 + n2 with: n1 — таким чином, наступний етап отримує нові значення, де поточне число стає сумою двох попередніх.\rТакий підхід дозволяє виконувати обчислення без повторних підрахунків уже відомих значень, тому алгоритм має лінійну складність O(n). Він працює швидко навіть для великих n і потребує мінімум пам’яті — лише для рекурсивних викликів (глибина дорівнює n).\r\r<fibo>\rЦе допоміжний метод, який просто викликає fibStart:with: із початковими значеннями. Його мета — спростити виклик функції, щоб не потрібно було вручну задавати перші два числа послідовності. Фактично, він працює так само, як і fibStart:with:, але зручніший у використанні, коли потрібно просто отримати n-те число Фібоначчі.\r\r<fibonacci>\rЦей варіант використовує класичне рекурсивне визначення:\rF(n) = F(n - 1) + F(n - 2)\rМетод простий у розумінні, але дуже неефективний для великих n, оскільки він не запам’ятовує вже обчислені значення і багаторазово виконує ті самі обчислення. Через це його складність є експоненційною — приблизно O(2ⁿ). При великих значеннях n така реалізація значно навантажує процесор і стек викликів, тому практично використовується лише для навчальних цілей або демонстрацій.\r"\r\r"------------------------------------------------------------------------------------\r ------ СТВОРЕННЯ, ОПРАЦЮВАННЯ КОЛЕКЦІЙ\r  У текстовому файлі записано інформацію про матрицю цілих чисел: розміри\r  матриці в першому рядку файла, у всіх наступних рядках - рядки матриці.}\r  Прочитати матрицю, знайти максимальні елементи кожного рядка і зберегти\r  їх у файлі. Надрукувати максимальний елемент цілої матриці."\r\r"Наведений нижче код можна виконати безпосередньо в робочому вікні,\r проте,  доцільно зробити його методом власного навчального класу."\r\r| matr fStream fName n m mMatr mLines |\r        "Вибір файла за допомогою діалогу"\r    (fName:=UIManager default\r\t\t\tchooseFullFileNameMatching: nil \r\t\t\tlabel: \'Виберіть файл з числовими даними\' ) isNil\r        ifTrue: [ ^\'Ви не вибрали файла\' ]. \r        fStream := fName asFileReference readStream.\r\t        "Введення даних"\r \t    n := Integer readFrom: fStream.  \r\t    matr := Array new: n.\r\t    m := Integer readFrom: fStream.\r\t    matr := matr collect: [ :x | Array new: m ]. \r\t    1 to: n do: [ :i |  fStream nextLine.\r \t\t     matr at: i put: (\r\t\t\t\t (matr at: i) collect: [ :x |  \r\t\t\t\t\t\tInteger readFrom: fStream. ]\r\t\t\t\t\t )\t ].\r    fStream close. matr inspect.\r        "Обчислення максимальних елементів"\r    mLines:=matr collect: [ :r | r inject: (r at: 1) into: [ :x :y | x max: y] ].\r    mMatr:=mLines at: 1.\r    mLines do: [ :x | x > mMatr ifTrue: [ mMatr := x ] ].\r        "Побудова імені файла результатів, збереження"\r    fName at: fName size - 4 put: $_ .\r    fStream := fName asFileReference writeStream.\r    mLines do: [ :x | x printOn: fStream. fStream cr ].\r    fStream close.\r    ^mMatr .  \r\r" Поясніть код, наведений вище (кожне повідомлення!):\r\r\tУ цьому коді ми працюємо з матрицею чисел, зчитаною з файлу. Спершу оголошуємо локальні змінні для зберігання самої матриці, потоку файлу, імені файлу, кількості рядків і стовпців, а також для проміжних результатів. Далі відкривається діалог для вибору файлу користувачем. Якщо файл не обрано, метод одразу повертає повідомлення про це і подальше виконання коду зупиняється.\r\rПісля цього створюється потік для читання файлу. Перше число з файлу визначає кількість рядків матриці, а друге число — кількість стовпців. У початковій версії матриця реалізується як масив масивів: спершу створюємо масив для рядків, а потім кожен рядок заповнюємо окремим масивом стовпців. Потік закривається після зчитування даних, і відкривається інспектор для перегляду структури матриці.\r\rЩоб знайти максимуми рядків, кожен рядок обробляється за допомогою методу inject, який проходить усі елементи рядка і визначає найбільше значення. Потім, перебираючи всі максимуми рядків, знаходиться загальний максимум усієї матриці. Після обробки результатів ім’я файлу змінюється для збереження результатів у новий файл, відкривається потік на запис, і кожен максимум рядка записується в файл на окремий рядок. Потім потік закривається. Нарешті, метод повертає максимальний елемент усієї матриці.\r\r   Як можна замінити масив масивів на екземпляр класу Matrix?:\r\tЯкщо використовувати клас Matrix, код можна зробити більш компактним і зручним. Клас Matrix зберігає матрицю як єдину структуру n × m, і доступ до елементів відбувається через at: i at: j, що виключає необхідність створювати масив масивів. Спочатку відкриваємо потік для читання файлу і зчитуємо розміри матриці. Потім створюємо об’єкт Matrix відповідного розміру і заповнюємо його числами з файлу. Далі, перебираючи рядки та стовпці, за допомогою вкладених inject визначаємо максимальні значення для кожного рядка та загальний максимум матриці. Результат повертається як вихідний максимум. Такий підхід дозволяє робити код більш структурованим і компактним, позбавляє зайвих проміжних масивів і робить роботу з матрицею наочнішою.\r======================================================"\r\r"------ АДРЕСНА КНИГА\r Приклад створення і використання адресної книги, описаний у одній з лекцій. \r Пригадуєте, спочатку оголошуємо глобальну змінну, що міститиме впорядковану \r колекцію масивів з трьох рядків. Спосіб порівняння описує бінарний блок."\r\r    Smalltalk globals at: #AddressBook\r              put:(SortedCollection sortBlock:[:a :b | (a at:1)<=(b at:1)]).\r\r" * --- Тепер до книги можна додавати записи. "\r\r    AddressBook\r            add: #(\'Ruth\' \'Babe\' \'456 Mudville Flats\');\r            add: #(\'Smith\' \'John\' \'12/5 Park Ave\');\r            add: #(\'Jexon\' \'John\' \'5 Baverli Hills\');\r            add: #(\'Adams\' \'John\' \'1 Hell str\');\r            add: #(\'Taylor\' \'Babe\' \'2a/35 Deribas str\');\r            add: #(\'Greg\' \'Voss\' \'12345 the USA\');\r\r            add: #(\'Ivanov\' \'Oleh\' \'Kyiv, Main Str 25\');\r            add: #(\'Koval\' \'Bohdan\' \'Lviv, Freedom Ave 12\');\r            add: #(\'Shevchenko\' \'Oleh\' \'Kharkiv, Central Park 3\');\r            add: #(\'Petrenko\' \'Oleh\' \'Odesa, Sea St 8\').\r\r" * --- Додайте власні записи. Видрукуйте вміст книги (код запропоновано нижче).  "\r\r\r\r   | s w |  s := WriteStream on: String new.\r    AddressBook do:[:x | x do:\r        [ :y | s nextPutAll: y; tab; tab.].\r        s cr. ].\r  w := Workspace openLabel: \'My Address Book\'.\r  w contents: s contents.\r\r" * ----  Наступне завдання - надрукувати список прізвищ людей з однаковими іменами. \r              Приклад демонструє різні способи перебору та перетворення колекцій."\r\r | firstNames duplicates |\r    firstNames:=Bag new.        "утворимо торбу імен"\r    AddressBook do: [ :entry | firstNames add: (entry at: 2) ].\r        "виберемо ті імена, які зустрічаються більше одного разу"\r    duplicates:=firstNames select:\r        [ :name | (firstNames occurrencesOf: name)>1 ].\r            "і впорядкуємо їх"\r    duplicates:=duplicates asSet asSortedCollection.\r        "друкуємо імена та відповідні їм прізвища"\r    duplicates do: [ :first | first printOn: Transcript. Transcript show:\'==>\'.\r        AddressBook do: [ :entry | (entry at: 2)=first\r            ifTrue: [ Transcript show:\' \'. (entry at: 1) printOn: Transcript ] ].\r        Transcript cr ]. Transcript show:\' \'.\r\r"Поясніть перетворення, що відбуваються в цьому фрагменті. \r   Запропонуйте власні варіанти використання та перетворення колекцій. \r   Оформіть запропоновані вище фрагменти як методи навчального класу."\r\r\r"------ ДОДАВАННЯ АДРЕС\r  Можливо, додавання записів до AddressBook за допомогою явного програмування \r  виглядає не надто привабливо. Використайте з цією метою діалоги "\r\r| a b c | \ra := UIManager default request: \'Input first name\'.\rb := UIManager default request: \'Input second name\'.\rc := UIManager default request: \'Input address\'.\ra isNil | b isNil | c isNil ifFalse: [ AddressBook add: (Array with:a with:b with:c)].\r\r"Додайте до книги декілька нових записів, знову видрукуйте її. "\r                                    \r" Поміркуйте, як зробити зручнішим звертання до діалогу додавання адрес та друку адресної книги. "\r\r\r"Що станеться, якщо виконати наступний код? Випробуйте. "\r    Smalltalk globals removeKey:#AddressBook.\r\r"Видалиться ключ #AddressBook."\r\r "------ ПЕРЕТВОРЕННЯ (ПЕРЕВТІЛЕННЯ) ОБ\'ЄКТІВ\r   Виконайте за допомогою Do It. "\r\r | a b c|\r    a := OrderedCollection new.\r    b := Cylinder  new.\r    c := Array with: a with: b with: b.\r    Transcript show: \'Old Array is = \'.\r    c do: [ :x | Transcript show: \'     \'. x printOn: Transcript ].\r    Transcript cr.\r    a become: b.\r    Transcript show: \'New Array is = \'.\r    c do: [ :x | Transcript show: \'     \'. x printOn: Transcript ].\r    Transcript cr; show:\' \'. "Unknown variable"\r" Поясніть дію методу become:. Чи можна замість нього користуватися звичайним присвоєнням? Наведіть власні приклади. "\r\r" Він міняє всі посилання на два об’єкти місцями у всій системі.  \r  Не можна замість become використовувати звичайне присвоєння, адже такого ефекту не можливо буде досягнути."\r\r\r\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-10-05T22:08:00.47+03:00' ],
		#self : OmReference [ '5' ]
	},
	#content : '"--------------------------------------------------------------------------------------\r*                      ЛАБОРОТОРНА РОБОТА 3\r*                 Тема: КЛАСИ ТА МЕТОДИ. КОЛЕКЦІЇ\r*\r*  Завдання до лабораторної роботи:\r*     1. Виконайте наведені нижче приклади, збережіть і поясніть отримані результати.\r*     2. Випробуйте різноманітні способи додавання нових класів до системи.\r*     3. Навчіться доповнювати функціональність класів.\r*     4. Випробуйте методи опрацювання колекцій.\r*\r\r    Виконайте за допомогою <Print it> \r\r ------ ПРИНАЛЕЖНІСТЬ КЛАСОВІ, ІЄРАРХІЯ КЛАСІВ\r"\r    #(Francesca Jackie Marisa Bree) class. "Array"\r    (#(Francesca Jackie Marisa Bree) at:2) class. "ByteSymbol"\r    \'Rakesh Vijay Charles Daniel Tyler\' class. "ByteString"\r    (\'Rakesh Vijay Charles Daniel Tyler\' at:2) class. "Character (a)"\r    World class . "WorldMorph"\r    Magnitude class. "Magnitude class"\r    Magnitude class class. "Metaclass"\r    nil class. "UndefinedObject"\r    5 species. "SmallInteger"\r    123456789000 species. "SmallInteger"\r    #aName species. "ByteString"\r " Яка різниця між повідомленнями class i species ? \r\r    Випробуйте різні способи відкривання браузера класів: за допомогою меню чи програмно \r     Виконайте за допомогою <Do it>\r"\r    ClyFullBrowserMorph open. \r    ClyFullBrowserMorph openOnClass: Date. \r    ClyFullBrowserMorph openOnClass: VolumeShape  selector:  #volume. \r\r" ------ МЕТОДИ КЛАСУ, КОНСТРУКТОРИ\r  Виконайте за допомогою <Print It>. Запропонуйте власні приклади. "\r\r    Array new: 10. "#(nil nil nil nil nil nil nil nil nil nil)"        \r    OrderedCollection  new. "an OrderedCollection()"\r    Date today. "29 September 2025"\r    Time now. "10:28:52.422 am"\r    UIManager default  request:\'How are you?\' initialAnswer:\'I\'\'m fine!\'. "\'I\'\'m fine!\'"\r    Integer readFrom: \'2013  1925\'. "2013"\r    Integer primesUpTo: 100. "#(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97)"\r    Rectangle origin:0@0 corner:200@100. "(0@0) corner: (200@100)"\r    Date nameOfMonth:12. "#December"\r    Date dayOfWeek: #Friday. "6"\r    Date orthodoxEasterDateFor: 2022. "24 April 2022"\r\r\r   \r"Інсталюйте вказані нижче МЕТОДИ КЛАСУ Date:\r  перенесіть копію тексту визначення методу з робочого вікна в браузер класів.\r\r""!Date class methodsFor: \'specific inquiries\' stamp: \'CamilloBruni 8/22/2013 19:47\'!""\r\rorthodoxEasterDateFor: year\r ""  compute the easter date according to the rules of the orthodox calendar.\r    source:       http://www.smart.net/~mmontes/ortheast.html   ""\r     | r1 r2 r3 r4 ra rb r5 rc date |\r\r    r1 := year \\\\ 19.\r    r2 := year \\\\ 4.\r    r3 := year \\\\ 7.\r    ra := 19*r1 + 16.\r    r4 := ra \\\\ 30.\r    rb := r2 + r2 + (4*r3) + (6*r4).\r    r5 := rb \\\\ 7.\r    rc := r4 + r5.\r    date := self year: year month: 4 day: 3.\r    ^date addDays: rc.\r""--------------------------------------------------------------------------------------""\r""!Date class methodsFor: \'specific inquiries\' stamp: \'CamilloBruni 8/22/2013 19:48\'!""\r\reasterDateFor: year\r ""  compute the easter date.\r    source: Physikalisch-Technische Bundesanstalt Braunschweig.\r    Lichtenberg, H.: Zur Interpretation der Gaussschen Osterformel und ihrer Ausnahmeregeln, Historia Mathematica 24 (1997), pp. 441-444\r      http://www.ptb.de/de/org/4/44/441/oste.htm  ""\r\r  | k m s a d r og sz oe day |\r\r  k := year // 100.\r  m := 15 + (3*k + 3//4) - (8*k + 13//25).\r   s := 2 - (3*k + 3// 4).\r  a := year \\\\ 19.\r  d := 19*a + m \\\\ 30.\r  r := d//29 + ((d//28) - (d//29)* (a// 11)).\r\r  og := 21 + d - r.\r  sz := 7 - (year//4 + year + s\\\\7).\r  oe := 7 - (og - sz\\\\7).\r  day := og + oe.\r  ^day <= 31\r    ifTrue: [ Date year: year month: 3 day: day ]\r    ifFalse: [ Date year: year month: 4 day: day - 31 ].\r"\r\r"Знайдіть роки, коли святкування припадають на один день."\r\ryearsWithMatchingEasterFrom: startYear to: endYear\r\r    | matchingYears orthodoxDate catholicDate |\r    matchingYears := OrderedCollection new.\r    (startYear to: endYear) do: [:year |\r        orthodoxDate := self orthodoxEasterDateFor: year.\r        catholicDate := self easterDateFor: year.\r        (orthodoxDate = catholicDate) ifTrue: [\r            matchingYears add: year\r        ].\r    ].\r    ^matchingYears asArray\r\rDate yearsWithMatchingEasterFrom: 2000 to: 2050. "#(2001 2004 2007 2010 2011 2014 2017 2025 2028 2031 2034 2037 2038 2041 2045 2048)"\r\r" ------ РЕКУРСІЯ\r  Додайте до класу Integer і випробуйте різні методи обчислення чисел  Фібоначчі.\r  Запропонуйте власні. Порівняйте їхню ефективність.      \r  Перед випробуванням fibonacci ЗБЕРЕЖІТЬ ІМІДЖ СИСТЕМИ! Він може зайняти Ваш комп на тиждень.  "\r\r" * ------- "\rfibonacci\r        "Answer the nth fibonacci number, where n is the receiver."\r    ^self < 2\r        ifTrue: [1]\r        ifFalse:[(self - 1) fibonacci + (self - 2) fibonacci]\r" * ------- "\rfibo\r        "Frontend function to call fibStart: with: .\r         Answer the nth fibonacci number, where n is the receiver."\r    ^self fibStart:1 with:1\r" * ------- "\rfibStart: n1 with: n2\r        "Private - Calculate the n-th Fibonacci number, where\r         n is the receiver, n1 is previous Fibonacci number\r         and n2 - the preprevious one."\r ^ (self < 2)\r        ifTrue: [ n1 ]\r        ifFalse:[ (self - 1) fibStart: n1+n2 with:n1 ]\r\r3 fibStart: 1 with: 10  "12"\r4 fibo "5"\r12 fibonacci "233"\r\r\r"\r\r\r<fibStart:with:>\rЦе рекурсивний метод, який обчислює n-те число послідовності Фібоначчі, використовуючи два допоміжні параметри — n1 (попереднє значення) і n2 (передпопереднє значення). На кожному кроці рекурсії відбувається виклик:\r(self - 1) fibStart: n1 + n2 with: n1 — таким чином, наступний етап отримує нові значення, де поточне число стає сумою двох попередніх.\rТакий підхід дозволяє виконувати обчислення без повторних підрахунків уже відомих значень, тому алгоритм має лінійну складність O(n). Він працює швидко навіть для великих n і потребує мінімум пам’яті — лише для рекурсивних викликів (глибина дорівнює n).\r\r<fibo>\rЦе допоміжний метод, який просто викликає fibStart:with: із початковими значеннями. Його мета — спростити виклик функції, щоб не потрібно було вручну задавати перші два числа послідовності. Фактично, він працює так само, як і fibStart:with:, але зручніший у використанні, коли потрібно просто отримати n-те число Фібоначчі.\r\r<fibonacci>\rЦей варіант використовує класичне рекурсивне визначення:\rF(n) = F(n - 1) + F(n - 2)\rМетод простий у розумінні, але дуже неефективний для великих n, оскільки він не запам’ятовує вже обчислені значення і багаторазово виконує ті самі обчислення. Через це його складність є експоненційною — приблизно O(2ⁿ). При великих значеннях n така реалізація значно навантажує процесор і стек викликів, тому практично використовується лише для навчальних цілей або демонстрацій.\r"\r\r"------------------------------------------------------------------------------------\r ------ СТВОРЕННЯ, ОПРАЦЮВАННЯ КОЛЕКЦІЙ\r  У текстовому файлі записано інформацію про матрицю цілих чисел: розміри\r  матриці в першому рядку файла, у всіх наступних рядках - рядки матриці.}\r  Прочитати матрицю, знайти максимальні елементи кожного рядка і зберегти\r  їх у файлі. Надрукувати максимальний елемент цілої матриці."\r\r"Наведений нижче код можна виконати безпосередньо в робочому вікні,\r проте,  доцільно зробити його методом власного навчального класу."\r\r| matr fStream fName n m mMatr mLines |\r        "Вибір файла за допомогою діалогу"\r    (fName:=UIManager default\r\t\t\tchooseFullFileNameMatching: nil \r\t\t\tlabel: \'Виберіть файл з числовими даними\' ) isNil\r        ifTrue: [ ^\'Ви не вибрали файла\' ]. \r        fStream := fName asFileReference readStream.\r\t        "Введення даних"\r \t    n := Integer readFrom: fStream.  \r\t    matr := Array new: n.\r\t    m := Integer readFrom: fStream.\r\t    matr := matr collect: [ :x | Array new: m ]. \r\t    1 to: n do: [ :i |  fStream nextLine.\r \t\t     matr at: i put: (\r\t\t\t\t (matr at: i) collect: [ :x |  \r\t\t\t\t\t\tInteger readFrom: fStream. ]\r\t\t\t\t\t )\t ].\r    fStream close. matr inspect.\r        "Обчислення максимальних елементів"\r    mLines:=matr collect: [ :r | r inject: (r at: 1) into: [ :x :y | x max: y] ].\r    mMatr:=mLines at: 1.\r    mLines do: [ :x | x > mMatr ifTrue: [ mMatr := x ] ].\r        "Побудова імені файла результатів, збереження"\r    fName at: fName size - 4 put: $_ .\r    fStream := fName asFileReference writeStream.\r    mLines do: [ :x | x printOn: fStream. fStream cr ].\r    fStream close.\r    ^mMatr .  \r\r" Поясніть код, наведений вище (кожне повідомлення!):\r\r\tУ цьому коді ми працюємо з матрицею чисел, зчитаною з файлу. Спершу оголошуємо локальні змінні для зберігання самої матриці, потоку файлу, імені файлу, кількості рядків і стовпців, а також для проміжних результатів. Далі відкривається діалог для вибору файлу користувачем. Якщо файл не обрано, метод одразу повертає повідомлення про це і подальше виконання коду зупиняється.\r\rПісля цього створюється потік для читання файлу. Перше число з файлу визначає кількість рядків матриці, а друге число — кількість стовпців. У початковій версії матриця реалізується як масив масивів: спершу створюємо масив для рядків, а потім кожен рядок заповнюємо окремим масивом стовпців. Потік закривається після зчитування даних, і відкривається інспектор для перегляду структури матриці.\r\rЩоб знайти максимуми рядків, кожен рядок обробляється за допомогою методу inject, який проходить усі елементи рядка і визначає найбільше значення. Потім, перебираючи всі максимуми рядків, знаходиться загальний максимум усієї матриці. Після обробки результатів ім’я файлу змінюється для збереження результатів у новий файл, відкривається потік на запис, і кожен максимум рядка записується в файл на окремий рядок. Потім потік закривається. Нарешті, метод повертає максимальний елемент усієї матриці.\r\r   Як можна замінити масив масивів на екземпляр класу Matrix?:\r\tЯкщо використовувати клас Matrix, код можна зробити більш компактним і зручним. Клас Matrix зберігає матрицю як єдину структуру n × m, і доступ до елементів відбувається через at: i at: j, що виключає необхідність створювати масив масивів. Спочатку відкриваємо потік для читання файлу і зчитуємо розміри матриці. Потім створюємо об’єкт Matrix відповідного розміру і заповнюємо його числами з файлу. Далі, перебираючи рядки та стовпці, за допомогою вкладених inject визначаємо максимальні значення для кожного рядка та загальний максимум матриці. Результат повертається як вихідний максимум. Такий підхід дозволяє робити код більш структурованим і компактним, позбавляє зайвих проміжних масивів і робить роботу з матрицею наочнішою.\r======================================================"\r\r"------ АДРЕСНА КНИГА\r Приклад створення і використання адресної книги, описаний у одній з лекцій. \r Пригадуєте, спочатку оголошуємо глобальну змінну, що міститиме впорядковану \r колекцію масивів з трьох рядків. Спосіб порівняння описує бінарний блок."\r\r    Smalltalk globals at: #AddressBook\r              put:(SortedCollection sortBlock:[:a :b | (a at:1)<=(b at:1)]).\r\r" * --- Тепер до книги можна додавати записи. "\r\r    AddressBook\r            add: #(\'Ruth\' \'Babe\' \'456 Mudville Flats\');\r            add: #(\'Smith\' \'John\' \'12/5 Park Ave\');\r            add: #(\'Jexon\' \'John\' \'5 Baverli Hills\');\r            add: #(\'Adams\' \'John\' \'1 Hell str\');\r            add: #(\'Taylor\' \'Babe\' \'2a/35 Deribas str\');\r            add: #(\'Greg\' \'Voss\' \'12345 the USA\');\r\r            add: #(\'Ivanov\' \'Nazar\' \'Kyiv, Main Str 25\');\r            add: #(\'Koval\' \'Bohdan\' \'Lviv, Freedom Ave 12\');\r            add: #(\'Shevchenko\' \'Nazar\' \'Kharkiv, Central Park 3\');\r            add: #(\'Petrenko\' \'Nazar\' \'Odesa, Sea St 8\').\r\r" * --- Додайте власні записи. Видрукуйте вміст книги (код запропоновано нижче).  "\r\r\r\r   | s w |  s := WriteStream on: String new.\r    AddressBook do:[:x | x do:\r        [ :y | s nextPutAll: y; tab; tab.].\r        s cr. ].\r  w := Workspace openLabel: \'My Address Book\'.\r  w contents: s contents.\r\r" * ----  Наступне завдання - надрукувати список прізвищ людей з однаковими іменами. \r              Приклад демонструє різні способи перебору та перетворення колекцій."\r\r | firstNames duplicates |\r    firstNames:=Bag new.        "утворимо торбу імен"\r    AddressBook do: [ :entry | firstNames add: (entry at: 2) ].\r        "виберемо ті імена, які зустрічаються більше одного разу"\r    duplicates:=firstNames select:\r        [ :name | (firstNames occurrencesOf: name)>1 ].\r            "і впорядкуємо їх"\r    duplicates:=duplicates asSet asSortedCollection.\r        "друкуємо імена та відповідні їм прізвища"\r    duplicates do: [ :first | first printOn: Transcript. Transcript show:\'==>\'.\r        AddressBook do: [ :entry | (entry at: 2)=first\r            ifTrue: [ Transcript show:\' \'. (entry at: 1) printOn: Transcript ] ].\r        Transcript cr ]. Transcript show:\' \'.\r\r"Поясніть перетворення, що відбуваються в цьому фрагменті. \r   Запропонуйте власні варіанти використання та перетворення колекцій. \r   Оформіть запропоновані вище фрагменти як методи навчального класу."\r\r\r"------ ДОДАВАННЯ АДРЕС\r  Можливо, додавання записів до AddressBook за допомогою явного програмування \r  виглядає не надто привабливо. Використайте з цією метою діалоги "\r\r| a b c | \ra := UIManager default request: \'Input first name\'.\rb := UIManager default request: \'Input second name\'.\rc := UIManager default request: \'Input address\'.\ra isNil | b isNil | c isNil ifFalse: [ AddressBook add: (Array with:a with:b with:c)].\r\r"Додайте до книги декілька нових записів, знову видрукуйте її. "\r                                    \r" Поміркуйте, як зробити зручнішим звертання до діалогу додавання адрес та друку адресної книги. "\r\r\r"Що станеться, якщо виконати наступний код? Випробуйте. "\r    Smalltalk globals removeKey:#AddressBook.\r\r"Видалиться ключ #AddressBook."\r\r "------ ПЕРЕТВОРЕННЯ (ПЕРЕВТІЛЕННЯ) ОБ\'ЄКТІВ\r   Виконайте за допомогою Do It. "\r\r | a b c|\r    a := OrderedCollection new.\r    b := Cylinder  new.\r    c := Array with: a with: b with: b.\r    Transcript show: \'Old Array is = \'.\r    c do: [ :x | Transcript show: \'     \'. x printOn: Transcript ].\r    Transcript cr.\r    a become: b.\r    Transcript show: \'New Array is = \'.\r    c do: [ :x | Transcript show: \'     \'. x printOn: Transcript ].\r    Transcript cr; show:\' \'. "Unknown variable"\r" Поясніть дію методу become:. Чи можна замість нього користуватися звичайним присвоєнням? Наведіть власні приклади. "\r\r" Він міняє всі посилання на два об’єкти місцями у всій системі.  \r  Не можна замість become використовувати звичайне присвоєння, адже такого ефекту не можливо буде досягнути."\r\r\r\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-10-05T22:09:39.961+03:00' ],
		#self : OmReference [ '6' ]
	},
	#content : '"--------------------------------------------------------------------------------------\r*                      ЛАБОРОТОРНА РОБОТА 3\r*                 Тема: КЛАСИ ТА МЕТОДИ. КОЛЕКЦІЇ\r*\r*  Завдання до лабораторної роботи:\r*     1. Виконайте наведені нижче приклади, збережіть і поясніть отримані результати.\r*     2. Випробуйте різноманітні способи додавання нових класів до системи.\r*     3. Навчіться доповнювати функціональність класів.\r*     4. Випробуйте методи опрацювання колекцій.\r*\r\r    Виконайте за допомогою <Print it> \r\r ------ ПРИНАЛЕЖНІСТЬ КЛАСОВІ, ІЄРАРХІЯ КЛАСІВ\r"\r    #(Francesca Jackie Marisa Bree) class. "Array"\r    (#(Francesca Jackie Marisa Bree) at:2) class. "ByteSymbol"\r    \'Rakesh Vijay Charles Daniel Tyler\' class. "ByteString"\r    (\'Rakesh Vijay Charles Daniel Tyler\' at:2) class. "Character (a)"\r    World class . "WorldMorph"\r    Magnitude class. "Magnitude class"\r    Magnitude class class. "Metaclass"\r    nil class. "UndefinedObject"\r    5 species. "SmallInteger"\r    123456789000 species. "SmallInteger"\r    #aName species. "ByteString"\r " Яка різниця між повідомленнями class i species ? \r\r    Випробуйте різні способи відкривання браузера класів: за допомогою меню чи програмно \r     Виконайте за допомогою <Do it>\r"\r    ClyFullBrowserMorph open. \r    ClyFullBrowserMorph openOnClass: Date. \r    ClyFullBrowserMorph openOnClass: VolumeShape  selector:  #volume. \r\r" ------ МЕТОДИ КЛАСУ, КОНСТРУКТОРИ\r  Виконайте за допомогою <Print It>. Запропонуйте власні приклади. "\r\r    Array new: 10. "#(nil nil nil nil nil nil nil nil nil nil)"        \r    OrderedCollection  new. "an OrderedCollection()"\r    Date today. "29 September 2025"\r    Time now. "10:28:52.422 am"\r    UIManager default  request:\'How are you?\' initialAnswer:\'I\'\'m fine!\'. "\'I\'\'m fine!\'"\r    Integer readFrom: \'2013  1925\'. "2013"\r    Integer primesUpTo: 100. "#(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97)"\r    Rectangle origin:0@0 corner:200@100. "(0@0) corner: (200@100)"\r    Date nameOfMonth:12. "#December"\r    Date dayOfWeek: #Friday. "6"\r    Date orthodoxEasterDateFor: 2022. "24 April 2022"\r\r\r   \r"Інсталюйте вказані нижче МЕТОДИ КЛАСУ Date:\r  перенесіть копію тексту визначення методу з робочого вікна в браузер класів.\r\r""!Date class methodsFor: \'specific inquiries\' stamp: \'CamilloBruni 8/22/2013 19:47\'!""\r\rorthodoxEasterDateFor: year\r ""  compute the easter date according to the rules of the orthodox calendar.\r    source:       http://www.smart.net/~mmontes/ortheast.html   ""\r     | r1 r2 r3 r4 ra rb r5 rc date |\r\r    r1 := year \\\\ 19.\r    r2 := year \\\\ 4.\r    r3 := year \\\\ 7.\r    ra := 19*r1 + 16.\r    r4 := ra \\\\ 30.\r    rb := r2 + r2 + (4*r3) + (6*r4).\r    r5 := rb \\\\ 7.\r    rc := r4 + r5.\r    date := self year: year month: 4 day: 3.\r    ^date addDays: rc.\r""--------------------------------------------------------------------------------------""\r""!Date class methodsFor: \'specific inquiries\' stamp: \'CamilloBruni 8/22/2013 19:48\'!""\r\reasterDateFor: year\r ""  compute the easter date.\r    source: Physikalisch-Technische Bundesanstalt Braunschweig.\r    Lichtenberg, H.: Zur Interpretation der Gaussschen Osterformel und ihrer Ausnahmeregeln, Historia Mathematica 24 (1997), pp. 441-444\r      http://www.ptb.de/de/org/4/44/441/oste.htm  ""\r\r  | k m s a d r og sz oe day |\r\r  k := year // 100.\r  m := 15 + (3*k + 3//4) - (8*k + 13//25).\r   s := 2 - (3*k + 3// 4).\r  a := year \\\\ 19.\r  d := 19*a + m \\\\ 30.\r  r := d//29 + ((d//28) - (d//29)* (a// 11)).\r\r  og := 21 + d - r.\r  sz := 7 - (year//4 + year + s\\\\7).\r  oe := 7 - (og - sz\\\\7).\r  day := og + oe.\r  ^day <= 31\r    ifTrue: [ Date year: year month: 3 day: day ]\r    ifFalse: [ Date year: year month: 4 day: day - 31 ].\r"\r\r"Знайдіть роки, коли святкування припадають на один день."\r\ryearsWithMatchingEasterFrom: startYear to: endYear\r\r    | matchingYears orthodoxDate catholicDate |\r    matchingYears := OrderedCollection new.\r    (startYear to: endYear) do: [:year |\r        orthodoxDate := self orthodoxEasterDateFor: year.\r        catholicDate := self easterDateFor: year.\r        (orthodoxDate = catholicDate) ifTrue: [\r            matchingYears add: year\r        ].\r    ].\r    ^matchingYears asArray\r\rDate yearsWithMatchingEasterFrom: 2000 to: 2050. "#(2001 2004 2007 2010 2011 2014 2017 2025 2028 2031 2034 2037 2038 2041 2045 2048)"\r\r" ------ РЕКУРСІЯ\r  Додайте до класу Integer і випробуйте різні методи обчислення чисел  Фібоначчі.\r  Запропонуйте власні. Порівняйте їхню ефективність.      \r  Перед випробуванням fibonacci ЗБЕРЕЖІТЬ ІМІДЖ СИСТЕМИ! Він може зайняти Ваш комп на тиждень.  "\r\r" * ------- "\rfibonacci\r        "Answer the nth fibonacci number, where n is the receiver."\r    ^self < 2\r        ifTrue: [1]\r        ifFalse:[(self - 1) fibonacci + (self - 2) fibonacci]\r" * ------- "\rfibo\r        "Frontend function to call fibStart: with: .\r         Answer the nth fibonacci number, where n is the receiver."\r    ^self fibStart:1 with:1\r" * ------- "\rfibStart: n1 with: n2\r        "Private - Calculate the n-th Fibonacci number, where\r         n is the receiver, n1 is previous Fibonacci number\r         and n2 - the preprevious one."\r ^ (self < 2)\r        ifTrue: [ n1 ]\r        ifFalse:[ (self - 1) fibStart: n1+n2 with:n1 ]\r\r3 fibStart: 1 with: 10  "12"\r4 fibo "5"\r12 fibonacci "233"\r\r\r"\r\r\r<fibStart:with:>\rЦе рекурсивний метод, який обчислює n-те число послідовності Фібоначчі, використовуючи два допоміжні параметри — n1 (попереднє значення) і n2 (передпопереднє значення). На кожному кроці рекурсії відбувається виклик:\r(self - 1) fibStart: n1 + n2 with: n1 — таким чином, наступний етап отримує нові значення, де поточне число стає сумою двох попередніх.\rТакий підхід дозволяє виконувати обчислення без повторних підрахунків уже відомих значень, тому алгоритм має лінійну складність O(n). Він працює швидко навіть для великих n і потребує мінімум пам’яті — лише для рекурсивних викликів (глибина дорівнює n).\r\r<fibo>\rЦе допоміжний метод, який просто викликає fibStart:with: із початковими значеннями. Його мета — спростити виклик функції, щоб не потрібно було вручну задавати перші два числа послідовності. Фактично, він працює так само, як і fibStart:with:, але зручніший у використанні, коли потрібно просто отримати n-те число Фібоначчі.\r\r<fibonacci>\rЦей варіант використовує класичне рекурсивне визначення:\rF(n) = F(n - 1) + F(n - 2)\rМетод простий у розумінні, але дуже неефективний для великих n, оскільки він не запам’ятовує вже обчислені значення і багаторазово виконує ті самі обчислення. Через це його складність є експоненційною — приблизно O(2ⁿ). При великих значеннях n така реалізація значно навантажує процесор і стек викликів, тому практично використовується лише для навчальних цілей або демонстрацій.\r"\r\r"------------------------------------------------------------------------------------\r ------ СТВОРЕННЯ, ОПРАЦЮВАННЯ КОЛЕКЦІЙ\r  У текстовому файлі записано інформацію про матрицю цілих чисел: розміри\r  матриці в першому рядку файла, у всіх наступних рядках - рядки матриці.}\r  Прочитати матрицю, знайти максимальні елементи кожного рядка і зберегти\r  їх у файлі. Надрукувати максимальний елемент цілої матриці."\r\r"Наведений нижче код можна виконати безпосередньо в робочому вікні,\r проте,  доцільно зробити його методом власного навчального класу."\r\r| matr fStream fName n m mMatr mLines |\r        "Вибір файла за допомогою діалогу"\r    (fName:=UIManager default\r\t\t\tchooseFullFileNameMatching: nil \r\t\t\tlabel: \'Виберіть файл з числовими даними\' ) isNil\r        ifTrue: [ ^\'Ви не вибрали файла\' ]. \r        fStream := fName asFileReference readStream.\r\t        "Введення даних"\r \t    n := Integer readFrom: fStream.  \r\t    matr := Array new: n.\r\t    m := Integer readFrom: fStream.\r\t    matr := matr collect: [ :x | Array new: m ]. \r\t    1 to: n do: [ :i |  fStream nextLine.\r \t\t     matr at: i put: (\r\t\t\t\t (matr at: i) collect: [ :x |  \r\t\t\t\t\t\tInteger readFrom: fStream. ]\r\t\t\t\t\t )\t ].\r    fStream close. matr inspect.\r        "Обчислення максимальних елементів"\r    mLines:=matr collect: [ :r | r inject: (r at: 1) into: [ :x :y | x max: y] ].\r    mMatr:=mLines at: 1.\r    mLines do: [ :x | x > mMatr ifTrue: [ mMatr := x ] ].\r        "Побудова імені файла результатів, збереження"\r    fName at: fName size - 4 put: $_ .\r    fStream := fName asFileReference writeStream.\r    mLines do: [ :x | x printOn: fStream. fStream cr ].\r    fStream close.\r    ^mMatr .  \r\r" Поясніть код, наведений вище (кожне повідомлення!):\r\r\tУ цьому коді ми працюємо з матрицею чисел, зчитаною з файлу. Спершу оголошуємо локальні змінні для зберігання самої матриці, потоку файлу, імені файлу, кількості рядків і стовпців, а також для проміжних результатів. Далі відкривається діалог для вибору файлу користувачем. Якщо файл не обрано, метод одразу повертає повідомлення про це і подальше виконання коду зупиняється.\r\rПісля цього створюється потік для читання файлу. Перше число з файлу визначає кількість рядків матриці, а друге число — кількість стовпців. У початковій версії матриця реалізується як масив масивів: спершу створюємо масив для рядків, а потім кожен рядок заповнюємо окремим масивом стовпців. Потік закривається після зчитування даних, і відкривається інспектор для перегляду структури матриці.\r\rЩоб знайти максимуми рядків, кожен рядок обробляється за допомогою методу inject, який проходить усі елементи рядка і визначає найбільше значення. Потім, перебираючи всі максимуми рядків, знаходиться загальний максимум усієї матриці. Після обробки результатів ім’я файлу змінюється для збереження результатів у новий файл, відкривається потік на запис, і кожен максимум рядка записується в файл на окремий рядок. Потім потік закривається. Нарешті, метод повертає максимальний елемент усієї матриці.\r\r   Як можна замінити масив масивів на екземпляр класу Matrix?:\r\tЯкщо використовувати клас Matrix, код можна зробити більш компактним і зручним. Клас Matrix зберігає матрицю як єдину структуру n × m, і доступ до елементів відбувається через at: i at: j, що виключає необхідність створювати масив масивів. Спочатку відкриваємо потік для читання файлу і зчитуємо розміри матриці. Потім створюємо об’єкт Matrix відповідного розміру і заповнюємо його числами з файлу. Далі, перебираючи рядки та стовпці, за допомогою вкладених inject визначаємо максимальні значення для кожного рядка та загальний максимум матриці. Результат повертається як вихідний максимум. Такий підхід дозволяє робити код більш структурованим і компактним, позбавляє зайвих проміжних масивів і робить роботу з матрицею наочнішою.\r======================================================"\r\r"------ АДРЕСНА КНИГА\r Приклад створення і використання адресної книги, описаний у одній з лекцій. \r Пригадуєте, спочатку оголошуємо глобальну змінну, що міститиме впорядковану \r колекцію масивів з трьох рядків. Спосіб порівняння описує бінарний блок."\r\r    Smalltalk globals at: #AddressBook\r              put:(SortedCollection sortBlock:[:a :b | (a at:1)<=(b at:1)]).\r\r" * --- Тепер до книги можна додавати записи. "\r\r    AddressBook\r            add: #(\'Ruth\' \'Babe\' \'456 Mudville Flats\');\r            add: #(\'Smith\' \'John\' \'12/5 Park Ave\');\r            add: #(\'Jexon\' \'John\' \'5 Baverli Hills\');\r            add: #(\'Adams\' \'John\' \'1 Hell str\');\r            add: #(\'Taylor\' \'Babe\' \'2a/35 Deribas str\');\r            add: #(\'Greg\' \'Voss\' \'12345 the USA\');\r\r            add: #(\'Ivanov\' \'Nazar\' \'Kyiv, Main Str 25\');\r            add: #(\'Koval\' \'Bohdan\' \'Lviv, Freedom Ave 12\');\r            add: #(\'Shevchenko\' \'Nazar\' \'Kharkiv, Central Park 3\');\r            add: #(\'Petrenko\' \'Nazar\' \'Odesa, Sea St 8\').\r\r" * --- Додайте власні записи. Видрукуйте вміст книги (код запропоновано нижче).  "\r\r\r\r   | s w |  s := WriteStream on: String new.\r    AddressBook do:[:x | x do:\r        [ :y | s nextPutAll: y; tab; tab.].\r        s cr. ].\r  w := Workspace openLabel: \'My Address Book\'.\r  w contents: s contents.\r\r" * ----  Наступне завдання - надрукувати список прізвищ людей з однаковими іменами. \r              Приклад демонструє різні способи перебору та перетворення колекцій."\r\r | firstNames duplicates |\r    firstNames:=Bag new.        "утворимо торбу імен"\r    AddressBook do: [ :entry | firstNames add: (entry at: 2) ].\r        "виберемо ті імена, які зустрічаються більше одного разу"\r    duplicates:=firstNames select:\r        [ :name | (firstNames occurrencesOf: name)>1 ].\r            "і впорядкуємо їх"\r    duplicates:=duplicates asSet asSortedCollection.\r        "друкуємо імена та відповідні їм прізвища"\r    duplicates do: [ :first | first printOn: Transcript. Transcript show:\'==>\'.\r        AddressBook do: [ :entry | (entry at: 2)=first\r            ifTrue: [ Transcript show:\' \'. (entry at: 1) printOn: Transcript ] ].\r        Transcript cr ]. Transcript show:\' \'.\r\r"Поясніть перетворення, що відбуваються в цьому фрагменті. \r   Запропонуйте власні варіанти використання та перетворення колекцій. \r   Оформіть запропоновані вище фрагменти як методи навчального класу."\r\r\r"------ ДОДАВАННЯ АДРЕС\r  Можливо, додавання записів до AddressBook за допомогою явного програмування \r  виглядає не надто привабливо. Використайте з цією метою діалоги "\r\r| a b c | \ra := UIManager default request: \'Input first name\'.\rb := UIManager default request: \'Input second name\'.\rc := UIManager default request: \'Input address\'.\ra isNil | b isNil | c isNil ifFalse: [ AddressBook add: (Array with:a with:b with:c)].\r\r"Додайте до книги декілька нових записів, знову видрукуйте її. "\r                                    \r" Поміркуйте, як зробити зручнішим звертання до діалогу додавання адрес та друку адресної книги. "\r\r\r"Що станеться, якщо виконати наступний код? Випробуйте. "\r    Smalltalk globals removeKey:#AddressBook.\r\r"Відповідь: Видалиться ключ #AddressBook."\r\r "------ ПЕРЕТВОРЕННЯ (ПЕРЕВТІЛЕННЯ) ОБ\'ЄКТІВ\r   Виконайте за допомогою Do It. "\r\r | a b c|\r    a := OrderedCollection new.\r    b := Cylinder  new.\r    c := Array with: a with: b with: b.\r    Transcript show: \'Old Array is = \'.\r    c do: [ :x | Transcript show: \'     \'. x printOn: Transcript ].\r    Transcript cr.\r    a become: b.\r    Transcript show: \'New Array is = \'.\r    c do: [ :x | Transcript show: \'     \'. x printOn: Transcript ].\r    Transcript cr; show:\' \'. "Unknown variable"\r" Поясніть дію методу become:. Чи можна замість нього користуватися звичайним присвоєнням? Наведіть власні приклади. "\r\r"Відповідь: Він міняє всі посилання на два об’єкти місцями у всій системі.  \r  Не можна замість become використовувати звичайне присвоєння, адже такого ефекту не можливо буде досягнути."\r\r\r\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-10-05T22:11:54.976+03:00' ],
		#self : OmReference [ '7' ]
	},
	#content : '"--------------------------------------------------------------------------------------\r*                      ЛАБОРОТОРНА РОБОТА 3\r*                 Тема: КЛАСИ ТА МЕТОДИ. КОЛЕКЦІЇ\r*\r*  Завдання до лабораторної роботи:\r*     1. Виконайте наведені нижче приклади, збережіть і поясніть отримані результати.\r*     2. Випробуйте різноманітні способи додавання нових класів до системи.\r*     3. Навчіться доповнювати функціональність класів.\r*     4. Випробуйте методи опрацювання колекцій.\r*\r\r    Виконайте за допомогою <Print it> \r\r ------ ПРИНАЛЕЖНІСТЬ КЛАСОВІ, ІЄРАРХІЯ КЛАСІВ\r"\r    #(Francesca Jackie Marisa Bree) class. "Array"\r    (#(Francesca Jackie Marisa Bree) at:2) class. "ByteSymbol"\r    \'Rakesh Vijay Charles Daniel Tyler\' class. "ByteString"\r    (\'Rakesh Vijay Charles Daniel Tyler\' at:2) class. "Character (a)"\r    World class . "WorldMorph"\r    Magnitude class. "Magnitude class"\r    Magnitude class class. "Metaclass"\r    nil class. "UndefinedObject"\r    5 species. "SmallInteger"\r    123456789000 species. "SmallInteger"\r    #aName species. "ByteString"\r " Яка різниця між повідомленнями class i species ? \r\r    Випробуйте різні способи відкривання браузера класів: за допомогою меню чи програмно \r     Виконайте за допомогою <Do it>\r"\r    ClyFullBrowserMorph open. \r    ClyFullBrowserMorph openOnClass: Date. \r    ClyFullBrowserMorph openOnClass: VolumeShape  selector:  #volume. \r\r" ------ МЕТОДИ КЛАСУ, КОНСТРУКТОРИ\r  Виконайте за допомогою <Print It>. Запропонуйте власні приклади. "\r\r    Array new: 10. "#(nil nil nil nil nil nil nil nil nil nil)"        \r    OrderedCollection  new. "an OrderedCollection()"\r    Date today. "29 September 2025"\r    Time now. "10:28:52.422 am"\r    UIManager default  request:\'How are you?\' initialAnswer:\'I\'\'m fine!\'. "\'I\'\'m fine!\'"\r    Integer readFrom: \'2013  1925\'. "2013"\r    Integer primesUpTo: 100. "#(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97)"\r    Rectangle origin:0@0 corner:200@100. "(0@0) corner: (200@100)"\r    Date nameOfMonth:12. "#December"\r    Date dayOfWeek: #Friday. "6"\r    Date orthodoxEasterDateFor: 2022. "24 April 2022"\r\r\r   \r"Інсталюйте вказані нижче МЕТОДИ КЛАСУ Date:\r  перенесіть копію тексту визначення методу з робочого вікна в браузер класів.\r\r""!Date class methodsFor: \'specific inquiries\' stamp: \'CamilloBruni 8/22/2013 19:47\'!""\r\rorthodoxEasterDateFor: year\r ""  compute the easter date according to the rules of the orthodox calendar.\r    source:       http://www.smart.net/~mmontes/ortheast.html   ""\r     | r1 r2 r3 r4 ra rb r5 rc date |\r\r    r1 := year \\\\ 19.\r    r2 := year \\\\ 4.\r    r3 := year \\\\ 7.\r    ra := 19*r1 + 16.\r    r4 := ra \\\\ 30.\r    rb := r2 + r2 + (4*r3) + (6*r4).\r    r5 := rb \\\\ 7.\r    rc := r4 + r5.\r    date := self year: year month: 4 day: 3.\r    ^date addDays: rc.\r""--------------------------------------------------------------------------------------""\r""!Date class methodsFor: \'specific inquiries\' stamp: \'CamilloBruni 8/22/2013 19:48\'!""\r\reasterDateFor: year\r ""  compute the easter date.\r    source: Physikalisch-Technische Bundesanstalt Braunschweig.\r    Lichtenberg, H.: Zur Interpretation der Gaussschen Osterformel und ihrer Ausnahmeregeln, Historia Mathematica 24 (1997), pp. 441-444\r      http://www.ptb.de/de/org/4/44/441/oste.htm  ""\r\r  | k m s a d r og sz oe day |\r\r  k := year // 100.\r  m := 15 + (3*k + 3//4) - (8*k + 13//25).\r   s := 2 - (3*k + 3// 4).\r  a := year \\\\ 19.\r  d := 19*a + m \\\\ 30.\r  r := d//29 + ((d//28) - (d//29)* (a// 11)).\r\r  og := 21 + d - r.\r  sz := 7 - (year//4 + year + s\\\\7).\r  oe := 7 - (og - sz\\\\7).\r  day := og + oe.\r  ^day <= 31\r    ifTrue: [ Date year: year month: 3 day: day ]\r    ifFalse: [ Date year: year month: 4 day: day - 31 ].\r"\r\r"Знайдіть роки, коли святкування припадають на один день."\r\ryearsWithMatchingEasterFrom: startYear to: endYear\r\r    | matchingYears orthodoxDate catholicDate |\r    matchingYears := OrderedCollection new.\r    (startYear to: endYear) do: [:year |\r        orthodoxDate := self orthodoxEasterDateFor: year.\r        catholicDate := self easterDateFor: year.\r        (orthodoxDate = catholicDate) ifTrue: [\r            matchingYears add: year\r        ].\r    ].\r    ^matchingYears asArray\r\rDate yearsWithMatchingEasterFrom: 2000 to: 2050. "#(2001 2004 2007 2010 2011 2014 2017 2025 2028 2031 2034 2037 2038 2041 2045 2048)"\r\r" ------ РЕКУРСІЯ\r  Додайте до класу Integer і випробуйте різні методи обчислення чисел  Фібоначчі.\r  Запропонуйте власні. Порівняйте їхню ефективність.      \r  Перед випробуванням fibonacci ЗБЕРЕЖІТЬ ІМІДЖ СИСТЕМИ! Він може зайняти Ваш комп на тиждень.  "\r\r" * ------- "\rfibonacci\r        "Answer the nth fibonacci number, where n is the receiver."\r    ^self < 2\r        ifTrue: [1]\r        ifFalse:[(self - 1) fibonacci + (self - 2) fibonacci]\r" * ------- "\rfibo\r        "Frontend function to call fibStart: with: .\r         Answer the nth fibonacci number, where n is the receiver."\r    ^self fibStart:1 with:1\r" * ------- "\rfibStart: n1 with: n2\r        "Private - Calculate the n-th Fibonacci number, where\r         n is the receiver, n1 is previous Fibonacci number\r         and n2 - the preprevious one."\r ^ (self < 2)\r        ifTrue: [ n1 ]\r        ifFalse:[ (self - 1) fibStart: n1+n2 with:n1 ]\r\r3 fibStart: 1 with: 10  "12"\r4 fibo "5"\r12 fibonacci "233"\r\r\r"\r\r\r<fibStart:with:>\rЦе рекурсивний метод, який обчислює n-те число послідовності Фібоначчі, використовуючи два допоміжні параметри — n1 (попереднє значення) і n2 (передпопереднє значення). На кожному кроці рекурсії відбувається виклик:\r(self - 1) fibStart: n1 + n2 with: n1 — таким чином, наступний етап отримує нові значення, де поточне число стає сумою двох попередніх.\rТакий підхід дозволяє виконувати обчислення без повторних підрахунків уже відомих значень, тому алгоритм має лінійну складність O(n). Він працює швидко навіть для великих n і потребує мінімум пам’яті — лише для рекурсивних викликів (глибина дорівнює n).\r\r<fibo>\rЦе допоміжний метод, який просто викликає fibStart:with: із початковими значеннями. Його мета — спростити виклик функції, щоб не потрібно було вручну задавати перші два числа послідовності. Фактично, він працює так само, як і fibStart:with:, але зручніший у використанні, коли потрібно просто отримати n-те число Фібоначчі.\r\r<fibonacci>\rЦей варіант використовує класичне рекурсивне визначення:\rF(n) = F(n - 1) + F(n - 2)\rМетод простий у розумінні, але дуже неефективний для великих n, оскільки він не запам’ятовує вже обчислені значення і багаторазово виконує ті самі обчислення. Через це його складність є експоненційною — приблизно O(2ⁿ). При великих значеннях n така реалізація значно навантажує процесор і стек викликів, тому практично використовується лише для навчальних цілей або демонстрацій.\r"\r\r"------------------------------------------------------------------------------------\r ------ СТВОРЕННЯ, ОПРАЦЮВАННЯ КОЛЕКЦІЙ\r  У текстовому файлі записано інформацію про матрицю цілих чисел: розміри\r  матриці в першому рядку файла, у всіх наступних рядках - рядки матриці.}\r  Прочитати матрицю, знайти максимальні елементи кожного рядка і зберегти\r  їх у файлі. Надрукувати максимальний елемент цілої матриці."\r\r"Наведений нижче код можна виконати безпосередньо в робочому вікні,\r проте,  доцільно зробити його методом власного навчального класу."\r\r| matr fStream fName n m mMatr mLines |\r        "Вибір файла за допомогою діалогу"\r    (fName:=UIManager default\r\t\t\tchooseFullFileNameMatching: nil \r\t\t\tlabel: \'Виберіть файл з числовими даними\' ) isNil\r        ifTrue: [ ^\'Ви не вибрали файла\' ]. \r        fStream := fName asFileReference readStream.\r\t        "Введення даних"\r \t    n := Integer readFrom: fStream.  \r\t    matr := Array new: n.\r\t    m := Integer readFrom: fStream.\r\t    matr := matr collect: [ :x | Array new: m ]. \r\t    1 to: n do: [ :i |  fStream nextLine.\r \t\t     matr at: i put: (\r\t\t\t\t (matr at: i) collect: [ :x |  \r\t\t\t\t\t\tInteger readFrom: fStream. ]\r\t\t\t\t\t )\t ].\r    fStream close. matr inspect.\r        "Обчислення максимальних елементів"\r    mLines:=matr collect: [ :r | r inject: (r at: 1) into: [ :x :y | x max: y] ].\r    mMatr:=mLines at: 1.\r    mLines do: [ :x | x > mMatr ifTrue: [ mMatr := x ] ].\r        "Побудова імені файла результатів, збереження"\r    fName at: fName size - 4 put: $_ .\r    fStream := fName asFileReference writeStream.\r    mLines do: [ :x | x printOn: fStream. fStream cr ].\r    fStream close.\r    ^mMatr .  \r\r" Поясніть код, наведений вище (кожне повідомлення!):\r\r\tУ цьому коді ми працюємо з матрицею чисел, зчитаною з файлу. Спершу оголошуємо локальні змінні для зберігання самої матриці, потоку файлу, імені файлу, кількості рядків і стовпців, а також для проміжних результатів. Далі відкривається діалог для вибору файлу користувачем. Якщо файл не обрано, метод одразу повертає повідомлення про це і подальше виконання коду зупиняється.\r\rПісля цього створюється потік для читання файлу. Перше число з файлу визначає кількість рядків матриці, а друге число — кількість стовпців. У початковій версії матриця реалізується як масив масивів: спершу створюємо масив для рядків, а потім кожен рядок заповнюємо окремим масивом стовпців. Потік закривається після зчитування даних, і відкривається інспектор для перегляду структури матриці.\r\rЩоб знайти максимуми рядків, кожен рядок обробляється за допомогою методу inject, який проходить усі елементи рядка і визначає найбільше значення. Потім, перебираючи всі максимуми рядків, знаходиться загальний максимум усієї матриці. Після обробки результатів ім’я файлу змінюється для збереження результатів у новий файл, відкривається потік на запис, і кожен максимум рядка записується в файл на окремий рядок. Потім потік закривається. Нарешті, метод повертає максимальний елемент усієї матриці.\r\r   Як можна замінити масив масивів на екземпляр класу Matrix?:\r\tЯкщо використовувати клас Matrix, код можна зробити більш компактним і зручним. Клас Matrix зберігає матрицю як єдину структуру n × m, і доступ до елементів відбувається через at: i at: j, що виключає необхідність створювати масив масивів. Спочатку відкриваємо потік для читання файлу і зчитуємо розміри матриці. Потім створюємо об’єкт Matrix відповідного розміру і заповнюємо його числами з файлу. Далі, перебираючи рядки та стовпці, за допомогою вкладених inject визначаємо максимальні значення для кожного рядка та загальний максимум матриці. Результат повертається як вихідний максимум. Такий підхід дозволяє робити код більш структурованим і компактним, позбавляє зайвих проміжних масивів і робить роботу з матрицею наочнішою.\r======================================================"\r\r"------ АДРЕСНА КНИГА\r Приклад створення і використання адресної книги, описаний у одній з лекцій. \r Пригадуєте, спочатку оголошуємо глобальну змінну, що міститиме впорядковану \r колекцію масивів з трьох рядків. Спосіб порівняння описує бінарний блок."\r\r    Smalltalk globals at: #AddressBook\r              put:(SortedCollection sortBlock:[:a :b | (a at:1)<=(b at:1)]).\r\r" * --- Тепер до книги можна додавати записи. "\r\r    AddressBook\r            add: #(\'Ruth\' \'Babe\' \'456 Mudville Flats\');\r            add: #(\'Smith\' \'John\' \'12/5 Park Ave\');\r            add: #(\'Jexon\' \'John\' \'5 Baverli Hills\');\r            add: #(\'Adams\' \'John\' \'1 Hell str\');\r            add: #(\'Taylor\' \'Babe\' \'2a/35 Deribas str\');\r            add: #(\'Greg\' \'Voss\' \'12345 the USA\');\r\r            add: #(\'Ivanov\' \'Nazar\' \'Kyiv, Main Str 25\');\r            add: #(\'Koval\' \'Bohdan\' \'Lviv, Freedom Ave 12\');\r            add: #(\'Shevchenko\' \'Nazar\' \'Kharkiv, Central Park 3\');\r            add: #(\'Petrenko\' \'Nazar\' \'Odesa, Sea St 8\').\r\r" * --- Додайте власні записи. Видрукуйте вміст книги (код запропоновано нижче).  "\r\r\r\r   | s w |  s := WriteStream on: String new.\r    AddressBook do:[:x | x do:\r        [ :y | s nextPutAll: y; tab; tab.].\r        s cr. ].\r  w := Workspace openLabel: \'My Address Book\'.\r  w contents: s contents.\r\r" * ----  Наступне завдання - надрукувати список прізвищ людей з однаковими іменами. \r              Приклад демонструє різні способи перебору та перетворення колекцій."\r\r | firstNames duplicates |\r    firstNames:=Bag new.        "утворимо торбу імен"\r    AddressBook do: [ :entry | firstNames add: (entry at: 2) ].\r        "виберемо ті імена, які зустрічаються більше одного разу"\r    duplicates:=firstNames select:\r        [ :name | (firstNames occurrencesOf: name)>1 ].\r            "і впорядкуємо їх"\r    duplicates:=duplicates asSet asSortedCollection.\r        "друкуємо імена та відповідні їм прізвища"\r    duplicates do: [ :first | first printOn: Transcript. Transcript show:\'==>\'.\r        AddressBook do: [ :entry | (entry at: 2)=first\r            ifTrue: [ Transcript show:\' \'. (entry at: 1) printOn: Transcript ] ].\r        Transcript cr ]. Transcript show:\' \'.\r\r"Поясніть перетворення, що відбуваються в цьому фрагменті. \r   Запропонуйте власні варіанти використання та перетворення колекцій. \r   Оформіть запропоновані вище фрагменти як методи навчального класу."\r\r"Власні варіанти використання та перетворення колекцій:\r1. Пошук усіх записів за містом:\rAddressBook select: [:entry | (entry at: 3) includesSubstring: \'Kyiv\'].\r2. \r"\r\r"------ ДОДАВАННЯ АДРЕС\r  Можливо, додавання записів до AddressBook за допомогою явного програмування \r  виглядає не надто привабливо. Використайте з цією метою діалоги "\r\r| a b c | \ra := UIManager default request: \'Input first name\'.\rb := UIManager default request: \'Input second name\'.\rc := UIManager default request: \'Input address\'.\ra isNil | b isNil | c isNil ifFalse: [ AddressBook add: (Array with:a with:b with:c)].\r\r"Додайте до книги декілька нових записів, знову видрукуйте її. "\r                                    \r" Поміркуйте, як зробити зручнішим звертання до діалогу додавання адрес та друку адресної книги. "\r\r\r"Що станеться, якщо виконати наступний код? Випробуйте. "\r    Smalltalk globals removeKey:#AddressBook.\r\r"Відповідь: Видалиться ключ #AddressBook."\r\r "------ ПЕРЕТВОРЕННЯ (ПЕРЕВТІЛЕННЯ) ОБ\'ЄКТІВ\r   Виконайте за допомогою Do It. "\r\r | a b c|\r    a := OrderedCollection new.\r    b := Cylinder  new.\r    c := Array with: a with: b with: b.\r    Transcript show: \'Old Array is = \'.\r    c do: [ :x | Transcript show: \'     \'. x printOn: Transcript ].\r    Transcript cr.\r    a become: b.\r    Transcript show: \'New Array is = \'.\r    c do: [ :x | Transcript show: \'     \'. x printOn: Transcript ].\r    Transcript cr; show:\' \'. "Unknown variable"\r" Поясніть дію методу become:. Чи можна замість нього користуватися звичайним присвоєнням? Наведіть власні приклади. "\r\r"Відповідь: Він міняє всі посилання на два об’єкти місцями у всій системі.  \r  Не можна замість become використовувати звичайне присвоєння, адже такого ефекту не можливо буде досягнути."\r\r\r\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-10-05T22:12:24.151+03:00' ],
		#self : OmReference [ '8' ]
	},
	#content : '"--------------------------------------------------------------------------------------\r*                      ЛАБОРОТОРНА РОБОТА 3\r*                 Тема: КЛАСИ ТА МЕТОДИ. КОЛЕКЦІЇ\r*\r*  Завдання до лабораторної роботи:\r*     1. Виконайте наведені нижче приклади, збережіть і поясніть отримані результати.\r*     2. Випробуйте різноманітні способи додавання нових класів до системи.\r*     3. Навчіться доповнювати функціональність класів.\r*     4. Випробуйте методи опрацювання колекцій.\r*\r\r    Виконайте за допомогою <Print it> \r\r ------ ПРИНАЛЕЖНІСТЬ КЛАСОВІ, ІЄРАРХІЯ КЛАСІВ\r"\r    #(Francesca Jackie Marisa Bree) class. "Array"\r    (#(Francesca Jackie Marisa Bree) at:2) class. "ByteSymbol"\r    \'Rakesh Vijay Charles Daniel Tyler\' class. "ByteString"\r    (\'Rakesh Vijay Charles Daniel Tyler\' at:2) class. "Character (a)"\r    World class . "WorldMorph"\r    Magnitude class. "Magnitude class"\r    Magnitude class class. "Metaclass"\r    nil class. "UndefinedObject"\r    5 species. "SmallInteger"\r    123456789000 species. "SmallInteger"\r    #aName species. "ByteString"\r " Яка різниця між повідомленнями class i species ? \r\r    Випробуйте різні способи відкривання браузера класів: за допомогою меню чи програмно \r     Виконайте за допомогою <Do it>\r"\r    ClyFullBrowserMorph open. \r    ClyFullBrowserMorph openOnClass: Date. \r    ClyFullBrowserMorph openOnClass: VolumeShape  selector:  #volume. \r\r" ------ МЕТОДИ КЛАСУ, КОНСТРУКТОРИ\r  Виконайте за допомогою <Print It>. Запропонуйте власні приклади. "\r\r    Array new: 10. "#(nil nil nil nil nil nil nil nil nil nil)"        \r    OrderedCollection  new. "an OrderedCollection()"\r    Date today. "29 September 2025"\r    Time now. "10:28:52.422 am"\r    UIManager default  request:\'How are you?\' initialAnswer:\'I\'\'m fine!\'. "\'I\'\'m fine!\'"\r    Integer readFrom: \'2013  1925\'. "2013"\r    Integer primesUpTo: 100. "#(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97)"\r    Rectangle origin:0@0 corner:200@100. "(0@0) corner: (200@100)"\r    Date nameOfMonth:12. "#December"\r    Date dayOfWeek: #Friday. "6"\r    Date orthodoxEasterDateFor: 2022. "24 April 2022"\r\r\r   \r"Інсталюйте вказані нижче МЕТОДИ КЛАСУ Date:\r  перенесіть копію тексту визначення методу з робочого вікна в браузер класів.\r\r""!Date class methodsFor: \'specific inquiries\' stamp: \'CamilloBruni 8/22/2013 19:47\'!""\r\rorthodoxEasterDateFor: year\r ""  compute the easter date according to the rules of the orthodox calendar.\r    source:       http://www.smart.net/~mmontes/ortheast.html   ""\r     | r1 r2 r3 r4 ra rb r5 rc date |\r\r    r1 := year \\\\ 19.\r    r2 := year \\\\ 4.\r    r3 := year \\\\ 7.\r    ra := 19*r1 + 16.\r    r4 := ra \\\\ 30.\r    rb := r2 + r2 + (4*r3) + (6*r4).\r    r5 := rb \\\\ 7.\r    rc := r4 + r5.\r    date := self year: year month: 4 day: 3.\r    ^date addDays: rc.\r""--------------------------------------------------------------------------------------""\r""!Date class methodsFor: \'specific inquiries\' stamp: \'CamilloBruni 8/22/2013 19:48\'!""\r\reasterDateFor: year\r ""  compute the easter date.\r    source: Physikalisch-Technische Bundesanstalt Braunschweig.\r    Lichtenberg, H.: Zur Interpretation der Gaussschen Osterformel und ihrer Ausnahmeregeln, Historia Mathematica 24 (1997), pp. 441-444\r      http://www.ptb.de/de/org/4/44/441/oste.htm  ""\r\r  | k m s a d r og sz oe day |\r\r  k := year // 100.\r  m := 15 + (3*k + 3//4) - (8*k + 13//25).\r   s := 2 - (3*k + 3// 4).\r  a := year \\\\ 19.\r  d := 19*a + m \\\\ 30.\r  r := d//29 + ((d//28) - (d//29)* (a// 11)).\r\r  og := 21 + d - r.\r  sz := 7 - (year//4 + year + s\\\\7).\r  oe := 7 - (og - sz\\\\7).\r  day := og + oe.\r  ^day <= 31\r    ifTrue: [ Date year: year month: 3 day: day ]\r    ifFalse: [ Date year: year month: 4 day: day - 31 ].\r"\r\r"Знайдіть роки, коли святкування припадають на один день."\r\ryearsWithMatchingEasterFrom: startYear to: endYear\r\r    | matchingYears orthodoxDate catholicDate |\r    matchingYears := OrderedCollection new.\r    (startYear to: endYear) do: [:year |\r        orthodoxDate := self orthodoxEasterDateFor: year.\r        catholicDate := self easterDateFor: year.\r        (orthodoxDate = catholicDate) ifTrue: [\r            matchingYears add: year\r        ].\r    ].\r    ^matchingYears asArray\r\rDate yearsWithMatchingEasterFrom: 2000 to: 2050. "#(2001 2004 2007 2010 2011 2014 2017 2025 2028 2031 2034 2037 2038 2041 2045 2048)"\r\r" ------ РЕКУРСІЯ\r  Додайте до класу Integer і випробуйте різні методи обчислення чисел  Фібоначчі.\r  Запропонуйте власні. Порівняйте їхню ефективність.      \r  Перед випробуванням fibonacci ЗБЕРЕЖІТЬ ІМІДЖ СИСТЕМИ! Він може зайняти Ваш комп на тиждень.  "\r\r" * ------- "\rfibonacci\r        "Answer the nth fibonacci number, where n is the receiver."\r    ^self < 2\r        ifTrue: [1]\r        ifFalse:[(self - 1) fibonacci + (self - 2) fibonacci]\r" * ------- "\rfibo\r        "Frontend function to call fibStart: with: .\r         Answer the nth fibonacci number, where n is the receiver."\r    ^self fibStart:1 with:1\r" * ------- "\rfibStart: n1 with: n2\r        "Private - Calculate the n-th Fibonacci number, where\r         n is the receiver, n1 is previous Fibonacci number\r         and n2 - the preprevious one."\r ^ (self < 2)\r        ifTrue: [ n1 ]\r        ifFalse:[ (self - 1) fibStart: n1+n2 with:n1 ]\r\r3 fibStart: 1 with: 10  "12"\r4 fibo "5"\r12 fibonacci "233"\r\r\r"\r\r\r<fibStart:with:>\rЦе рекурсивний метод, який обчислює n-те число послідовності Фібоначчі, використовуючи два допоміжні параметри — n1 (попереднє значення) і n2 (передпопереднє значення). На кожному кроці рекурсії відбувається виклик:\r(self - 1) fibStart: n1 + n2 with: n1 — таким чином, наступний етап отримує нові значення, де поточне число стає сумою двох попередніх.\rТакий підхід дозволяє виконувати обчислення без повторних підрахунків уже відомих значень, тому алгоритм має лінійну складність O(n). Він працює швидко навіть для великих n і потребує мінімум пам’яті — лише для рекурсивних викликів (глибина дорівнює n).\r\r<fibo>\rЦе допоміжний метод, який просто викликає fibStart:with: із початковими значеннями. Його мета — спростити виклик функції, щоб не потрібно було вручну задавати перші два числа послідовності. Фактично, він працює так само, як і fibStart:with:, але зручніший у використанні, коли потрібно просто отримати n-те число Фібоначчі.\r\r<fibonacci>\rЦей варіант використовує класичне рекурсивне визначення:\rF(n) = F(n - 1) + F(n - 2)\rМетод простий у розумінні, але дуже неефективний для великих n, оскільки він не запам’ятовує вже обчислені значення і багаторазово виконує ті самі обчислення. Через це його складність є експоненційною — приблизно O(2ⁿ). При великих значеннях n така реалізація значно навантажує процесор і стек викликів, тому практично використовується лише для навчальних цілей або демонстрацій.\r"\r\r"------------------------------------------------------------------------------------\r ------ СТВОРЕННЯ, ОПРАЦЮВАННЯ КОЛЕКЦІЙ\r  У текстовому файлі записано інформацію про матрицю цілих чисел: розміри\r  матриці в першому рядку файла, у всіх наступних рядках - рядки матриці.}\r  Прочитати матрицю, знайти максимальні елементи кожного рядка і зберегти\r  їх у файлі. Надрукувати максимальний елемент цілої матриці."\r\r"Наведений нижче код можна виконати безпосередньо в робочому вікні,\r проте,  доцільно зробити його методом власного навчального класу."\r\r| matr fStream fName n m mMatr mLines |\r        "Вибір файла за допомогою діалогу"\r    (fName:=UIManager default\r\t\t\tchooseFullFileNameMatching: nil \r\t\t\tlabel: \'Виберіть файл з числовими даними\' ) isNil\r        ifTrue: [ ^\'Ви не вибрали файла\' ]. \r        fStream := fName asFileReference readStream.\r\t        "Введення даних"\r \t    n := Integer readFrom: fStream.  \r\t    matr := Array new: n.\r\t    m := Integer readFrom: fStream.\r\t    matr := matr collect: [ :x | Array new: m ]. \r\t    1 to: n do: [ :i |  fStream nextLine.\r \t\t     matr at: i put: (\r\t\t\t\t (matr at: i) collect: [ :x |  \r\t\t\t\t\t\tInteger readFrom: fStream. ]\r\t\t\t\t\t )\t ].\r    fStream close. matr inspect.\r        "Обчислення максимальних елементів"\r    mLines:=matr collect: [ :r | r inject: (r at: 1) into: [ :x :y | x max: y] ].\r    mMatr:=mLines at: 1.\r    mLines do: [ :x | x > mMatr ifTrue: [ mMatr := x ] ].\r        "Побудова імені файла результатів, збереження"\r    fName at: fName size - 4 put: $_ .\r    fStream := fName asFileReference writeStream.\r    mLines do: [ :x | x printOn: fStream. fStream cr ].\r    fStream close.\r    ^mMatr .  \r\r" Поясніть код, наведений вище (кожне повідомлення!):\r\r\tУ цьому коді ми працюємо з матрицею чисел, зчитаною з файлу. Спершу оголошуємо локальні змінні для зберігання самої матриці, потоку файлу, імені файлу, кількості рядків і стовпців, а також для проміжних результатів. Далі відкривається діалог для вибору файлу користувачем. Якщо файл не обрано, метод одразу повертає повідомлення про це і подальше виконання коду зупиняється.\r\rПісля цього створюється потік для читання файлу. Перше число з файлу визначає кількість рядків матриці, а друге число — кількість стовпців. У початковій версії матриця реалізується як масив масивів: спершу створюємо масив для рядків, а потім кожен рядок заповнюємо окремим масивом стовпців. Потік закривається після зчитування даних, і відкривається інспектор для перегляду структури матриці.\r\rЩоб знайти максимуми рядків, кожен рядок обробляється за допомогою методу inject, який проходить усі елементи рядка і визначає найбільше значення. Потім, перебираючи всі максимуми рядків, знаходиться загальний максимум усієї матриці. Після обробки результатів ім’я файлу змінюється для збереження результатів у новий файл, відкривається потік на запис, і кожен максимум рядка записується в файл на окремий рядок. Потім потік закривається. Нарешті, метод повертає максимальний елемент усієї матриці.\r\r   Як можна замінити масив масивів на екземпляр класу Matrix?:\r\tЯкщо використовувати клас Matrix, код можна зробити більш компактним і зручним. Клас Matrix зберігає матрицю як єдину структуру n × m, і доступ до елементів відбувається через at: i at: j, що виключає необхідність створювати масив масивів. Спочатку відкриваємо потік для читання файлу і зчитуємо розміри матриці. Потім створюємо об’єкт Matrix відповідного розміру і заповнюємо його числами з файлу. Далі, перебираючи рядки та стовпці, за допомогою вкладених inject визначаємо максимальні значення для кожного рядка та загальний максимум матриці. Результат повертається як вихідний максимум. Такий підхід дозволяє робити код більш структурованим і компактним, позбавляє зайвих проміжних масивів і робить роботу з матрицею наочнішою.\r======================================================"\r\r"------ АДРЕСНА КНИГА\r Приклад створення і використання адресної книги, описаний у одній з лекцій. \r Пригадуєте, спочатку оголошуємо глобальну змінну, що міститиме впорядковану \r колекцію масивів з трьох рядків. Спосіб порівняння описує бінарний блок."\r\r    Smalltalk globals at: #AddressBook\r              put:(SortedCollection sortBlock:[:a :b | (a at:1)<=(b at:1)]).\r\r" * --- Тепер до книги можна додавати записи. "\r\r    AddressBook\r            add: #(\'Ruth\' \'Babe\' \'456 Mudville Flats\');\r            add: #(\'Smith\' \'John\' \'12/5 Park Ave\');\r            add: #(\'Jexon\' \'John\' \'5 Baverli Hills\');\r            add: #(\'Adams\' \'John\' \'1 Hell str\');\r            add: #(\'Taylor\' \'Babe\' \'2a/35 Deribas str\');\r            add: #(\'Greg\' \'Voss\' \'12345 the USA\');\r\r            add: #(\'Ivanov\' \'Nazar\' \'Kyiv, Main Str 25\');\r            add: #(\'Koval\' \'Bohdan\' \'Lviv, Freedom Ave 12\');\r            add: #(\'Shevchenko\' \'Nazar\' \'Kharkiv, Central Park 3\');\r            add: #(\'Petrenko\' \'Nazar\' \'Odesa, Sea St 8\').\r\r" * --- Додайте власні записи. Видрукуйте вміст книги (код запропоновано нижче).  "\r\r\r\r   | s w |  s := WriteStream on: String new.\r    AddressBook do:[:x | x do:\r        [ :y | s nextPutAll: y; tab; tab.].\r        s cr. ].\r  w := Workspace openLabel: \'My Address Book\'.\r  w contents: s contents.\r\r" * ----  Наступне завдання - надрукувати список прізвищ людей з однаковими іменами. \r              Приклад демонструє різні способи перебору та перетворення колекцій."\r\r | firstNames duplicates |\r    firstNames:=Bag new.        "утворимо торбу імен"\r    AddressBook do: [ :entry | firstNames add: (entry at: 2) ].\r        "виберемо ті імена, які зустрічаються більше одного разу"\r    duplicates:=firstNames select:\r        [ :name | (firstNames occurrencesOf: name)>1 ].\r            "і впорядкуємо їх"\r    duplicates:=duplicates asSet asSortedCollection.\r        "друкуємо імена та відповідні їм прізвища"\r    duplicates do: [ :first | first printOn: Transcript. Transcript show:\'==>\'.\r        AddressBook do: [ :entry | (entry at: 2)=first\r            ifTrue: [ Transcript show:\' \'. (entry at: 1) printOn: Transcript ] ].\r        Transcript cr ]. Transcript show:\' \'.\r\r"Поясніть перетворення, що відбуваються в цьому фрагменті. \r   Запропонуйте власні варіанти використання та перетворення колекцій. \r   Оформіть запропоновані вище фрагменти як методи навчального класу."\r\r"Власні варіанти використання та перетворення колекцій:\r""1. Пошук за містом""\rAddressBook select: [:entry | (entry at: 3) includesSubstring: \'Kyiv\'].\r\r""2. Заміна імені Nazar на Nazarii""\rAddressBook do: [:entry | (entry at: 2) = \'Nazar\' ifTrue: [ entry at: 2 put: \'Nazarii\' ]].\r\r""3. Унікальні імена""\r(AddressBook collect: [:entry | entry at: 2]) asSet.\r"\r\r"------ ДОДАВАННЯ АДРЕС\r  Можливо, додавання записів до AddressBook за допомогою явного програмування \r  виглядає не надто привабливо. Використайте з цією метою діалоги "\r\r| a b c | \ra := UIManager default request: \'Input first name\'.\rb := UIManager default request: \'Input second name\'.\rc := UIManager default request: \'Input address\'.\ra isNil | b isNil | c isNil ifFalse: [ AddressBook add: (Array with:a with:b with:c)].\r\r"Додайте до книги декілька нових записів, знову видрукуйте її. "\r                                    \r" Поміркуйте, як зробити зручнішим звертання до діалогу додавання адрес та друку адресної книги. "\r\r\r"Що станеться, якщо виконати наступний код? Випробуйте. "\r    Smalltalk globals removeKey:#AddressBook.\r\r"Відповідь: Видалиться ключ #AddressBook."\r\r "------ ПЕРЕТВОРЕННЯ (ПЕРЕВТІЛЕННЯ) ОБ\'ЄКТІВ\r   Виконайте за допомогою Do It. "\r\r | a b c|\r    a := OrderedCollection new.\r    b := Cylinder  new.\r    c := Array with: a with: b with: b.\r    Transcript show: \'Old Array is = \'.\r    c do: [ :x | Transcript show: \'     \'. x printOn: Transcript ].\r    Transcript cr.\r    a become: b.\r    Transcript show: \'New Array is = \'.\r    c do: [ :x | Transcript show: \'     \'. x printOn: Transcript ].\r    Transcript cr; show:\' \'. "Unknown variable"\r" Поясніть дію методу become:. Чи можна замість нього користуватися звичайним присвоєнням? Наведіть власні приклади. "\r\r"Відповідь: Він міняє всі посилання на два об’єкти місцями у всій системі.  \r  Не можна замість become використовувати звичайне присвоєння, адже такого ефекту не можливо буде досягнути."\r\r\r\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-10-05T22:12:46.178+03:00' ],
		#self : OmReference [ '9' ]
	},
	#content : '"--------------------------------------------------------------------------------------\r*                      ЛАБОРОТОРНА РОБОТА 3\r*                 Тема: КЛАСИ ТА МЕТОДИ. КОЛЕКЦІЇ\r*\r*  Завдання до лабораторної роботи:\r*     1. Виконайте наведені нижче приклади, збережіть і поясніть отримані результати.\r*     2. Випробуйте різноманітні способи додавання нових класів до системи.\r*     3. Навчіться доповнювати функціональність класів.\r*     4. Випробуйте методи опрацювання колекцій.\r*\r\r    Виконайте за допомогою <Print it> \r\r ------ ПРИНАЛЕЖНІСТЬ КЛАСОВІ, ІЄРАРХІЯ КЛАСІВ\r"\r    #(Francesca Jackie Marisa Bree) class. "Array"\r    (#(Francesca Jackie Marisa Bree) at:2) class. "ByteSymbol"\r    \'Rakesh Vijay Charles Daniel Tyler\' class. "ByteString"\r    (\'Rakesh Vijay Charles Daniel Tyler\' at:2) class. "Character (a)"\r    World class . "WorldMorph"\r    Magnitude class. "Magnitude class"\r    Magnitude class class. "Metaclass"\r    nil class. "UndefinedObject"\r    5 species. "SmallInteger"\r    123456789000 species. "SmallInteger"\r    #aName species. "ByteString"\r " Яка різниця між повідомленнями class i species ? \r\r    Випробуйте різні способи відкривання браузера класів: за допомогою меню чи програмно \r     Виконайте за допомогою <Do it>\r"\r    ClyFullBrowserMorph open. \r    ClyFullBrowserMorph openOnClass: Date. \r    ClyFullBrowserMorph openOnClass: VolumeShape  selector:  #volume. \r\r" ------ МЕТОДИ КЛАСУ, КОНСТРУКТОРИ\r  Виконайте за допомогою <Print It>. Запропонуйте власні приклади. "\r\r    Array new: 10. "#(nil nil nil nil nil nil nil nil nil nil)"        \r    OrderedCollection  new. "an OrderedCollection()"\r    Date today. "29 September 2025"\r    Time now. "10:28:52.422 am"\r    UIManager default  request:\'How are you?\' initialAnswer:\'I\'\'m fine!\'. "\'I\'\'m fine!\'"\r    Integer readFrom: \'2013  1925\'. "2013"\r    Integer primesUpTo: 100. "#(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97)"\r    Rectangle origin:0@0 corner:200@100. "(0@0) corner: (200@100)"\r    Date nameOfMonth:12. "#December"\r    Date dayOfWeek: #Friday. "6"\r    Date orthodoxEasterDateFor: 2022. "24 April 2022"\r\r\r   \r"Інсталюйте вказані нижче МЕТОДИ КЛАСУ Date:\r  перенесіть копію тексту визначення методу з робочого вікна в браузер класів.\r\r""!Date class methodsFor: \'specific inquiries\' stamp: \'CamilloBruni 8/22/2013 19:47\'!""\r\rorthodoxEasterDateFor: year\r ""  compute the easter date according to the rules of the orthodox calendar.\r    source:       http://www.smart.net/~mmontes/ortheast.html   ""\r     | r1 r2 r3 r4 ra rb r5 rc date |\r\r    r1 := year \\\\ 19.\r    r2 := year \\\\ 4.\r    r3 := year \\\\ 7.\r    ra := 19*r1 + 16.\r    r4 := ra \\\\ 30.\r    rb := r2 + r2 + (4*r3) + (6*r4).\r    r5 := rb \\\\ 7.\r    rc := r4 + r5.\r    date := self year: year month: 4 day: 3.\r    ^date addDays: rc.\r""--------------------------------------------------------------------------------------""\r""!Date class methodsFor: \'specific inquiries\' stamp: \'CamilloBruni 8/22/2013 19:48\'!""\r\reasterDateFor: year\r ""  compute the easter date.\r    source: Physikalisch-Technische Bundesanstalt Braunschweig.\r    Lichtenberg, H.: Zur Interpretation der Gaussschen Osterformel und ihrer Ausnahmeregeln, Historia Mathematica 24 (1997), pp. 441-444\r      http://www.ptb.de/de/org/4/44/441/oste.htm  ""\r\r  | k m s a d r og sz oe day |\r\r  k := year // 100.\r  m := 15 + (3*k + 3//4) - (8*k + 13//25).\r   s := 2 - (3*k + 3// 4).\r  a := year \\\\ 19.\r  d := 19*a + m \\\\ 30.\r  r := d//29 + ((d//28) - (d//29)* (a// 11)).\r\r  og := 21 + d - r.\r  sz := 7 - (year//4 + year + s\\\\7).\r  oe := 7 - (og - sz\\\\7).\r  day := og + oe.\r  ^day <= 31\r    ifTrue: [ Date year: year month: 3 day: day ]\r    ifFalse: [ Date year: year month: 4 day: day - 31 ].\r"\r\r"Знайдіть роки, коли святкування припадають на один день."\r\ryearsWithMatchingEasterFrom: startYear to: endYear\r\r    | matchingYears orthodoxDate catholicDate |\r    matchingYears := OrderedCollection new.\r    (startYear to: endYear) do: [:year |\r        orthodoxDate := self orthodoxEasterDateFor: year.\r        catholicDate := self easterDateFor: year.\r        (orthodoxDate = catholicDate) ifTrue: [\r            matchingYears add: year\r        ].\r    ].\r    ^matchingYears asArray\r\rDate yearsWithMatchingEasterFrom: 2000 to: 2050. "#(2001 2004 2007 2010 2011 2014 2017 2025 2028 2031 2034 2037 2038 2041 2045 2048)"\r\r" ------ РЕКУРСІЯ\r  Додайте до класу Integer і випробуйте різні методи обчислення чисел  Фібоначчі.\r  Запропонуйте власні. Порівняйте їхню ефективність.      \r  Перед випробуванням fibonacci ЗБЕРЕЖІТЬ ІМІДЖ СИСТЕМИ! Він може зайняти Ваш комп на тиждень.  "\r\r" * ------- "\rfibonacci\r        "Answer the nth fibonacci number, where n is the receiver."\r    ^self < 2\r        ifTrue: [1]\r        ifFalse:[(self - 1) fibonacci + (self - 2) fibonacci]\r" * ------- "\rfibo\r        "Frontend function to call fibStart: with: .\r         Answer the nth fibonacci number, where n is the receiver."\r    ^self fibStart:1 with:1\r" * ------- "\rfibStart: n1 with: n2\r        "Private - Calculate the n-th Fibonacci number, where\r         n is the receiver, n1 is previous Fibonacci number\r         and n2 - the preprevious one."\r ^ (self < 2)\r        ifTrue: [ n1 ]\r        ifFalse:[ (self - 1) fibStart: n1+n2 with:n1 ]\r\r3 fibStart: 1 with: 10  "12"\r4 fibo "5"\r12 fibonacci "233"\r\r\r"\r\r\r<fibStart:with:>\rЦе рекурсивний метод, який обчислює n-те число послідовності Фібоначчі, використовуючи два допоміжні параметри — n1 (попереднє значення) і n2 (передпопереднє значення). На кожному кроці рекурсії відбувається виклик:\r(self - 1) fibStart: n1 + n2 with: n1 — таким чином, наступний етап отримує нові значення, де поточне число стає сумою двох попередніх.\rТакий підхід дозволяє виконувати обчислення без повторних підрахунків уже відомих значень, тому алгоритм має лінійну складність O(n). Він працює швидко навіть для великих n і потребує мінімум пам’яті — лише для рекурсивних викликів (глибина дорівнює n).\r\r<fibo>\rЦе допоміжний метод, який просто викликає fibStart:with: із початковими значеннями. Його мета — спростити виклик функції, щоб не потрібно було вручну задавати перші два числа послідовності. Фактично, він працює так само, як і fibStart:with:, але зручніший у використанні, коли потрібно просто отримати n-те число Фібоначчі.\r\r<fibonacci>\rЦей варіант використовує класичне рекурсивне визначення:\rF(n) = F(n - 1) + F(n - 2)\rМетод простий у розумінні, але дуже неефективний для великих n, оскільки він не запам’ятовує вже обчислені значення і багаторазово виконує ті самі обчислення. Через це його складність є експоненційною — приблизно O(2ⁿ). При великих значеннях n така реалізація значно навантажує процесор і стек викликів, тому практично використовується лише для навчальних цілей або демонстрацій.\r"\r\r"------------------------------------------------------------------------------------\r ------ СТВОРЕННЯ, ОПРАЦЮВАННЯ КОЛЕКЦІЙ\r  У текстовому файлі записано інформацію про матрицю цілих чисел: розміри\r  матриці в першому рядку файла, у всіх наступних рядках - рядки матриці.}\r  Прочитати матрицю, знайти максимальні елементи кожного рядка і зберегти\r  їх у файлі. Надрукувати максимальний елемент цілої матриці."\r\r"Наведений нижче код можна виконати безпосередньо в робочому вікні,\r проте,  доцільно зробити його методом власного навчального класу."\r\r| matr fStream fName n m mMatr mLines |\r        "Вибір файла за допомогою діалогу"\r    (fName:=UIManager default\r\t\t\tchooseFullFileNameMatching: nil \r\t\t\tlabel: \'Виберіть файл з числовими даними\' ) isNil\r        ifTrue: [ ^\'Ви не вибрали файла\' ]. \r        fStream := fName asFileReference readStream.\r\t        "Введення даних"\r \t    n := Integer readFrom: fStream.  \r\t    matr := Array new: n.\r\t    m := Integer readFrom: fStream.\r\t    matr := matr collect: [ :x | Array new: m ]. \r\t    1 to: n do: [ :i |  fStream nextLine.\r \t\t     matr at: i put: (\r\t\t\t\t (matr at: i) collect: [ :x |  \r\t\t\t\t\t\tInteger readFrom: fStream. ]\r\t\t\t\t\t )\t ].\r    fStream close. matr inspect.\r        "Обчислення максимальних елементів"\r    mLines:=matr collect: [ :r | r inject: (r at: 1) into: [ :x :y | x max: y] ].\r    mMatr:=mLines at: 1.\r    mLines do: [ :x | x > mMatr ifTrue: [ mMatr := x ] ].\r        "Побудова імені файла результатів, збереження"\r    fName at: fName size - 4 put: $_ .\r    fStream := fName asFileReference writeStream.\r    mLines do: [ :x | x printOn: fStream. fStream cr ].\r    fStream close.\r    ^mMatr .  \r\r" Поясніть код, наведений вище (кожне повідомлення!):\r\r\tУ цьому коді ми працюємо з матрицею чисел, зчитаною з файлу. Спершу оголошуємо локальні змінні для зберігання самої матриці, потоку файлу, імені файлу, кількості рядків і стовпців, а також для проміжних результатів. Далі відкривається діалог для вибору файлу користувачем. Якщо файл не обрано, метод одразу повертає повідомлення про це і подальше виконання коду зупиняється.\r\rПісля цього створюється потік для читання файлу. Перше число з файлу визначає кількість рядків матриці, а друге число — кількість стовпців. У початковій версії матриця реалізується як масив масивів: спершу створюємо масив для рядків, а потім кожен рядок заповнюємо окремим масивом стовпців. Потік закривається після зчитування даних, і відкривається інспектор для перегляду структури матриці.\r\rЩоб знайти максимуми рядків, кожен рядок обробляється за допомогою методу inject, який проходить усі елементи рядка і визначає найбільше значення. Потім, перебираючи всі максимуми рядків, знаходиться загальний максимум усієї матриці. Після обробки результатів ім’я файлу змінюється для збереження результатів у новий файл, відкривається потік на запис, і кожен максимум рядка записується в файл на окремий рядок. Потім потік закривається. Нарешті, метод повертає максимальний елемент усієї матриці.\r\r   Як можна замінити масив масивів на екземпляр класу Matrix?:\r\tЯкщо використовувати клас Matrix, код можна зробити більш компактним і зручним. Клас Matrix зберігає матрицю як єдину структуру n × m, і доступ до елементів відбувається через at: i at: j, що виключає необхідність створювати масив масивів. Спочатку відкриваємо потік для читання файлу і зчитуємо розміри матриці. Потім створюємо об’єкт Matrix відповідного розміру і заповнюємо його числами з файлу. Далі, перебираючи рядки та стовпці, за допомогою вкладених inject визначаємо максимальні значення для кожного рядка та загальний максимум матриці. Результат повертається як вихідний максимум. Такий підхід дозволяє робити код більш структурованим і компактним, позбавляє зайвих проміжних масивів і робить роботу з матрицею наочнішою.\r======================================================"\r\r"------ АДРЕСНА КНИГА\r Приклад створення і використання адресної книги, описаний у одній з лекцій. \r Пригадуєте, спочатку оголошуємо глобальну змінну, що міститиме впорядковану \r колекцію масивів з трьох рядків. Спосіб порівняння описує бінарний блок."\r\r    Smalltalk globals at: #AddressBook\r              put:(SortedCollection sortBlock:[:a :b | (a at:1)<=(b at:1)]).\r\r" * --- Тепер до книги можна додавати записи. "\r\r    AddressBook\r            add: #(\'Ruth\' \'Babe\' \'456 Mudville Flats\');\r            add: #(\'Smith\' \'John\' \'12/5 Park Ave\');\r            add: #(\'Jexon\' \'John\' \'5 Baverli Hills\');\r            add: #(\'Adams\' \'John\' \'1 Hell str\');\r            add: #(\'Taylor\' \'Babe\' \'2a/35 Deribas str\');\r            add: #(\'Greg\' \'Voss\' \'12345 the USA\');\r\r            add: #(\'Ivanov\' \'Nazar\' \'Kyiv, Main Str 25\');\r            add: #(\'Koval\' \'Bohdan\' \'Lviv, Freedom Ave 12\');\r            add: #(\'Shevchenko\' \'Nazar\' \'Kharkiv, Central Park 3\');\r            add: #(\'Petrenko\' \'Nazar\' \'Odesa, Sea St 8\').\r\r" * --- Додайте власні записи. Видрукуйте вміст книги (код запропоновано нижче).  "\r\r\r\r   | s w |  s := WriteStream on: String new.\r    AddressBook do:[:x | x do:\r        [ :y | s nextPutAll: y; tab; tab.].\r        s cr. ].\r  w := Workspace openLabel: \'My Address Book\'.\r  w contents: s contents.\r\r" * ----  Наступне завдання - надрукувати список прізвищ людей з однаковими іменами. \r              Приклад демонструє різні способи перебору та перетворення колекцій."\r\r | firstNames duplicates |\r    firstNames:=Bag new.        "утворимо торбу імен"\r    AddressBook do: [ :entry | firstNames add: (entry at: 2) ].\r        "виберемо ті імена, які зустрічаються більше одного разу"\r    duplicates:=firstNames select:\r        [ :name | (firstNames occurrencesOf: name)>1 ].\r            "і впорядкуємо їх"\r    duplicates:=duplicates asSet asSortedCollection.\r        "друкуємо імена та відповідні їм прізвища"\r    duplicates do: [ :first | first printOn: Transcript. Transcript show:\'==>\'.\r        AddressBook do: [ :entry | (entry at: 2)=first\r            ifTrue: [ Transcript show:\' \'. (entry at: 1) printOn: Transcript ] ].\r        Transcript cr ]. Transcript show:\' \'.\r\r"Поясніть перетворення, що відбуваються в цьому фрагменті. \r   Запропонуйте власні варіанти використання та перетворення колекцій. \r   Оформіть запропоновані вище фрагменти як методи навчального класу."\r\r\r\r"Власні варіанти використання та перетворення колекцій:\r""1. Пошук за містом""\rAddressBook select: [:entry | (entry at: 3) includesSubstring: \'Kyiv\'].\r\r""2. Заміна імені Nazar на Nazarii""\rAddressBook do: [:entry | (entry at: 2) = \'Nazar\' ifTrue: [ entry at: 2 put: \'Nazarii\' ]].\r\r""3. Унікальні імена""\r(AddressBook collect: [:entry | entry at: 2]) asSet.\r"\r\r"------ ДОДАВАННЯ АДРЕС\r  Можливо, додавання записів до AddressBook за допомогою явного програмування \r  виглядає не надто привабливо. Використайте з цією метою діалоги "\r\r| a b c | \ra := UIManager default request: \'Input first name\'.\rb := UIManager default request: \'Input second name\'.\rc := UIManager default request: \'Input address\'.\ra isNil | b isNil | c isNil ifFalse: [ AddressBook add: (Array with:a with:b with:c)].\r\r"Додайте до книги декілька нових записів, знову видрукуйте її. "\r                                    \r" Поміркуйте, як зробити зручнішим звертання до діалогу додавання адрес та друку адресної книги. "\r\r\r"Що станеться, якщо виконати наступний код? Випробуйте. "\r    Smalltalk globals removeKey:#AddressBook.\r\r"Відповідь: Видалиться ключ #AddressBook."\r\r "------ ПЕРЕТВОРЕННЯ (ПЕРЕВТІЛЕННЯ) ОБ\'ЄКТІВ\r   Виконайте за допомогою Do It. "\r\r | a b c|\r    a := OrderedCollection new.\r    b := Cylinder  new.\r    c := Array with: a with: b with: b.\r    Transcript show: \'Old Array is = \'.\r    c do: [ :x | Transcript show: \'     \'. x printOn: Transcript ].\r    Transcript cr.\r    a become: b.\r    Transcript show: \'New Array is = \'.\r    c do: [ :x | Transcript show: \'     \'. x printOn: Transcript ].\r    Transcript cr; show:\' \'. "Unknown variable"\r" Поясніть дію методу become:. Чи можна замість нього користуватися звичайним присвоєнням? Наведіть власні приклади. "\r\r"Відповідь: Він міняє всі посилання на два об’єкти місцями у всій системі.  \r  Не можна замість become використовувати звичайне присвоєння, адже такого ефекту не можливо буде досягнути."\r\r\r\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-10-05T22:14:56.586+03:00' ],
		#self : OmReference [ '10' ]
	},
	#content : '"--------------------------------------------------------------------------------------\r*                      ЛАБОРОТОРНА РОБОТА 3\r*                 Тема: КЛАСИ ТА МЕТОДИ. КОЛЕКЦІЇ\r*\r*  Завдання до лабораторної роботи:\r*     1. Виконайте наведені нижче приклади, збережіть і поясніть отримані результати.\r*     2. Випробуйте різноманітні способи додавання нових класів до системи.\r*     3. Навчіться доповнювати функціональність класів.\r*     4. Випробуйте методи опрацювання колекцій.\r*\r\r    Виконайте за допомогою <Print it> \r\r ------ ПРИНАЛЕЖНІСТЬ КЛАСОВІ, ІЄРАРХІЯ КЛАСІВ\r"\r    #(Francesca Jackie Marisa Bree) class. "Array"\r    (#(Francesca Jackie Marisa Bree) at:2) class. "ByteSymbol"\r    \'Rakesh Vijay Charles Daniel Tyler\' class. "ByteString"\r    (\'Rakesh Vijay Charles Daniel Tyler\' at:2) class. "Character (a)"\r    World class . "WorldMorph"\r    Magnitude class. "Magnitude class"\r    Magnitude class class. "Metaclass"\r    nil class. "UndefinedObject"\r    5 species. "SmallInteger"\r    123456789000 species. "SmallInteger"\r    #aName species. "ByteString"\r " Яка різниця між повідомленнями class i species ? \r\r    Випробуйте різні способи відкривання браузера класів: за допомогою меню чи програмно \r     Виконайте за допомогою <Do it>\r"\r    ClyFullBrowserMorph open. \r    ClyFullBrowserMorph openOnClass: Date. \r    ClyFullBrowserMorph openOnClass: VolumeShape  selector:  #volume. \r\r" ------ МЕТОДИ КЛАСУ, КОНСТРУКТОРИ\r  Виконайте за допомогою <Print It>. Запропонуйте власні приклади. "\r\r    Array new: 10. "#(nil nil nil nil nil nil nil nil nil nil)"        \r    OrderedCollection  new. "an OrderedCollection()"\r    Date today. "29 September 2025"\r    Time now. "10:28:52.422 am"\r    UIManager default  request:\'How are you?\' initialAnswer:\'I\'\'m fine!\'. "\'I\'\'m fine!\'"\r    Integer readFrom: \'2013  1925\'. "2013"\r    Integer primesUpTo: 100. "#(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97)"\r    Rectangle origin:0@0 corner:200@100. "(0@0) corner: (200@100)"\r    Date nameOfMonth:12. "#December"\r    Date dayOfWeek: #Friday. "6"\r    Date orthodoxEasterDateFor: 2022. "24 April 2022"\r\r\r   \r"Інсталюйте вказані нижче МЕТОДИ КЛАСУ Date:\r  перенесіть копію тексту визначення методу з робочого вікна в браузер класів.\r\r""!Date class methodsFor: \'specific inquiries\' stamp: \'CamilloBruni 8/22/2013 19:47\'!""\r\rorthodoxEasterDateFor: year\r ""  compute the easter date according to the rules of the orthodox calendar.\r    source:       http://www.smart.net/~mmontes/ortheast.html   ""\r     | r1 r2 r3 r4 ra rb r5 rc date |\r\r    r1 := year \\\\ 19.\r    r2 := year \\\\ 4.\r    r3 := year \\\\ 7.\r    ra := 19*r1 + 16.\r    r4 := ra \\\\ 30.\r    rb := r2 + r2 + (4*r3) + (6*r4).\r    r5 := rb \\\\ 7.\r    rc := r4 + r5.\r    date := self year: year month: 4 day: 3.\r    ^date addDays: rc.\r""--------------------------------------------------------------------------------------""\r""!Date class methodsFor: \'specific inquiries\' stamp: \'CamilloBruni 8/22/2013 19:48\'!""\r\reasterDateFor: year\r ""  compute the easter date.\r    source: Physikalisch-Technische Bundesanstalt Braunschweig.\r    Lichtenberg, H.: Zur Interpretation der Gaussschen Osterformel und ihrer Ausnahmeregeln, Historia Mathematica 24 (1997), pp. 441-444\r      http://www.ptb.de/de/org/4/44/441/oste.htm  ""\r\r  | k m s a d r og sz oe day |\r\r  k := year // 100.\r  m := 15 + (3*k + 3//4) - (8*k + 13//25).\r   s := 2 - (3*k + 3// 4).\r  a := year \\\\ 19.\r  d := 19*a + m \\\\ 30.\r  r := d//29 + ((d//28) - (d//29)* (a// 11)).\r\r  og := 21 + d - r.\r  sz := 7 - (year//4 + year + s\\\\7).\r  oe := 7 - (og - sz\\\\7).\r  day := og + oe.\r  ^day <= 31\r    ifTrue: [ Date year: year month: 3 day: day ]\r    ifFalse: [ Date year: year month: 4 day: day - 31 ].\r"\r\r"Знайдіть роки, коли святкування припадають на один день."\r\ryearsWithMatchingEasterFrom: startYear to: endYear\r\r    | matchingYears orthodoxDate catholicDate |\r    matchingYears := OrderedCollection new.\r    (startYear to: endYear) do: [:year |\r        orthodoxDate := self orthodoxEasterDateFor: year.\r        catholicDate := self easterDateFor: year.\r        (orthodoxDate = catholicDate) ifTrue: [\r            matchingYears add: year\r        ].\r    ].\r    ^matchingYears asArray\r\rDate yearsWithMatchingEasterFrom: 2000 to: 2050. "#(2001 2004 2007 2010 2011 2014 2017 2025 2028 2031 2034 2037 2038 2041 2045 2048)"\r\r" ------ РЕКУРСІЯ\r  Додайте до класу Integer і випробуйте різні методи обчислення чисел  Фібоначчі.\r  Запропонуйте власні. Порівняйте їхню ефективність.      \r  Перед випробуванням fibonacci ЗБЕРЕЖІТЬ ІМІДЖ СИСТЕМИ! Він може зайняти Ваш комп на тиждень.  "\r\r" * ------- "\rfibonacci\r        "Answer the nth fibonacci number, where n is the receiver."\r    ^self < 2\r        ifTrue: [1]\r        ifFalse:[(self - 1) fibonacci + (self - 2) fibonacci]\r" * ------- "\rfibo\r        "Frontend function to call fibStart: with: .\r         Answer the nth fibonacci number, where n is the receiver."\r    ^self fibStart:1 with:1\r" * ------- "\rfibStart: n1 with: n2\r        "Private - Calculate the n-th Fibonacci number, where\r         n is the receiver, n1 is previous Fibonacci number\r         and n2 - the preprevious one."\r ^ (self < 2)\r        ifTrue: [ n1 ]\r        ifFalse:[ (self - 1) fibStart: n1+n2 with:n1 ]\r\r3 fibStart: 1 with: 10  "12"\r4 fibo "5"\r12 fibonacci "233"\r\r\r"\r\r\r<fibStart:with:>\rЦе рекурсивний метод, який обчислює n-те число послідовності Фібоначчі, використовуючи два допоміжні параметри — n1 (попереднє значення) і n2 (передпопереднє значення). На кожному кроці рекурсії відбувається виклик:\r(self - 1) fibStart: n1 + n2 with: n1 — таким чином, наступний етап отримує нові значення, де поточне число стає сумою двох попередніх.\rТакий підхід дозволяє виконувати обчислення без повторних підрахунків уже відомих значень, тому алгоритм має лінійну складність O(n). Він працює швидко навіть для великих n і потребує мінімум пам’яті — лише для рекурсивних викликів (глибина дорівнює n).\r\r<fibo>\rЦе допоміжний метод, який просто викликає fibStart:with: із початковими значеннями. Його мета — спростити виклик функції, щоб не потрібно було вручну задавати перші два числа послідовності. Фактично, він працює так само, як і fibStart:with:, але зручніший у використанні, коли потрібно просто отримати n-те число Фібоначчі.\r\r<fibonacci>\rЦей варіант використовує класичне рекурсивне визначення:\rF(n) = F(n - 1) + F(n - 2)\rМетод простий у розумінні, але дуже неефективний для великих n, оскільки він не запам’ятовує вже обчислені значення і багаторазово виконує ті самі обчислення. Через це його складність є експоненційною — приблизно O(2ⁿ). При великих значеннях n така реалізація значно навантажує процесор і стек викликів, тому практично використовується лише для навчальних цілей або демонстрацій.\r"\r\r"------------------------------------------------------------------------------------\r ------ СТВОРЕННЯ, ОПРАЦЮВАННЯ КОЛЕКЦІЙ\r  У текстовому файлі записано інформацію про матрицю цілих чисел: розміри\r  матриці в першому рядку файла, у всіх наступних рядках - рядки матриці.}\r  Прочитати матрицю, знайти максимальні елементи кожного рядка і зберегти\r  їх у файлі. Надрукувати максимальний елемент цілої матриці."\r\r"Наведений нижче код можна виконати безпосередньо в робочому вікні,\r проте,  доцільно зробити його методом власного навчального класу."\r\r| matr fStream fName n m mMatr mLines |\r        "Вибір файла за допомогою діалогу"\r    (fName:=UIManager default\r\t\t\tchooseFullFileNameMatching: nil \r\t\t\tlabel: \'Виберіть файл з числовими даними\' ) isNil\r        ifTrue: [ ^\'Ви не вибрали файла\' ]. \r        fStream := fName asFileReference readStream.\r\t        "Введення даних"\r \t    n := Integer readFrom: fStream.  \r\t    matr := Array new: n.\r\t    m := Integer readFrom: fStream.\r\t    matr := matr collect: [ :x | Array new: m ]. \r\t    1 to: n do: [ :i |  fStream nextLine.\r \t\t     matr at: i put: (\r\t\t\t\t (matr at: i) collect: [ :x |  \r\t\t\t\t\t\tInteger readFrom: fStream. ]\r\t\t\t\t\t )\t ].\r    fStream close. matr inspect.\r        "Обчислення максимальних елементів"\r    mLines:=matr collect: [ :r | r inject: (r at: 1) into: [ :x :y | x max: y] ].\r    mMatr:=mLines at: 1.\r    mLines do: [ :x | x > mMatr ifTrue: [ mMatr := x ] ].\r        "Побудова імені файла результатів, збереження"\r    fName at: fName size - 4 put: $_ .\r    fStream := fName asFileReference writeStream.\r    mLines do: [ :x | x printOn: fStream. fStream cr ].\r    fStream close.\r    ^mMatr .  \r\r" Поясніть код, наведений вище (кожне повідомлення!):\r\r\tУ цьому коді ми працюємо з матрицею чисел, зчитаною з файлу. Спершу оголошуємо локальні змінні для зберігання самої матриці, потоку файлу, імені файлу, кількості рядків і стовпців, а також для проміжних результатів. Далі відкривається діалог для вибору файлу користувачем. Якщо файл не обрано, метод одразу повертає повідомлення про це і подальше виконання коду зупиняється.\r\rПісля цього створюється потік для читання файлу. Перше число з файлу визначає кількість рядків матриці, а друге число — кількість стовпців. У початковій версії матриця реалізується як масив масивів: спершу створюємо масив для рядків, а потім кожен рядок заповнюємо окремим масивом стовпців. Потік закривається після зчитування даних, і відкривається інспектор для перегляду структури матриці.\r\rЩоб знайти максимуми рядків, кожен рядок обробляється за допомогою методу inject, який проходить усі елементи рядка і визначає найбільше значення. Потім, перебираючи всі максимуми рядків, знаходиться загальний максимум усієї матриці. Після обробки результатів ім’я файлу змінюється для збереження результатів у новий файл, відкривається потік на запис, і кожен максимум рядка записується в файл на окремий рядок. Потім потік закривається. Нарешті, метод повертає максимальний елемент усієї матриці.\r\r   Як можна замінити масив масивів на екземпляр класу Matrix?:\r\tЯкщо використовувати клас Matrix, код можна зробити більш компактним і зручним. Клас Matrix зберігає матрицю як єдину структуру n × m, і доступ до елементів відбувається через at: i at: j, що виключає необхідність створювати масив масивів. Спочатку відкриваємо потік для читання файлу і зчитуємо розміри матриці. Потім створюємо об’єкт Matrix відповідного розміру і заповнюємо його числами з файлу. Далі, перебираючи рядки та стовпці, за допомогою вкладених inject визначаємо максимальні значення для кожного рядка та загальний максимум матриці. Результат повертається як вихідний максимум. Такий підхід дозволяє робити код більш структурованим і компактним, позбавляє зайвих проміжних масивів і робить роботу з матрицею наочнішою.\r======================================================"\r\r"------ АДРЕСНА КНИГА\r Приклад створення і використання адресної книги, описаний у одній з лекцій. \r Пригадуєте, спочатку оголошуємо глобальну змінну, що міститиме впорядковану \r колекцію масивів з трьох рядків. Спосіб порівняння описує бінарний блок."\r\r    Smalltalk globals at: #AddressBook\r              put:(SortedCollection sortBlock:[:a :b | (a at:1)<=(b at:1)]).\r\r" * --- Тепер до книги можна додавати записи. "\r\r    AddressBook\r            add: #(\'Ruth\' \'Babe\' \'456 Mudville Flats\');\r            add: #(\'Smith\' \'John\' \'12/5 Park Ave\');\r            add: #(\'Jexon\' \'John\' \'5 Baverli Hills\');\r            add: #(\'Adams\' \'John\' \'1 Hell str\');\r            add: #(\'Taylor\' \'Babe\' \'2a/35 Deribas str\');\r            add: #(\'Greg\' \'Voss\' \'12345 the USA\');\r\r            add: #(\'Ivanov\' \'Nazar\' \'Kyiv, Main Str 25\');\r            add: #(\'Koval\' \'Bohdan\' \'Lviv, Freedom Ave 12\');\r            add: #(\'Shevchenko\' \'Nazar\' \'Kharkiv, Central Park 3\');\r            add: #(\'Petrenko\' \'Nazar\' \'Odesa, Sea St 8\').\r\r" * --- Додайте власні записи. Видрукуйте вміст книги (код запропоновано нижче).  "\r\r\r\r   | s w |  s := WriteStream on: String new.\r    AddressBook do:[:x | x do:\r        [ :y | s nextPutAll: y; tab; tab.].\r        s cr. ].\r  w := Workspace openLabel: \'My Address Book\'.\r  w contents: s contents.\r\r" * ----  Наступне завдання - надрукувати список прізвищ людей з однаковими іменами. \r              Приклад демонструє різні способи перебору та перетворення колекцій."\r\r | firstNames duplicates |\r    firstNames:=Bag new.        "утворимо торбу імен"\r    AddressBook do: [ :entry | firstNames add: (entry at: 2) ].\r        "виберемо ті імена, які зустрічаються більше одного разу"\r    duplicates:=firstNames select:\r        [ :name | (firstNames occurrencesOf: name)>1 ].\r            "і впорядкуємо їх"\r    duplicates:=duplicates asSet asSortedCollection.\r        "друкуємо імена та відповідні їм прізвища"\r    duplicates do: [ :first | first printOn: Transcript. Transcript show:\'==>\'.\r        AddressBook do: [ :entry | (entry at: 2)=first\r            ifTrue: [ Transcript show:\' \'. (entry at: 1) printOn: Transcript ] ].\r        Transcript cr ]. Transcript show:\' \'.\r\r"Поясніть перетворення, що відбуваються в цьому фрагменті. \r   Запропонуйте власні варіанти використання та перетворення колекцій. \r   Оформіть запропоновані вище фрагменти як методи навчального класу."\r\r"\rSmalltalk globals at: #AddressBook \r    put: (SortedCollection sortBlock: [:a :b | (a at: 1) <= (b at: 1)]).\rТут створюється впорядкована колекція (SortedCollection), яка зберігатиме записи у вигляді масивів із трьох елементів:\r#(\'Прізвище\' \'Імʼя\' \'Адреса\').\r\rБлок [:a :b | (a at:1) <= (b at:1)] визначає, що сортування відбуватиметься за першим елементом масиву (тобто за прізвищем).\r\rТаким чином, усі записи в AddressBook автоматично будуть впорядковуватись за прізвищем."\r"\rAddressBook\r    add: #(\'Ruth\' \'Babe\' \'456 Mudville Flats\');\r    add: #(\'Smith\' \'John\' \'12/5 Park Ave\');\r    add: #(\'Jexon\' \'John\' \'5 Baverli Hills\');\r    add: #(\'Adams\' \'John\' \'1 Hell str\');\r    add: #(\'Taylor\' \'Babe\' \'2a/35 Deribas str\');\r    add: #(\'Greg\' \'Voss\' \'12345 the USA\');\r    add: #(\'Ivanov\' \'Nazar\' \'Kyiv, Main Str 25\');\r    add: #(\'Koval\' \'Bohdan\' \'Lviv, Freedom Ave 12\');\r    add: #(\'Shevchenko\' \'Nazar\' \'Kharkiv, Central Park 3\');\r    add: #(\'Petrenko\' \'Nazar\' \'Odesa, Sea St 8\').\r\r\rКожен рядок додає масив із трьох полів: прізвище, ім’я та адреса.\rПісля додавання всі записи автоматично впорядковуються за прізвищем.\r\r"\r\r"Власні варіанти використання та перетворення колекцій:\r""1. Пошук за містом""\rAddressBook select: [:entry | (entry at: 3) includesSubstring: \'Kyiv\'].\r\r""2. Заміна імені Nazar на Nazarii""\rAddressBook do: [:entry | (entry at: 2) = \'Nazar\' ifTrue: [ entry at: 2 put: \'Nazarii\' ]].\r\r""3. Унікальні імена""\r(AddressBook collect: [:entry | entry at: 2]) asSet.\r"\r\r"------ ДОДАВАННЯ АДРЕС\r  Можливо, додавання записів до AddressBook за допомогою явного програмування \r  виглядає не надто привабливо. Використайте з цією метою діалоги "\r\r| a b c | \ra := UIManager default request: \'Input first name\'.\rb := UIManager default request: \'Input second name\'.\rc := UIManager default request: \'Input address\'.\ra isNil | b isNil | c isNil ifFalse: [ AddressBook add: (Array with:a with:b with:c)].\r\r"Додайте до книги декілька нових записів, знову видрукуйте її. "\r                                    \r" Поміркуйте, як зробити зручнішим звертання до діалогу додавання адрес та друку адресної книги. "\r\r\r"Що станеться, якщо виконати наступний код? Випробуйте. "\r    Smalltalk globals removeKey:#AddressBook.\r\r"Відповідь: Видалиться ключ #AddressBook."\r\r "------ ПЕРЕТВОРЕННЯ (ПЕРЕВТІЛЕННЯ) ОБ\'ЄКТІВ\r   Виконайте за допомогою Do It. "\r\r | a b c|\r    a := OrderedCollection new.\r    b := Cylinder  new.\r    c := Array with: a with: b with: b.\r    Transcript show: \'Old Array is = \'.\r    c do: [ :x | Transcript show: \'     \'. x printOn: Transcript ].\r    Transcript cr.\r    a become: b.\r    Transcript show: \'New Array is = \'.\r    c do: [ :x | Transcript show: \'     \'. x printOn: Transcript ].\r    Transcript cr; show:\' \'. "Unknown variable"\r" Поясніть дію методу become:. Чи можна замість нього користуватися звичайним присвоєнням? Наведіть власні приклади. "\r\r"Відповідь: Він міняє всі посилання на два об’єкти місцями у всій системі.  \r  Не можна замість become використовувати звичайне присвоєння, адже такого ефекту не можливо буде досягнути."\r\r\r\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-10-05T22:16:11.626+03:00' ],
		#self : OmReference [ '11' ]
	},
	#content : '"--------------------------------------------------------------------------------------\r*                      ЛАБОРОТОРНА РОБОТА 3\r*                 Тема: КЛАСИ ТА МЕТОДИ. КОЛЕКЦІЇ\r*\r*  Завдання до лабораторної роботи:\r*     1. Виконайте наведені нижче приклади, збережіть і поясніть отримані результати.\r*     2. Випробуйте різноманітні способи додавання нових класів до системи.\r*     3. Навчіться доповнювати функціональність класів.\r*     4. Випробуйте методи опрацювання колекцій.\r*\r\r    Виконайте за допомогою <Print it> \r\r ------ ПРИНАЛЕЖНІСТЬ КЛАСОВІ, ІЄРАРХІЯ КЛАСІВ\r"\r    #(Francesca Jackie Marisa Bree) class. "Array"\r    (#(Francesca Jackie Marisa Bree) at:2) class. "ByteSymbol"\r    \'Rakesh Vijay Charles Daniel Tyler\' class. "ByteString"\r    (\'Rakesh Vijay Charles Daniel Tyler\' at:2) class. "Character (a)"\r    World class . "WorldMorph"\r    Magnitude class. "Magnitude class"\r    Magnitude class class. "Metaclass"\r    nil class. "UndefinedObject"\r    5 species. "SmallInteger"\r    123456789000 species. "SmallInteger"\r    #aName species. "ByteString"\r " Яка різниця між повідомленнями class i species ? \r\r    Випробуйте різні способи відкривання браузера класів: за допомогою меню чи програмно \r     Виконайте за допомогою <Do it>\r"\r    ClyFullBrowserMorph open. \r    ClyFullBrowserMorph openOnClass: Date. \r    ClyFullBrowserMorph openOnClass: VolumeShape  selector:  #volume. \r\r" ------ МЕТОДИ КЛАСУ, КОНСТРУКТОРИ\r  Виконайте за допомогою <Print It>. Запропонуйте власні приклади. "\r\r    Array new: 10. "#(nil nil nil nil nil nil nil nil nil nil)"        \r    OrderedCollection  new. "an OrderedCollection()"\r    Date today. "29 September 2025"\r    Time now. "10:28:52.422 am"\r    UIManager default  request:\'How are you?\' initialAnswer:\'I\'\'m fine!\'. "\'I\'\'m fine!\'"\r    Integer readFrom: \'2013  1925\'. "2013"\r    Integer primesUpTo: 100. "#(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97)"\r    Rectangle origin:0@0 corner:200@100. "(0@0) corner: (200@100)"\r    Date nameOfMonth:12. "#December"\r    Date dayOfWeek: #Friday. "6"\r    Date orthodoxEasterDateFor: 2022. "24 April 2022"\r\r\r   \r"Інсталюйте вказані нижче МЕТОДИ КЛАСУ Date:\r  перенесіть копію тексту визначення методу з робочого вікна в браузер класів.\r\r""!Date class methodsFor: \'specific inquiries\' stamp: \'CamilloBruni 8/22/2013 19:47\'!""\r\rorthodoxEasterDateFor: year\r ""  compute the easter date according to the rules of the orthodox calendar.\r    source:       http://www.smart.net/~mmontes/ortheast.html   ""\r     | r1 r2 r3 r4 ra rb r5 rc date |\r\r    r1 := year \\\\ 19.\r    r2 := year \\\\ 4.\r    r3 := year \\\\ 7.\r    ra := 19*r1 + 16.\r    r4 := ra \\\\ 30.\r    rb := r2 + r2 + (4*r3) + (6*r4).\r    r5 := rb \\\\ 7.\r    rc := r4 + r5.\r    date := self year: year month: 4 day: 3.\r    ^date addDays: rc.\r""--------------------------------------------------------------------------------------""\r""!Date class methodsFor: \'specific inquiries\' stamp: \'CamilloBruni 8/22/2013 19:48\'!""\r\reasterDateFor: year\r ""  compute the easter date.\r    source: Physikalisch-Technische Bundesanstalt Braunschweig.\r    Lichtenberg, H.: Zur Interpretation der Gaussschen Osterformel und ihrer Ausnahmeregeln, Historia Mathematica 24 (1997), pp. 441-444\r      http://www.ptb.de/de/org/4/44/441/oste.htm  ""\r\r  | k m s a d r og sz oe day |\r\r  k := year // 100.\r  m := 15 + (3*k + 3//4) - (8*k + 13//25).\r   s := 2 - (3*k + 3// 4).\r  a := year \\\\ 19.\r  d := 19*a + m \\\\ 30.\r  r := d//29 + ((d//28) - (d//29)* (a// 11)).\r\r  og := 21 + d - r.\r  sz := 7 - (year//4 + year + s\\\\7).\r  oe := 7 - (og - sz\\\\7).\r  day := og + oe.\r  ^day <= 31\r    ifTrue: [ Date year: year month: 3 day: day ]\r    ifFalse: [ Date year: year month: 4 day: day - 31 ].\r"\r\r"Знайдіть роки, коли святкування припадають на один день."\r\ryearsWithMatchingEasterFrom: startYear to: endYear\r\r    | matchingYears orthodoxDate catholicDate |\r    matchingYears := OrderedCollection new.\r    (startYear to: endYear) do: [:year |\r        orthodoxDate := self orthodoxEasterDateFor: year.\r        catholicDate := self easterDateFor: year.\r        (orthodoxDate = catholicDate) ifTrue: [\r            matchingYears add: year\r        ].\r    ].\r    ^matchingYears asArray\r\rDate yearsWithMatchingEasterFrom: 2000 to: 2050. "#(2001 2004 2007 2010 2011 2014 2017 2025 2028 2031 2034 2037 2038 2041 2045 2048)"\r\r" ------ РЕКУРСІЯ\r  Додайте до класу Integer і випробуйте різні методи обчислення чисел  Фібоначчі.\r  Запропонуйте власні. Порівняйте їхню ефективність.      \r  Перед випробуванням fibonacci ЗБЕРЕЖІТЬ ІМІДЖ СИСТЕМИ! Він може зайняти Ваш комп на тиждень.  "\r\r" * ------- "\rfibonacci\r        "Answer the nth fibonacci number, where n is the receiver."\r    ^self < 2\r        ifTrue: [1]\r        ifFalse:[(self - 1) fibonacci + (self - 2) fibonacci]\r" * ------- "\rfibo\r        "Frontend function to call fibStart: with: .\r         Answer the nth fibonacci number, where n is the receiver."\r    ^self fibStart:1 with:1\r" * ------- "\rfibStart: n1 with: n2\r        "Private - Calculate the n-th Fibonacci number, where\r         n is the receiver, n1 is previous Fibonacci number\r         and n2 - the preprevious one."\r ^ (self < 2)\r        ifTrue: [ n1 ]\r        ifFalse:[ (self - 1) fibStart: n1+n2 with:n1 ]\r\r3 fibStart: 1 with: 10  "12"\r4 fibo "5"\r12 fibonacci "233"\r\r\r"\r\r\r<fibStart:with:>\rЦе рекурсивний метод, який обчислює n-те число послідовності Фібоначчі, використовуючи два допоміжні параметри — n1 (попереднє значення) і n2 (передпопереднє значення). На кожному кроці рекурсії відбувається виклик:\r(self - 1) fibStart: n1 + n2 with: n1 — таким чином, наступний етап отримує нові значення, де поточне число стає сумою двох попередніх.\rТакий підхід дозволяє виконувати обчислення без повторних підрахунків уже відомих значень, тому алгоритм має лінійну складність O(n). Він працює швидко навіть для великих n і потребує мінімум пам’яті — лише для рекурсивних викликів (глибина дорівнює n).\r\r<fibo>\rЦе допоміжний метод, який просто викликає fibStart:with: із початковими значеннями. Його мета — спростити виклик функції, щоб не потрібно було вручну задавати перші два числа послідовності. Фактично, він працює так само, як і fibStart:with:, але зручніший у використанні, коли потрібно просто отримати n-те число Фібоначчі.\r\r<fibonacci>\rЦей варіант використовує класичне рекурсивне визначення:\rF(n) = F(n - 1) + F(n - 2)\rМетод простий у розумінні, але дуже неефективний для великих n, оскільки він не запам’ятовує вже обчислені значення і багаторазово виконує ті самі обчислення. Через це його складність є експоненційною — приблизно O(2ⁿ). При великих значеннях n така реалізація значно навантажує процесор і стек викликів, тому практично використовується лише для навчальних цілей або демонстрацій.\r"\r\r"------------------------------------------------------------------------------------\r ------ СТВОРЕННЯ, ОПРАЦЮВАННЯ КОЛЕКЦІЙ\r  У текстовому файлі записано інформацію про матрицю цілих чисел: розміри\r  матриці в першому рядку файла, у всіх наступних рядках - рядки матриці.}\r  Прочитати матрицю, знайти максимальні елементи кожного рядка і зберегти\r  їх у файлі. Надрукувати максимальний елемент цілої матриці."\r\r"Наведений нижче код можна виконати безпосередньо в робочому вікні,\r проте,  доцільно зробити його методом власного навчального класу."\r\r| matr fStream fName n m mMatr mLines |\r        "Вибір файла за допомогою діалогу"\r    (fName:=UIManager default\r\t\t\tchooseFullFileNameMatching: nil \r\t\t\tlabel: \'Виберіть файл з числовими даними\' ) isNil\r        ifTrue: [ ^\'Ви не вибрали файла\' ]. \r        fStream := fName asFileReference readStream.\r\t        "Введення даних"\r \t    n := Integer readFrom: fStream.  \r\t    matr := Array new: n.\r\t    m := Integer readFrom: fStream.\r\t    matr := matr collect: [ :x | Array new: m ]. \r\t    1 to: n do: [ :i |  fStream nextLine.\r \t\t     matr at: i put: (\r\t\t\t\t (matr at: i) collect: [ :x |  \r\t\t\t\t\t\tInteger readFrom: fStream. ]\r\t\t\t\t\t )\t ].\r    fStream close. matr inspect.\r        "Обчислення максимальних елементів"\r    mLines:=matr collect: [ :r | r inject: (r at: 1) into: [ :x :y | x max: y] ].\r    mMatr:=mLines at: 1.\r    mLines do: [ :x | x > mMatr ifTrue: [ mMatr := x ] ].\r        "Побудова імені файла результатів, збереження"\r    fName at: fName size - 4 put: $_ .\r    fStream := fName asFileReference writeStream.\r    mLines do: [ :x | x printOn: fStream. fStream cr ].\r    fStream close.\r    ^mMatr .  \r\r" Поясніть код, наведений вище (кожне повідомлення!):\r\r\tУ цьому коді ми працюємо з матрицею чисел, зчитаною з файлу. Спершу оголошуємо локальні змінні для зберігання самої матриці, потоку файлу, імені файлу, кількості рядків і стовпців, а також для проміжних результатів. Далі відкривається діалог для вибору файлу користувачем. Якщо файл не обрано, метод одразу повертає повідомлення про це і подальше виконання коду зупиняється.\r\rПісля цього створюється потік для читання файлу. Перше число з файлу визначає кількість рядків матриці, а друге число — кількість стовпців. У початковій версії матриця реалізується як масив масивів: спершу створюємо масив для рядків, а потім кожен рядок заповнюємо окремим масивом стовпців. Потік закривається після зчитування даних, і відкривається інспектор для перегляду структури матриці.\r\rЩоб знайти максимуми рядків, кожен рядок обробляється за допомогою методу inject, який проходить усі елементи рядка і визначає найбільше значення. Потім, перебираючи всі максимуми рядків, знаходиться загальний максимум усієї матриці. Після обробки результатів ім’я файлу змінюється для збереження результатів у новий файл, відкривається потік на запис, і кожен максимум рядка записується в файл на окремий рядок. Потім потік закривається. Нарешті, метод повертає максимальний елемент усієї матриці.\r\r   Як можна замінити масив масивів на екземпляр класу Matrix?:\r\tЯкщо використовувати клас Matrix, код можна зробити більш компактним і зручним. Клас Matrix зберігає матрицю як єдину структуру n × m, і доступ до елементів відбувається через at: i at: j, що виключає необхідність створювати масив масивів. Спочатку відкриваємо потік для читання файлу і зчитуємо розміри матриці. Потім створюємо об’єкт Matrix відповідного розміру і заповнюємо його числами з файлу. Далі, перебираючи рядки та стовпці, за допомогою вкладених inject визначаємо максимальні значення для кожного рядка та загальний максимум матриці. Результат повертається як вихідний максимум. Такий підхід дозволяє робити код більш структурованим і компактним, позбавляє зайвих проміжних масивів і робить роботу з матрицею наочнішою.\r======================================================"\r\r"------ АДРЕСНА КНИГА\r Приклад створення і використання адресної книги, описаний у одній з лекцій. \r Пригадуєте, спочатку оголошуємо глобальну змінну, що міститиме впорядковану \r колекцію масивів з трьох рядків. Спосіб порівняння описує бінарний блок."\r\r    Smalltalk globals at: #AddressBook\r              put:(SortedCollection sortBlock:[:a :b | (a at:1)<=(b at:1)]).\r\r" * --- Тепер до книги можна додавати записи. "\r\r    AddressBook\r            add: #(\'Ruth\' \'Babe\' \'456 Mudville Flats\');\r            add: #(\'Smith\' \'John\' \'12/5 Park Ave\');\r            add: #(\'Jexon\' \'John\' \'5 Baverli Hills\');\r            add: #(\'Adams\' \'John\' \'1 Hell str\');\r            add: #(\'Taylor\' \'Babe\' \'2a/35 Deribas str\');\r            add: #(\'Greg\' \'Voss\' \'12345 the USA\');\r\r            add: #(\'Ivanov\' \'Nazar\' \'Kyiv, Main Str 25\');\r            add: #(\'Koval\' \'Bohdan\' \'Lviv, Freedom Ave 12\');\r            add: #(\'Shevchenko\' \'Nazar\' \'Kharkiv, Central Park 3\');\r            add: #(\'Petrenko\' \'Nazar\' \'Odesa, Sea St 8\').\r\r" * --- Додайте власні записи. Видрукуйте вміст книги (код запропоновано нижче).  "\r\r\r\r   | s w |  s := WriteStream on: String new.\r    AddressBook do:[:x | x do:\r        [ :y | s nextPutAll: y; tab; tab.].\r        s cr. ].\r  w := Workspace openLabel: \'My Address Book\'.\r  w contents: s contents.\r\r" * ----  Наступне завдання - надрукувати список прізвищ людей з однаковими іменами. \r              Приклад демонструє різні способи перебору та перетворення колекцій."\r\r | firstNames duplicates |\r    firstNames:=Bag new.        "утворимо торбу імен"\r    AddressBook do: [ :entry | firstNames add: (entry at: 2) ].\r        "виберемо ті імена, які зустрічаються більше одного разу"\r    duplicates:=firstNames select:\r        [ :name | (firstNames occurrencesOf: name)>1 ].\r            "і впорядкуємо їх"\r    duplicates:=duplicates asSet asSortedCollection.\r        "друкуємо імена та відповідні їм прізвища"\r    duplicates do: [ :first | first printOn: Transcript. Transcript show:\'==>\'.\r        AddressBook do: [ :entry | (entry at: 2)=first\r            ifTrue: [ Transcript show:\' \'. (entry at: 1) printOn: Transcript ] ].\r        Transcript cr ]. Transcript show:\' \'.\r\r"Поясніть перетворення, що відбуваються в цьому фрагменті. \r   Запропонуйте власні варіанти використання та перетворення колекцій. \r   Оформіть запропоновані вище фрагменти як методи навчального класу."\r\r"\rSmalltalk globals at: #AddressBook \r    put: (SortedCollection sortBlock: [:a :b | (a at: 1) <= (b at: 1)]).\rТут створюється впорядкована колекція (SortedCollection), яка зберігатиме записи у вигляді масивів із трьох елементів:\r#(\'Прізвище\' \'Імʼя\' \'Адреса\').\r\rБлок [:a :b | (a at:1) <= (b at:1)] визначає, що сортування відбуватиметься за першим елементом масиву (тобто за прізвищем).\r\rТаким чином, усі записи в AddressBook автоматично будуть впорядковуватись за прізвищем."\r"\rAddressBook\r    add: #(\'Ruth\' \'Babe\' \'456 Mudville Flats\');\r    add: #(\'Smith\' \'John\' \'12/5 Park Ave\');\r    add: #(\'Jexon\' \'John\' \'5 Baverli Hills\');\r    add: #(\'Adams\' \'John\' \'1 Hell str\');\r    add: #(\'Taylor\' \'Babe\' \'2a/35 Deribas str\');\r    add: #(\'Greg\' \'Voss\' \'12345 the USA\');\r    add: #(\'Ivanov\' \'Nazar\' \'Kyiv, Main Str 25\');\r    add: #(\'Koval\' \'Bohdan\' \'Lviv, Freedom Ave 12\');\r    add: #(\'Shevchenko\' \'Nazar\' \'Kharkiv, Central Park 3\');\r    add: #(\'Petrenko\' \'Nazar\' \'Odesa, Sea St 8\').\r\r\rКожен рядок додає масив із трьох полів: прізвище, ім’я та адреса.\rПісля додавання всі записи автоматично впорядковуються за прізвищем.\r\r"\r\r"\r| s w |\rs := WriteStream on: String new.\rAddressBook do: [:x | \r    x do: [:y | s nextPutAll: y; tab; tab.].\r    s cr.\r].\rw := Workspace openLabel: \'My Address Book\'.\rw contents: s contents.\rТут відбувається кілька перетворень:\r\r1. WriteStream on: String new створює потік запису, щоб поступово формувати текстовий рядок.\r\r2. Цикл AddressBook do: перебирає кожен запис (масив) у книзі.\r\r3. Внутрішній цикл x do: перебирає елементи всередині кожного запису (тобто прізвище, імʼя, адресу).\r\r4. s nextPutAll: y; tab; tab. додає текст і вставляє табуляцію між елементами.\r\r5. s cr — переносить рядок.\r\rПотім створюється нове вікно Workspace, у якому виводиться готовий текст.\r"\r\r"| firstNames duplicates |\rfirstNames := Bag new.\rAddressBook do: [:entry | firstNames add: (entry at: 2)].\rduplicates := firstNames select: [:name | (firstNames occurrencesOf: name) > 1].\rduplicates := duplicates asSet asSortedCollection.\r\rBag — це ""торба"", яка дозволяє зберігати повторювані елементи (на відміну від Set).\r\rУ перший цикл додаються всі імена з кожного запису (другий елемент масиву).\r\rПотім обираються лише ті імена, які зустрічаються більше одного разу.\r\rasSet — перетворює торбу на множину (прибирає дублікати).\r\rasSortedCollection — сортує отримані імена за алфавітом."\r\r"Власні варіанти використання та перетворення колекцій:\r""1. Пошук за містом""\rAddressBook select: [:entry | (entry at: 3) includesSubstring: \'Kyiv\'].\r\r""2. Заміна імені Nazar на Nazarii""\rAddressBook do: [:entry | (entry at: 2) = \'Nazar\' ifTrue: [ entry at: 2 put: \'Nazarii\' ]].\r\r""3. Унікальні імена""\r(AddressBook collect: [:entry | entry at: 2]) asSet.\r"\r\r"------ ДОДАВАННЯ АДРЕС\r  Можливо, додавання записів до AddressBook за допомогою явного програмування \r  виглядає не надто привабливо. Використайте з цією метою діалоги "\r\r| a b c | \ra := UIManager default request: \'Input first name\'.\rb := UIManager default request: \'Input second name\'.\rc := UIManager default request: \'Input address\'.\ra isNil | b isNil | c isNil ifFalse: [ AddressBook add: (Array with:a with:b with:c)].\r\r"Додайте до книги декілька нових записів, знову видрукуйте її. "\r                                    \r" Поміркуйте, як зробити зручнішим звертання до діалогу додавання адрес та друку адресної книги. "\r\r\r"Що станеться, якщо виконати наступний код? Випробуйте. "\r    Smalltalk globals removeKey:#AddressBook.\r\r"Відповідь: Видалиться ключ #AddressBook."\r\r "------ ПЕРЕТВОРЕННЯ (ПЕРЕВТІЛЕННЯ) ОБ\'ЄКТІВ\r   Виконайте за допомогою Do It. "\r\r | a b c|\r    a := OrderedCollection new.\r    b := Cylinder  new.\r    c := Array with: a with: b with: b.\r    Transcript show: \'Old Array is = \'.\r    c do: [ :x | Transcript show: \'     \'. x printOn: Transcript ].\r    Transcript cr.\r    a become: b.\r    Transcript show: \'New Array is = \'.\r    c do: [ :x | Transcript show: \'     \'. x printOn: Transcript ].\r    Transcript cr; show:\' \'. "Unknown variable"\r" Поясніть дію методу become:. Чи можна замість нього користуватися звичайним присвоєнням? Наведіть власні приклади. "\r\r"Відповідь: Він міняє всі посилання на два об’єкти місцями у всій системі.  \r  Не можна замість become використовувати звичайне присвоєння, адже такого ефекту не можливо буде досягнути."\r\r\r\r\r\r\r\r'
}OmEntry {
	#tags : {
		#timestamp : DateAndTime [ '2025-10-05T22:17:33.061+03:00' ],
		#self : OmReference [ '12' ]
	},
	#content : '"--------------------------------------------------------------------------------------\r*                      ЛАБОРОТОРНА РОБОТА 3\r*                 Тема: КЛАСИ ТА МЕТОДИ. КОЛЕКЦІЇ\r*\r*  Завдання до лабораторної роботи:\r*     1. Виконайте наведені нижче приклади, збережіть і поясніть отримані результати.\r*     2. Випробуйте різноманітні способи додавання нових класів до системи.\r*     3. Навчіться доповнювати функціональність класів.\r*     4. Випробуйте методи опрацювання колекцій.\r*\r\r    Виконайте за допомогою <Print it> \r\r ------ ПРИНАЛЕЖНІСТЬ КЛАСОВІ, ІЄРАРХІЯ КЛАСІВ\r"\r    #(Francesca Jackie Marisa Bree) class. "Array"\r    (#(Francesca Jackie Marisa Bree) at:2) class. "ByteSymbol"\r    \'Rakesh Vijay Charles Daniel Tyler\' class. "ByteString"\r    (\'Rakesh Vijay Charles Daniel Tyler\' at:2) class. "Character (a)"\r    World class . "WorldMorph"\r    Magnitude class. "Magnitude class"\r    Magnitude class class. "Metaclass"\r    nil class. "UndefinedObject"\r    5 species. "SmallInteger"\r    123456789000 species. "SmallInteger"\r    #aName species. "ByteString"\r " Яка різниця між повідомленнями class i species ? \rВідповідь: class — описує об’єкт.\r           species — описує, який тип колекції створюється під час перетворень.\r\r    Випробуйте різні способи відкривання браузера класів: за допомогою меню чи програмно \r     Виконайте за допомогою <Do it>\r"\r    ClyFullBrowserMorph open. \r    ClyFullBrowserMorph openOnClass: Date. \r    ClyFullBrowserMorph openOnClass: VolumeShape  selector:  #volume. \r\r" ------ МЕТОДИ КЛАСУ, КОНСТРУКТОРИ\r  Виконайте за допомогою <Print It>. Запропонуйте власні приклади. "\r\r    Array new: 10. "#(nil nil nil nil nil nil nil nil nil nil)"        \r    OrderedCollection  new. "an OrderedCollection()"\r    Date today. "29 September 2025"\r    Time now. "10:28:52.422 am"\r    UIManager default  request:\'How are you?\' initialAnswer:\'I\'\'m fine!\'. "\'I\'\'m fine!\'"\r    Integer readFrom: \'2013  1925\'. "2013"\r    Integer primesUpTo: 100. "#(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97)"\r    Rectangle origin:0@0 corner:200@100. "(0@0) corner: (200@100)"\r    Date nameOfMonth:12. "#December"\r    Date dayOfWeek: #Friday. "6"\r    Date orthodoxEasterDateFor: 2022. "24 April 2022"\r\r\r   \r"Інсталюйте вказані нижче МЕТОДИ КЛАСУ Date:\r  перенесіть копію тексту визначення методу з робочого вікна в браузер класів.\r\r""!Date class methodsFor: \'specific inquiries\' stamp: \'CamilloBruni 8/22/2013 19:47\'!""\r\rorthodoxEasterDateFor: year\r ""  compute the easter date according to the rules of the orthodox calendar.\r    source:       http://www.smart.net/~mmontes/ortheast.html   ""\r     | r1 r2 r3 r4 ra rb r5 rc date |\r\r    r1 := year \\\\ 19.\r    r2 := year \\\\ 4.\r    r3 := year \\\\ 7.\r    ra := 19*r1 + 16.\r    r4 := ra \\\\ 30.\r    rb := r2 + r2 + (4*r3) + (6*r4).\r    r5 := rb \\\\ 7.\r    rc := r4 + r5.\r    date := self year: year month: 4 day: 3.\r    ^date addDays: rc.\r""--------------------------------------------------------------------------------------""\r""!Date class methodsFor: \'specific inquiries\' stamp: \'CamilloBruni 8/22/2013 19:48\'!""\r\reasterDateFor: year\r ""  compute the easter date.\r    source: Physikalisch-Technische Bundesanstalt Braunschweig.\r    Lichtenberg, H.: Zur Interpretation der Gaussschen Osterformel und ihrer Ausnahmeregeln, Historia Mathematica 24 (1997), pp. 441-444\r      http://www.ptb.de/de/org/4/44/441/oste.htm  ""\r\r  | k m s a d r og sz oe day |\r\r  k := year // 100.\r  m := 15 + (3*k + 3//4) - (8*k + 13//25).\r   s := 2 - (3*k + 3// 4).\r  a := year \\\\ 19.\r  d := 19*a + m \\\\ 30.\r  r := d//29 + ((d//28) - (d//29)* (a// 11)).\r\r  og := 21 + d - r.\r  sz := 7 - (year//4 + year + s\\\\7).\r  oe := 7 - (og - sz\\\\7).\r  day := og + oe.\r  ^day <= 31\r    ifTrue: [ Date year: year month: 3 day: day ]\r    ifFalse: [ Date year: year month: 4 day: day - 31 ].\r"\r\r"Знайдіть роки, коли святкування припадають на один день."\r\ryearsWithMatchingEasterFrom: startYear to: endYear\r\r    | matchingYears orthodoxDate catholicDate |\r    matchingYears := OrderedCollection new.\r    (startYear to: endYear) do: [:year |\r        orthodoxDate := self orthodoxEasterDateFor: year.\r        catholicDate := self easterDateFor: year.\r        (orthodoxDate = catholicDate) ifTrue: [\r            matchingYears add: year\r        ].\r    ].\r    ^matchingYears asArray\r\rDate yearsWithMatchingEasterFrom: 2000 to: 2050. "#(2001 2004 2007 2010 2011 2014 2017 2025 2028 2031 2034 2037 2038 2041 2045 2048)"\r\r" ------ РЕКУРСІЯ\r  Додайте до класу Integer і випробуйте різні методи обчислення чисел  Фібоначчі.\r  Запропонуйте власні. Порівняйте їхню ефективність.      \r  Перед випробуванням fibonacci ЗБЕРЕЖІТЬ ІМІДЖ СИСТЕМИ! Він може зайняти Ваш комп на тиждень.  "\r\r" * ------- "\rfibonacci\r        "Answer the nth fibonacci number, where n is the receiver."\r    ^self < 2\r        ifTrue: [1]\r        ifFalse:[(self - 1) fibonacci + (self - 2) fibonacci]\r" * ------- "\rfibo\r        "Frontend function to call fibStart: with: .\r         Answer the nth fibonacci number, where n is the receiver."\r    ^self fibStart:1 with:1\r" * ------- "\rfibStart: n1 with: n2\r        "Private - Calculate the n-th Fibonacci number, where\r         n is the receiver, n1 is previous Fibonacci number\r         and n2 - the preprevious one."\r ^ (self < 2)\r        ifTrue: [ n1 ]\r        ifFalse:[ (self - 1) fibStart: n1+n2 with:n1 ]\r\r3 fibStart: 1 with: 10  "12"\r4 fibo "5"\r12 fibonacci "233"\r\r\r"\r\r\r<fibStart:with:>\rЦе рекурсивний метод, який обчислює n-те число послідовності Фібоначчі, використовуючи два допоміжні параметри — n1 (попереднє значення) і n2 (передпопереднє значення). На кожному кроці рекурсії відбувається виклик:\r(self - 1) fibStart: n1 + n2 with: n1 — таким чином, наступний етап отримує нові значення, де поточне число стає сумою двох попередніх.\rТакий підхід дозволяє виконувати обчислення без повторних підрахунків уже відомих значень, тому алгоритм має лінійну складність O(n). Він працює швидко навіть для великих n і потребує мінімум пам’яті — лише для рекурсивних викликів (глибина дорівнює n).\r\r<fibo>\rЦе допоміжний метод, який просто викликає fibStart:with: із початковими значеннями. Його мета — спростити виклик функції, щоб не потрібно було вручну задавати перші два числа послідовності. Фактично, він працює так само, як і fibStart:with:, але зручніший у використанні, коли потрібно просто отримати n-те число Фібоначчі.\r\r<fibonacci>\rЦей варіант використовує класичне рекурсивне визначення:\rF(n) = F(n - 1) + F(n - 2)\rМетод простий у розумінні, але дуже неефективний для великих n, оскільки він не запам’ятовує вже обчислені значення і багаторазово виконує ті самі обчислення. Через це його складність є експоненційною — приблизно O(2ⁿ). При великих значеннях n така реалізація значно навантажує процесор і стек викликів, тому практично використовується лише для навчальних цілей або демонстрацій.\r"\r\r"------------------------------------------------------------------------------------\r ------ СТВОРЕННЯ, ОПРАЦЮВАННЯ КОЛЕКЦІЙ\r  У текстовому файлі записано інформацію про матрицю цілих чисел: розміри\r  матриці в першому рядку файла, у всіх наступних рядках - рядки матриці.}\r  Прочитати матрицю, знайти максимальні елементи кожного рядка і зберегти\r  їх у файлі. Надрукувати максимальний елемент цілої матриці."\r\r"Наведений нижче код можна виконати безпосередньо в робочому вікні,\r проте,  доцільно зробити його методом власного навчального класу."\r\r| matr fStream fName n m mMatr mLines |\r        "Вибір файла за допомогою діалогу"\r    (fName:=UIManager default\r\t\t\tchooseFullFileNameMatching: nil \r\t\t\tlabel: \'Виберіть файл з числовими даними\' ) isNil\r        ifTrue: [ ^\'Ви не вибрали файла\' ]. \r        fStream := fName asFileReference readStream.\r\t        "Введення даних"\r \t    n := Integer readFrom: fStream.  \r\t    matr := Array new: n.\r\t    m := Integer readFrom: fStream.\r\t    matr := matr collect: [ :x | Array new: m ]. \r\t    1 to: n do: [ :i |  fStream nextLine.\r \t\t     matr at: i put: (\r\t\t\t\t (matr at: i) collect: [ :x |  \r\t\t\t\t\t\tInteger readFrom: fStream. ]\r\t\t\t\t\t )\t ].\r    fStream close. matr inspect.\r        "Обчислення максимальних елементів"\r    mLines:=matr collect: [ :r | r inject: (r at: 1) into: [ :x :y | x max: y] ].\r    mMatr:=mLines at: 1.\r    mLines do: [ :x | x > mMatr ifTrue: [ mMatr := x ] ].\r        "Побудова імені файла результатів, збереження"\r    fName at: fName size - 4 put: $_ .\r    fStream := fName asFileReference writeStream.\r    mLines do: [ :x | x printOn: fStream. fStream cr ].\r    fStream close.\r    ^mMatr .  \r\r" Поясніть код, наведений вище (кожне повідомлення!):\r\r\tУ цьому коді ми працюємо з матрицею чисел, зчитаною з файлу. Спершу оголошуємо локальні змінні для зберігання самої матриці, потоку файлу, імені файлу, кількості рядків і стовпців, а також для проміжних результатів. Далі відкривається діалог для вибору файлу користувачем. Якщо файл не обрано, метод одразу повертає повідомлення про це і подальше виконання коду зупиняється.\r\rПісля цього створюється потік для читання файлу. Перше число з файлу визначає кількість рядків матриці, а друге число — кількість стовпців. У початковій версії матриця реалізується як масив масивів: спершу створюємо масив для рядків, а потім кожен рядок заповнюємо окремим масивом стовпців. Потік закривається після зчитування даних, і відкривається інспектор для перегляду структури матриці.\r\rЩоб знайти максимуми рядків, кожен рядок обробляється за допомогою методу inject, який проходить усі елементи рядка і визначає найбільше значення. Потім, перебираючи всі максимуми рядків, знаходиться загальний максимум усієї матриці. Після обробки результатів ім’я файлу змінюється для збереження результатів у новий файл, відкривається потік на запис, і кожен максимум рядка записується в файл на окремий рядок. Потім потік закривається. Нарешті, метод повертає максимальний елемент усієї матриці.\r\r   Як можна замінити масив масивів на екземпляр класу Matrix?:\r\tЯкщо використовувати клас Matrix, код можна зробити більш компактним і зручним. Клас Matrix зберігає матрицю як єдину структуру n × m, і доступ до елементів відбувається через at: i at: j, що виключає необхідність створювати масив масивів. Спочатку відкриваємо потік для читання файлу і зчитуємо розміри матриці. Потім створюємо об’єкт Matrix відповідного розміру і заповнюємо його числами з файлу. Далі, перебираючи рядки та стовпці, за допомогою вкладених inject визначаємо максимальні значення для кожного рядка та загальний максимум матриці. Результат повертається як вихідний максимум. Такий підхід дозволяє робити код більш структурованим і компактним, позбавляє зайвих проміжних масивів і робить роботу з матрицею наочнішою.\r======================================================"\r\r"------ АДРЕСНА КНИГА\r Приклад створення і використання адресної книги, описаний у одній з лекцій. \r Пригадуєте, спочатку оголошуємо глобальну змінну, що міститиме впорядковану \r колекцію масивів з трьох рядків. Спосіб порівняння описує бінарний блок."\r\r    Smalltalk globals at: #AddressBook\r              put:(SortedCollection sortBlock:[:a :b | (a at:1)<=(b at:1)]).\r\r" * --- Тепер до книги можна додавати записи. "\r\r    AddressBook\r            add: #(\'Ruth\' \'Babe\' \'456 Mudville Flats\');\r            add: #(\'Smith\' \'John\' \'12/5 Park Ave\');\r            add: #(\'Jexon\' \'John\' \'5 Baverli Hills\');\r            add: #(\'Adams\' \'John\' \'1 Hell str\');\r            add: #(\'Taylor\' \'Babe\' \'2a/35 Deribas str\');\r            add: #(\'Greg\' \'Voss\' \'12345 the USA\');\r\r            add: #(\'Ivanov\' \'Nazar\' \'Kyiv, Main Str 25\');\r            add: #(\'Koval\' \'Bohdan\' \'Lviv, Freedom Ave 12\');\r            add: #(\'Shevchenko\' \'Nazar\' \'Kharkiv, Central Park 3\');\r            add: #(\'Petrenko\' \'Nazar\' \'Odesa, Sea St 8\').\r\r" * --- Додайте власні записи. Видрукуйте вміст книги (код запропоновано нижче).  "\r\r\r\r   | s w |  s := WriteStream on: String new.\r    AddressBook do:[:x | x do:\r        [ :y | s nextPutAll: y; tab; tab.].\r        s cr. ].\r  w := Workspace openLabel: \'My Address Book\'.\r  w contents: s contents.\r\r" * ----  Наступне завдання - надрукувати список прізвищ людей з однаковими іменами. \r              Приклад демонструє різні способи перебору та перетворення колекцій."\r\r | firstNames duplicates |\r    firstNames:=Bag new.        "утворимо торбу імен"\r    AddressBook do: [ :entry | firstNames add: (entry at: 2) ].\r        "виберемо ті імена, які зустрічаються більше одного разу"\r    duplicates:=firstNames select:\r        [ :name | (firstNames occurrencesOf: name)>1 ].\r            "і впорядкуємо їх"\r    duplicates:=duplicates asSet asSortedCollection.\r        "друкуємо імена та відповідні їм прізвища"\r    duplicates do: [ :first | first printOn: Transcript. Transcript show:\'==>\'.\r        AddressBook do: [ :entry | (entry at: 2)=first\r            ifTrue: [ Transcript show:\' \'. (entry at: 1) printOn: Transcript ] ].\r        Transcript cr ]. Transcript show:\' \'.\r\r"Поясніть перетворення, що відбуваються в цьому фрагменті. \r   Запропонуйте власні варіанти використання та перетворення колекцій. \r   Оформіть запропоновані вище фрагменти як методи навчального класу."\r\r"\rSmalltalk globals at: #AddressBook \r    put: (SortedCollection sortBlock: [:a :b | (a at: 1) <= (b at: 1)]).\rТут створюється впорядкована колекція (SortedCollection), яка зберігатиме записи у вигляді масивів із трьох елементів:\r#(\'Прізвище\' \'Імʼя\' \'Адреса\').\r\rБлок [:a :b | (a at:1) <= (b at:1)] визначає, що сортування відбуватиметься за першим елементом масиву (тобто за прізвищем).\r\rТаким чином, усі записи в AddressBook автоматично будуть впорядковуватись за прізвищем."\r"\rAddressBook\r    add: #(\'Ruth\' \'Babe\' \'456 Mudville Flats\');\r    add: #(\'Smith\' \'John\' \'12/5 Park Ave\');\r    add: #(\'Jexon\' \'John\' \'5 Baverli Hills\');\r    add: #(\'Adams\' \'John\' \'1 Hell str\');\r    add: #(\'Taylor\' \'Babe\' \'2a/35 Deribas str\');\r    add: #(\'Greg\' \'Voss\' \'12345 the USA\');\r    add: #(\'Ivanov\' \'Nazar\' \'Kyiv, Main Str 25\');\r    add: #(\'Koval\' \'Bohdan\' \'Lviv, Freedom Ave 12\');\r    add: #(\'Shevchenko\' \'Nazar\' \'Kharkiv, Central Park 3\');\r    add: #(\'Petrenko\' \'Nazar\' \'Odesa, Sea St 8\').\r\r\rКожен рядок додає масив із трьох полів: прізвище, ім’я та адреса.\rПісля додавання всі записи автоматично впорядковуються за прізвищем.\r\r"\r\r"\r| s w |\rs := WriteStream on: String new.\rAddressBook do: [:x | \r    x do: [:y | s nextPutAll: y; tab; tab.].\r    s cr.\r].\rw := Workspace openLabel: \'My Address Book\'.\rw contents: s contents.\rТут відбувається кілька перетворень:\r\r1. WriteStream on: String new створює потік запису, щоб поступово формувати текстовий рядок.\r\r2. Цикл AddressBook do: перебирає кожен запис (масив) у книзі.\r\r3. Внутрішній цикл x do: перебирає елементи всередині кожного запису (тобто прізвище, імʼя, адресу).\r\r4. s nextPutAll: y; tab; tab. додає текст і вставляє табуляцію між елементами.\r\r5. s cr — переносить рядок.\r\rПотім створюється нове вікно Workspace, у якому виводиться готовий текст.\r"\r\r"| firstNames duplicates |\rfirstNames := Bag new.\rAddressBook do: [:entry | firstNames add: (entry at: 2)].\rduplicates := firstNames select: [:name | (firstNames occurrencesOf: name) > 1].\rduplicates := duplicates asSet asSortedCollection.\r\rBag — це ""торба"", яка дозволяє зберігати повторювані елементи (на відміну від Set).\r\rУ перший цикл додаються всі імена з кожного запису (другий елемент масиву).\r\rПотім обираються лише ті імена, які зустрічаються більше одного разу.\r\rasSet — перетворює торбу на множину (прибирає дублікати).\r\rasSortedCollection — сортує отримані імена за алфавітом."\r\r"Власні варіанти використання та перетворення колекцій:\r""1. Пошук за містом""\rAddressBook select: [:entry | (entry at: 3) includesSubstring: \'Kyiv\'].\r\r""2. Заміна імені Nazar на Nazarii""\rAddressBook do: [:entry | (entry at: 2) = \'Nazar\' ifTrue: [ entry at: 2 put: \'Nazarii\' ]].\r\r""3. Унікальні імена""\r(AddressBook collect: [:entry | entry at: 2]) asSet.\r"\r\r"------ ДОДАВАННЯ АДРЕС\r  Можливо, додавання записів до AddressBook за допомогою явного програмування \r  виглядає не надто привабливо. Використайте з цією метою діалоги "\r\r| a b c | \ra := UIManager default request: \'Input first name\'.\rb := UIManager default request: \'Input second name\'.\rc := UIManager default request: \'Input address\'.\ra isNil | b isNil | c isNil ifFalse: [ AddressBook add: (Array with:a with:b with:c)].\r\r"Додайте до книги декілька нових записів, знову видрукуйте її. "\r                                    \r" Поміркуйте, як зробити зручнішим звертання до діалогу додавання адрес та друку адресної книги. "\r\r\r"Що станеться, якщо виконати наступний код? Випробуйте. "\r    Smalltalk globals removeKey:#AddressBook.\r\r"Відповідь: Видалиться ключ #AddressBook."\r\r "------ ПЕРЕТВОРЕННЯ (ПЕРЕВТІЛЕННЯ) ОБ\'ЄКТІВ\r   Виконайте за допомогою Do It. "\r\r | a b c|\r    a := OrderedCollection new.\r    b := Cylinder  new.\r    c := Array with: a with: b with: b.\r    Transcript show: \'Old Array is = \'.\r    c do: [ :x | Transcript show: \'     \'. x printOn: Transcript ].\r    Transcript cr.\r    a become: b.\r    Transcript show: \'New Array is = \'.\r    c do: [ :x | Transcript show: \'     \'. x printOn: Transcript ].\r    Transcript cr; show:\' \'. "Unknown variable"\r" Поясніть дію методу become:. Чи можна замість нього користуватися звичайним присвоєнням? Наведіть власні приклади. "\r\r"Відповідь: Він міняє всі посилання на два об’єкти місцями у всій системі.  \r  Не можна замість become використовувати звичайне присвоєння, адже такого ефекту не можливо буде досягнути."\r\r\r\r\r\r\r\r'
}